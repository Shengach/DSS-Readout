
DSS_Readout.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c518  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000504  0800c6b8  0800c6b8  0001c6b8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800cbbc  0800cbbc  000201e8  2**0
                  CONTENTS
  4 .ARM          00000008  0800cbbc  0800cbbc  0001cbbc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800cbc4  0800cbc4  000201e8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800cbc4  0800cbc4  0001cbc4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800cbc8  0800cbc8  0001cbc8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e8  20000000  0800cbcc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000135c  200001e8  0800cdb4  000201e8  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20001544  0800cdb4  00021544  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201e8  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001702b  00000000  00000000  00020218  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000029b5  00000000  00000000  00037243  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001530  00000000  00000000  00039bf8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001428  00000000  00000000  0003b128  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00025a4d  00000000  00000000  0003c550  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000170e2  00000000  00000000  00061f9d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ec93c  00000000  00000000  0007907f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  001659bb  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000719c  00000000  00000000  00165a0c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001e8 	.word	0x200001e8
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800c6a0 	.word	0x0800c6a0

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200001ec 	.word	0x200001ec
 80001dc:	0800c6a0 	.word	0x0800c6a0

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_d2uiz>:
 8000bb8:	004a      	lsls	r2, r1, #1
 8000bba:	d211      	bcs.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bbc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bc0:	d211      	bcs.n	8000be6 <__aeabi_d2uiz+0x2e>
 8000bc2:	d50d      	bpl.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bc4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bc8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bcc:	d40e      	bmi.n	8000bec <__aeabi_d2uiz+0x34>
 8000bce:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bd2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bd6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bda:	fa23 f002 	lsr.w	r0, r3, r2
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bea:	d102      	bne.n	8000bf2 <__aeabi_d2uiz+0x3a>
 8000bec:	f04f 30ff 	mov.w	r0, #4294967295
 8000bf0:	4770      	bx	lr
 8000bf2:	f04f 0000 	mov.w	r0, #0
 8000bf6:	4770      	bx	lr

08000bf8 <__aeabi_d2f>:
 8000bf8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bfc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c00:	bf24      	itt	cs
 8000c02:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c06:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c0a:	d90d      	bls.n	8000c28 <__aeabi_d2f+0x30>
 8000c0c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c10:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c14:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c18:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c1c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c20:	bf08      	it	eq
 8000c22:	f020 0001 	biceq.w	r0, r0, #1
 8000c26:	4770      	bx	lr
 8000c28:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c2c:	d121      	bne.n	8000c72 <__aeabi_d2f+0x7a>
 8000c2e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c32:	bfbc      	itt	lt
 8000c34:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c38:	4770      	bxlt	lr
 8000c3a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c3e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c42:	f1c2 0218 	rsb	r2, r2, #24
 8000c46:	f1c2 0c20 	rsb	ip, r2, #32
 8000c4a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c4e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c52:	bf18      	it	ne
 8000c54:	f040 0001 	orrne.w	r0, r0, #1
 8000c58:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c5c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c60:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c64:	ea40 000c 	orr.w	r0, r0, ip
 8000c68:	fa23 f302 	lsr.w	r3, r3, r2
 8000c6c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c70:	e7cc      	b.n	8000c0c <__aeabi_d2f+0x14>
 8000c72:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c76:	d107      	bne.n	8000c88 <__aeabi_d2f+0x90>
 8000c78:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c7c:	bf1e      	ittt	ne
 8000c7e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c82:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c86:	4770      	bxne	lr
 8000c88:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c8c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c90:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c94:	4770      	bx	lr
 8000c96:	bf00      	nop

08000c98 <__aeabi_uldivmod>:
 8000c98:	b953      	cbnz	r3, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9a:	b94a      	cbnz	r2, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9c:	2900      	cmp	r1, #0
 8000c9e:	bf08      	it	eq
 8000ca0:	2800      	cmpeq	r0, #0
 8000ca2:	bf1c      	itt	ne
 8000ca4:	f04f 31ff 	movne.w	r1, #4294967295
 8000ca8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cac:	f000 b9aa 	b.w	8001004 <__aeabi_idiv0>
 8000cb0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cb4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cb8:	f000 f83c 	bl	8000d34 <__udivmoddi4>
 8000cbc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cc0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cc4:	b004      	add	sp, #16
 8000cc6:	4770      	bx	lr

08000cc8 <__aeabi_d2lz>:
 8000cc8:	b538      	push	{r3, r4, r5, lr}
 8000cca:	2200      	movs	r2, #0
 8000ccc:	2300      	movs	r3, #0
 8000cce:	4604      	mov	r4, r0
 8000cd0:	460d      	mov	r5, r1
 8000cd2:	f7ff ff0b 	bl	8000aec <__aeabi_dcmplt>
 8000cd6:	b928      	cbnz	r0, 8000ce4 <__aeabi_d2lz+0x1c>
 8000cd8:	4620      	mov	r0, r4
 8000cda:	4629      	mov	r1, r5
 8000cdc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000ce0:	f000 b80a 	b.w	8000cf8 <__aeabi_d2ulz>
 8000ce4:	4620      	mov	r0, r4
 8000ce6:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000cea:	f000 f805 	bl	8000cf8 <__aeabi_d2ulz>
 8000cee:	4240      	negs	r0, r0
 8000cf0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cf4:	bd38      	pop	{r3, r4, r5, pc}
 8000cf6:	bf00      	nop

08000cf8 <__aeabi_d2ulz>:
 8000cf8:	b5d0      	push	{r4, r6, r7, lr}
 8000cfa:	4b0c      	ldr	r3, [pc, #48]	; (8000d2c <__aeabi_d2ulz+0x34>)
 8000cfc:	2200      	movs	r2, #0
 8000cfe:	4606      	mov	r6, r0
 8000d00:	460f      	mov	r7, r1
 8000d02:	f7ff fc81 	bl	8000608 <__aeabi_dmul>
 8000d06:	f7ff ff57 	bl	8000bb8 <__aeabi_d2uiz>
 8000d0a:	4604      	mov	r4, r0
 8000d0c:	f7ff fc02 	bl	8000514 <__aeabi_ui2d>
 8000d10:	4b07      	ldr	r3, [pc, #28]	; (8000d30 <__aeabi_d2ulz+0x38>)
 8000d12:	2200      	movs	r2, #0
 8000d14:	f7ff fc78 	bl	8000608 <__aeabi_dmul>
 8000d18:	4602      	mov	r2, r0
 8000d1a:	460b      	mov	r3, r1
 8000d1c:	4630      	mov	r0, r6
 8000d1e:	4639      	mov	r1, r7
 8000d20:	f7ff faba 	bl	8000298 <__aeabi_dsub>
 8000d24:	f7ff ff48 	bl	8000bb8 <__aeabi_d2uiz>
 8000d28:	4621      	mov	r1, r4
 8000d2a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d2c:	3df00000 	.word	0x3df00000
 8000d30:	41f00000 	.word	0x41f00000

08000d34 <__udivmoddi4>:
 8000d34:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d38:	9d08      	ldr	r5, [sp, #32]
 8000d3a:	4604      	mov	r4, r0
 8000d3c:	468e      	mov	lr, r1
 8000d3e:	2b00      	cmp	r3, #0
 8000d40:	d14d      	bne.n	8000dde <__udivmoddi4+0xaa>
 8000d42:	428a      	cmp	r2, r1
 8000d44:	4694      	mov	ip, r2
 8000d46:	d969      	bls.n	8000e1c <__udivmoddi4+0xe8>
 8000d48:	fab2 f282 	clz	r2, r2
 8000d4c:	b152      	cbz	r2, 8000d64 <__udivmoddi4+0x30>
 8000d4e:	fa01 f302 	lsl.w	r3, r1, r2
 8000d52:	f1c2 0120 	rsb	r1, r2, #32
 8000d56:	fa20 f101 	lsr.w	r1, r0, r1
 8000d5a:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d5e:	ea41 0e03 	orr.w	lr, r1, r3
 8000d62:	4094      	lsls	r4, r2
 8000d64:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d68:	0c21      	lsrs	r1, r4, #16
 8000d6a:	fbbe f6f8 	udiv	r6, lr, r8
 8000d6e:	fa1f f78c 	uxth.w	r7, ip
 8000d72:	fb08 e316 	mls	r3, r8, r6, lr
 8000d76:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000d7a:	fb06 f107 	mul.w	r1, r6, r7
 8000d7e:	4299      	cmp	r1, r3
 8000d80:	d90a      	bls.n	8000d98 <__udivmoddi4+0x64>
 8000d82:	eb1c 0303 	adds.w	r3, ip, r3
 8000d86:	f106 30ff 	add.w	r0, r6, #4294967295
 8000d8a:	f080 811f 	bcs.w	8000fcc <__udivmoddi4+0x298>
 8000d8e:	4299      	cmp	r1, r3
 8000d90:	f240 811c 	bls.w	8000fcc <__udivmoddi4+0x298>
 8000d94:	3e02      	subs	r6, #2
 8000d96:	4463      	add	r3, ip
 8000d98:	1a5b      	subs	r3, r3, r1
 8000d9a:	b2a4      	uxth	r4, r4
 8000d9c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000da0:	fb08 3310 	mls	r3, r8, r0, r3
 8000da4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000da8:	fb00 f707 	mul.w	r7, r0, r7
 8000dac:	42a7      	cmp	r7, r4
 8000dae:	d90a      	bls.n	8000dc6 <__udivmoddi4+0x92>
 8000db0:	eb1c 0404 	adds.w	r4, ip, r4
 8000db4:	f100 33ff 	add.w	r3, r0, #4294967295
 8000db8:	f080 810a 	bcs.w	8000fd0 <__udivmoddi4+0x29c>
 8000dbc:	42a7      	cmp	r7, r4
 8000dbe:	f240 8107 	bls.w	8000fd0 <__udivmoddi4+0x29c>
 8000dc2:	4464      	add	r4, ip
 8000dc4:	3802      	subs	r0, #2
 8000dc6:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000dca:	1be4      	subs	r4, r4, r7
 8000dcc:	2600      	movs	r6, #0
 8000dce:	b11d      	cbz	r5, 8000dd8 <__udivmoddi4+0xa4>
 8000dd0:	40d4      	lsrs	r4, r2
 8000dd2:	2300      	movs	r3, #0
 8000dd4:	e9c5 4300 	strd	r4, r3, [r5]
 8000dd8:	4631      	mov	r1, r6
 8000dda:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dde:	428b      	cmp	r3, r1
 8000de0:	d909      	bls.n	8000df6 <__udivmoddi4+0xc2>
 8000de2:	2d00      	cmp	r5, #0
 8000de4:	f000 80ef 	beq.w	8000fc6 <__udivmoddi4+0x292>
 8000de8:	2600      	movs	r6, #0
 8000dea:	e9c5 0100 	strd	r0, r1, [r5]
 8000dee:	4630      	mov	r0, r6
 8000df0:	4631      	mov	r1, r6
 8000df2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000df6:	fab3 f683 	clz	r6, r3
 8000dfa:	2e00      	cmp	r6, #0
 8000dfc:	d14a      	bne.n	8000e94 <__udivmoddi4+0x160>
 8000dfe:	428b      	cmp	r3, r1
 8000e00:	d302      	bcc.n	8000e08 <__udivmoddi4+0xd4>
 8000e02:	4282      	cmp	r2, r0
 8000e04:	f200 80f9 	bhi.w	8000ffa <__udivmoddi4+0x2c6>
 8000e08:	1a84      	subs	r4, r0, r2
 8000e0a:	eb61 0303 	sbc.w	r3, r1, r3
 8000e0e:	2001      	movs	r0, #1
 8000e10:	469e      	mov	lr, r3
 8000e12:	2d00      	cmp	r5, #0
 8000e14:	d0e0      	beq.n	8000dd8 <__udivmoddi4+0xa4>
 8000e16:	e9c5 4e00 	strd	r4, lr, [r5]
 8000e1a:	e7dd      	b.n	8000dd8 <__udivmoddi4+0xa4>
 8000e1c:	b902      	cbnz	r2, 8000e20 <__udivmoddi4+0xec>
 8000e1e:	deff      	udf	#255	; 0xff
 8000e20:	fab2 f282 	clz	r2, r2
 8000e24:	2a00      	cmp	r2, #0
 8000e26:	f040 8092 	bne.w	8000f4e <__udivmoddi4+0x21a>
 8000e2a:	eba1 010c 	sub.w	r1, r1, ip
 8000e2e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e32:	fa1f fe8c 	uxth.w	lr, ip
 8000e36:	2601      	movs	r6, #1
 8000e38:	0c20      	lsrs	r0, r4, #16
 8000e3a:	fbb1 f3f7 	udiv	r3, r1, r7
 8000e3e:	fb07 1113 	mls	r1, r7, r3, r1
 8000e42:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e46:	fb0e f003 	mul.w	r0, lr, r3
 8000e4a:	4288      	cmp	r0, r1
 8000e4c:	d908      	bls.n	8000e60 <__udivmoddi4+0x12c>
 8000e4e:	eb1c 0101 	adds.w	r1, ip, r1
 8000e52:	f103 38ff 	add.w	r8, r3, #4294967295
 8000e56:	d202      	bcs.n	8000e5e <__udivmoddi4+0x12a>
 8000e58:	4288      	cmp	r0, r1
 8000e5a:	f200 80cb 	bhi.w	8000ff4 <__udivmoddi4+0x2c0>
 8000e5e:	4643      	mov	r3, r8
 8000e60:	1a09      	subs	r1, r1, r0
 8000e62:	b2a4      	uxth	r4, r4
 8000e64:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e68:	fb07 1110 	mls	r1, r7, r0, r1
 8000e6c:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000e70:	fb0e fe00 	mul.w	lr, lr, r0
 8000e74:	45a6      	cmp	lr, r4
 8000e76:	d908      	bls.n	8000e8a <__udivmoddi4+0x156>
 8000e78:	eb1c 0404 	adds.w	r4, ip, r4
 8000e7c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000e80:	d202      	bcs.n	8000e88 <__udivmoddi4+0x154>
 8000e82:	45a6      	cmp	lr, r4
 8000e84:	f200 80bb 	bhi.w	8000ffe <__udivmoddi4+0x2ca>
 8000e88:	4608      	mov	r0, r1
 8000e8a:	eba4 040e 	sub.w	r4, r4, lr
 8000e8e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000e92:	e79c      	b.n	8000dce <__udivmoddi4+0x9a>
 8000e94:	f1c6 0720 	rsb	r7, r6, #32
 8000e98:	40b3      	lsls	r3, r6
 8000e9a:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e9e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000ea2:	fa20 f407 	lsr.w	r4, r0, r7
 8000ea6:	fa01 f306 	lsl.w	r3, r1, r6
 8000eaa:	431c      	orrs	r4, r3
 8000eac:	40f9      	lsrs	r1, r7
 8000eae:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000eb2:	fa00 f306 	lsl.w	r3, r0, r6
 8000eb6:	fbb1 f8f9 	udiv	r8, r1, r9
 8000eba:	0c20      	lsrs	r0, r4, #16
 8000ebc:	fa1f fe8c 	uxth.w	lr, ip
 8000ec0:	fb09 1118 	mls	r1, r9, r8, r1
 8000ec4:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000ec8:	fb08 f00e 	mul.w	r0, r8, lr
 8000ecc:	4288      	cmp	r0, r1
 8000ece:	fa02 f206 	lsl.w	r2, r2, r6
 8000ed2:	d90b      	bls.n	8000eec <__udivmoddi4+0x1b8>
 8000ed4:	eb1c 0101 	adds.w	r1, ip, r1
 8000ed8:	f108 3aff 	add.w	sl, r8, #4294967295
 8000edc:	f080 8088 	bcs.w	8000ff0 <__udivmoddi4+0x2bc>
 8000ee0:	4288      	cmp	r0, r1
 8000ee2:	f240 8085 	bls.w	8000ff0 <__udivmoddi4+0x2bc>
 8000ee6:	f1a8 0802 	sub.w	r8, r8, #2
 8000eea:	4461      	add	r1, ip
 8000eec:	1a09      	subs	r1, r1, r0
 8000eee:	b2a4      	uxth	r4, r4
 8000ef0:	fbb1 f0f9 	udiv	r0, r1, r9
 8000ef4:	fb09 1110 	mls	r1, r9, r0, r1
 8000ef8:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000efc:	fb00 fe0e 	mul.w	lr, r0, lr
 8000f00:	458e      	cmp	lr, r1
 8000f02:	d908      	bls.n	8000f16 <__udivmoddi4+0x1e2>
 8000f04:	eb1c 0101 	adds.w	r1, ip, r1
 8000f08:	f100 34ff 	add.w	r4, r0, #4294967295
 8000f0c:	d26c      	bcs.n	8000fe8 <__udivmoddi4+0x2b4>
 8000f0e:	458e      	cmp	lr, r1
 8000f10:	d96a      	bls.n	8000fe8 <__udivmoddi4+0x2b4>
 8000f12:	3802      	subs	r0, #2
 8000f14:	4461      	add	r1, ip
 8000f16:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000f1a:	fba0 9402 	umull	r9, r4, r0, r2
 8000f1e:	eba1 010e 	sub.w	r1, r1, lr
 8000f22:	42a1      	cmp	r1, r4
 8000f24:	46c8      	mov	r8, r9
 8000f26:	46a6      	mov	lr, r4
 8000f28:	d356      	bcc.n	8000fd8 <__udivmoddi4+0x2a4>
 8000f2a:	d053      	beq.n	8000fd4 <__udivmoddi4+0x2a0>
 8000f2c:	b15d      	cbz	r5, 8000f46 <__udivmoddi4+0x212>
 8000f2e:	ebb3 0208 	subs.w	r2, r3, r8
 8000f32:	eb61 010e 	sbc.w	r1, r1, lr
 8000f36:	fa01 f707 	lsl.w	r7, r1, r7
 8000f3a:	fa22 f306 	lsr.w	r3, r2, r6
 8000f3e:	40f1      	lsrs	r1, r6
 8000f40:	431f      	orrs	r7, r3
 8000f42:	e9c5 7100 	strd	r7, r1, [r5]
 8000f46:	2600      	movs	r6, #0
 8000f48:	4631      	mov	r1, r6
 8000f4a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f4e:	f1c2 0320 	rsb	r3, r2, #32
 8000f52:	40d8      	lsrs	r0, r3
 8000f54:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f58:	fa21 f303 	lsr.w	r3, r1, r3
 8000f5c:	4091      	lsls	r1, r2
 8000f5e:	4301      	orrs	r1, r0
 8000f60:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000f64:	fa1f fe8c 	uxth.w	lr, ip
 8000f68:	fbb3 f0f7 	udiv	r0, r3, r7
 8000f6c:	fb07 3610 	mls	r6, r7, r0, r3
 8000f70:	0c0b      	lsrs	r3, r1, #16
 8000f72:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000f76:	fb00 f60e 	mul.w	r6, r0, lr
 8000f7a:	429e      	cmp	r6, r3
 8000f7c:	fa04 f402 	lsl.w	r4, r4, r2
 8000f80:	d908      	bls.n	8000f94 <__udivmoddi4+0x260>
 8000f82:	eb1c 0303 	adds.w	r3, ip, r3
 8000f86:	f100 38ff 	add.w	r8, r0, #4294967295
 8000f8a:	d22f      	bcs.n	8000fec <__udivmoddi4+0x2b8>
 8000f8c:	429e      	cmp	r6, r3
 8000f8e:	d92d      	bls.n	8000fec <__udivmoddi4+0x2b8>
 8000f90:	3802      	subs	r0, #2
 8000f92:	4463      	add	r3, ip
 8000f94:	1b9b      	subs	r3, r3, r6
 8000f96:	b289      	uxth	r1, r1
 8000f98:	fbb3 f6f7 	udiv	r6, r3, r7
 8000f9c:	fb07 3316 	mls	r3, r7, r6, r3
 8000fa0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000fa4:	fb06 f30e 	mul.w	r3, r6, lr
 8000fa8:	428b      	cmp	r3, r1
 8000faa:	d908      	bls.n	8000fbe <__udivmoddi4+0x28a>
 8000fac:	eb1c 0101 	adds.w	r1, ip, r1
 8000fb0:	f106 38ff 	add.w	r8, r6, #4294967295
 8000fb4:	d216      	bcs.n	8000fe4 <__udivmoddi4+0x2b0>
 8000fb6:	428b      	cmp	r3, r1
 8000fb8:	d914      	bls.n	8000fe4 <__udivmoddi4+0x2b0>
 8000fba:	3e02      	subs	r6, #2
 8000fbc:	4461      	add	r1, ip
 8000fbe:	1ac9      	subs	r1, r1, r3
 8000fc0:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000fc4:	e738      	b.n	8000e38 <__udivmoddi4+0x104>
 8000fc6:	462e      	mov	r6, r5
 8000fc8:	4628      	mov	r0, r5
 8000fca:	e705      	b.n	8000dd8 <__udivmoddi4+0xa4>
 8000fcc:	4606      	mov	r6, r0
 8000fce:	e6e3      	b.n	8000d98 <__udivmoddi4+0x64>
 8000fd0:	4618      	mov	r0, r3
 8000fd2:	e6f8      	b.n	8000dc6 <__udivmoddi4+0x92>
 8000fd4:	454b      	cmp	r3, r9
 8000fd6:	d2a9      	bcs.n	8000f2c <__udivmoddi4+0x1f8>
 8000fd8:	ebb9 0802 	subs.w	r8, r9, r2
 8000fdc:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000fe0:	3801      	subs	r0, #1
 8000fe2:	e7a3      	b.n	8000f2c <__udivmoddi4+0x1f8>
 8000fe4:	4646      	mov	r6, r8
 8000fe6:	e7ea      	b.n	8000fbe <__udivmoddi4+0x28a>
 8000fe8:	4620      	mov	r0, r4
 8000fea:	e794      	b.n	8000f16 <__udivmoddi4+0x1e2>
 8000fec:	4640      	mov	r0, r8
 8000fee:	e7d1      	b.n	8000f94 <__udivmoddi4+0x260>
 8000ff0:	46d0      	mov	r8, sl
 8000ff2:	e77b      	b.n	8000eec <__udivmoddi4+0x1b8>
 8000ff4:	3b02      	subs	r3, #2
 8000ff6:	4461      	add	r1, ip
 8000ff8:	e732      	b.n	8000e60 <__udivmoddi4+0x12c>
 8000ffa:	4630      	mov	r0, r6
 8000ffc:	e709      	b.n	8000e12 <__udivmoddi4+0xde>
 8000ffe:	4464      	add	r4, ip
 8001000:	3802      	subs	r0, #2
 8001002:	e742      	b.n	8000e8a <__udivmoddi4+0x156>

08001004 <__aeabi_idiv0>:
 8001004:	4770      	bx	lr
 8001006:	bf00      	nop

08001008 <__io_putchar>:
#else
  #define PUTCHAR_PROTOTYPE int fputc(int ch, FILE *f)
#endif /* __GNUC__ */

PUTCHAR_PROTOTYPE
{
 8001008:	b580      	push	{r7, lr}
 800100a:	b082      	sub	sp, #8
 800100c:	af00      	add	r7, sp, #0
 800100e:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, 0xFFFF);
 8001010:	1d39      	adds	r1, r7, #4
 8001012:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001016:	2201      	movs	r2, #1
 8001018:	4803      	ldr	r0, [pc, #12]	; (8001028 <__io_putchar+0x20>)
 800101a:	f006 f9bb 	bl	8007394 <HAL_UART_Transmit>
	return ch;
 800101e:	687b      	ldr	r3, [r7, #4]
}
 8001020:	4618      	mov	r0, r3
 8001022:	3708      	adds	r7, #8
 8001024:	46bd      	mov	sp, r7
 8001026:	bd80      	pop	{r7, pc}
 8001028:	20000440 	.word	0x20000440

0800102c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800102c:	b580      	push	{r7, lr}
 800102e:	b084      	sub	sp, #16
 8001030:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001032:	f001 f9f6 	bl	8002422 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001036:	f000 fa29 	bl	800148c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800103a:	f000 fccd 	bl	80019d8 <MX_GPIO_Init>
  MX_DMA_Init();
 800103e:	f000 fc9d 	bl	800197c <MX_DMA_Init>
  MX_USART2_UART_Init();
 8001042:	f000 fc6b 	bl	800191c <MX_USART2_UART_Init>
  MX_ADC1_Init();
 8001046:	f000 fa73 	bl	8001530 <MX_ADC1_Init>
  MX_TIM2_Init();
 800104a:	f000 fbd1 	bl	80017f0 <MX_TIM2_Init>
  MX_TIM1_Init();
 800104e:	f000 fb23 	bl	8001698 <MX_TIM1_Init>
  MX_SPI2_Init();
 8001052:	f000 fae3 	bl	800161c <MX_SPI2_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8001056:	2100      	movs	r1, #0
 8001058:	48a9      	ldr	r0, [pc, #676]	; (8001300 <main+0x2d4>)
 800105a:	f004 fc5d 	bl	8005918 <HAL_TIM_PWM_Start>
  /* TIM2 Channel 1 is set to rising edge, so it will store the data in 'riseData' */
  HAL_TIM_IC_Start_DMA(&htim2, TIM_CHANNEL_1, riseData, numval);
 800105e:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8001062:	4aa8      	ldr	r2, [pc, #672]	; (8001304 <main+0x2d8>)
 8001064:	2100      	movs	r1, #0
 8001066:	48a8      	ldr	r0, [pc, #672]	; (8001308 <main+0x2dc>)
 8001068:	f004 fd9e 	bl	8005ba8 <HAL_TIM_IC_Start_DMA>


  /* TIM2 Channel 2 is set to falling edge, so it will store the data in 'fallData' */
  HAL_TIM_IC_Start_DMA(&htim2, TIM_CHANNEL_2, fallData, numval);
 800106c:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8001070:	4aa6      	ldr	r2, [pc, #664]	; (800130c <main+0x2e0>)
 8001072:	2104      	movs	r1, #4
 8001074:	48a4      	ldr	r0, [pc, #656]	; (8001308 <main+0x2dc>)
 8001076:	f004 fd97 	bl	8005ba8 <HAL_TIM_IC_Start_DMA>

  if (HAL_ADCEx_Calibration_Start(&hadc1, ADC_SINGLE_ENDED) !=  HAL_OK)
 800107a:	217f      	movs	r1, #127	; 0x7f
 800107c:	48a4      	ldr	r0, [pc, #656]	; (8001310 <main+0x2e4>)
 800107e:	f002 fbf9 	bl	8003874 <HAL_ADCEx_Calibration_Start>
 8001082:	4603      	mov	r3, r0
 8001084:	2b00      	cmp	r3, #0
 8001086:	d001      	beq.n	800108c <main+0x60>
  {
	Error_Handler();
 8001088:	f000 fe30 	bl	8001cec <Error_Handler>
  }
  if (HAL_ADC_Start_DMA(&hadc1,
 800108c:	2220      	movs	r2, #32
 800108e:	49a1      	ldr	r1, [pc, #644]	; (8001314 <main+0x2e8>)
 8001090:	489f      	ldr	r0, [pc, #636]	; (8001310 <main+0x2e4>)
 8001092:	f001 fdab 	bl	8002bec <HAL_ADC_Start_DMA>
 8001096:	4603      	mov	r3, r0
 8001098:	2b00      	cmp	r3, #0
 800109a:	d001      	beq.n	80010a0 <main+0x74>
						(uint32_t *)aADCxConvertedData,
						ADC_CONVERTED_DATA_BUFFER_SIZE
					   ) != HAL_OK)
  {
	Error_Handler();
 800109c:	f000 fe26 	bl	8001cec <Error_Handler>
  }

  DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;
 80010a0:	4b9d      	ldr	r3, [pc, #628]	; (8001318 <main+0x2ec>)
 80010a2:	681b      	ldr	r3, [r3, #0]
 80010a4:	4a9c      	ldr	r2, [pc, #624]	; (8001318 <main+0x2ec>)
 80010a6:	f043 0301 	orr.w	r3, r3, #1
 80010aa:	6013      	str	r3, [r2, #0]
  for(i=0;i<MF_size;i++){
 80010ac:	4b9b      	ldr	r3, [pc, #620]	; (800131c <main+0x2f0>)
 80010ae:	2200      	movs	r2, #0
 80010b0:	601a      	str	r2, [r3, #0]
 80010b2:	e00c      	b.n	80010ce <main+0xa2>
	  MF_freq[i] = 0;
 80010b4:	4b99      	ldr	r3, [pc, #612]	; (800131c <main+0x2f0>)
 80010b6:	681b      	ldr	r3, [r3, #0]
 80010b8:	4a99      	ldr	r2, [pc, #612]	; (8001320 <main+0x2f4>)
 80010ba:	009b      	lsls	r3, r3, #2
 80010bc:	4413      	add	r3, r2
 80010be:	f04f 0200 	mov.w	r2, #0
 80010c2:	601a      	str	r2, [r3, #0]
  for(i=0;i<MF_size;i++){
 80010c4:	4b95      	ldr	r3, [pc, #596]	; (800131c <main+0x2f0>)
 80010c6:	681b      	ldr	r3, [r3, #0]
 80010c8:	3301      	adds	r3, #1
 80010ca:	4a94      	ldr	r2, [pc, #592]	; (800131c <main+0x2f0>)
 80010cc:	6013      	str	r3, [r2, #0]
 80010ce:	4b93      	ldr	r3, [pc, #588]	; (800131c <main+0x2f0>)
 80010d0:	681b      	ldr	r3, [r3, #0]
 80010d2:	2b08      	cmp	r3, #8
 80010d4:	ddee      	ble.n	80010b4 <main+0x88>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  startCycle = DWT->CYCCNT;
 80010d6:	4b90      	ldr	r3, [pc, #576]	; (8001318 <main+0x2ec>)
 80010d8:	685b      	ldr	r3, [r3, #4]
 80010da:	4a92      	ldr	r2, [pc, #584]	; (8001324 <main+0x2f8>)
 80010dc:	6013      	str	r3, [r2, #0]
	  int indxr = 0;
 80010de:	2300      	movs	r3, #0
 80010e0:	60fb      	str	r3, [r7, #12]
	  int countr = 0;
 80010e2:	2300      	movs	r3, #0
 80010e4:	60bb      	str	r3, [r7, #8]
	  float riseavg = 0;
 80010e6:	f04f 0300 	mov.w	r3, #0
 80010ea:	607b      	str	r3, [r7, #4]
	  float AVER_AMP = 0;
 80010ec:	f04f 0300 	mov.w	r3, #0
 80010f0:	603b      	str	r3, [r7, #0]


//	  increment the index until some useful data shows up

	  while (riseData[indxr] == 0) indxr++;
 80010f2:	e002      	b.n	80010fa <main+0xce>
 80010f4:	68fb      	ldr	r3, [r7, #12]
 80010f6:	3301      	adds	r3, #1
 80010f8:	60fb      	str	r3, [r7, #12]
 80010fa:	4a82      	ldr	r2, [pc, #520]	; (8001304 <main+0x2d8>)
 80010fc:	68fb      	ldr	r3, [r7, #12]
 80010fe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001102:	2b00      	cmp	r3, #0
 8001104:	d0f6      	beq.n	80010f4 <main+0xc8>
	  while ((MIN((riseData[indxr+1]-riseData[indxr]), (riseData[indxr+2]-riseData[indxr+1]))) == 0) indxr++;
 8001106:	e002      	b.n	800110e <main+0xe2>
 8001108:	68fb      	ldr	r3, [r7, #12]
 800110a:	3301      	adds	r3, #1
 800110c:	60fb      	str	r3, [r7, #12]
 800110e:	68fb      	ldr	r3, [r7, #12]
 8001110:	3302      	adds	r3, #2
 8001112:	4a7c      	ldr	r2, [pc, #496]	; (8001304 <main+0x2d8>)
 8001114:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001118:	68fb      	ldr	r3, [r7, #12]
 800111a:	3301      	adds	r3, #1
 800111c:	4979      	ldr	r1, [pc, #484]	; (8001304 <main+0x2d8>)
 800111e:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8001122:	1ad2      	subs	r2, r2, r3
 8001124:	68fb      	ldr	r3, [r7, #12]
 8001126:	3301      	adds	r3, #1
 8001128:	4976      	ldr	r1, [pc, #472]	; (8001304 <main+0x2d8>)
 800112a:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 800112e:	4875      	ldr	r0, [pc, #468]	; (8001304 <main+0x2d8>)
 8001130:	68fb      	ldr	r3, [r7, #12]
 8001132:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8001136:	1acb      	subs	r3, r1, r3
 8001138:	4293      	cmp	r3, r2
 800113a:	bf28      	it	cs
 800113c:	4613      	movcs	r3, r2
 800113e:	2b00      	cmp	r3, #0
 8001140:	d0e2      	beq.n	8001108 <main+0xdc>
	  while ((MIN((riseData[indxr+1]-riseData[indxr]), (riseData[indxr+2]-riseData[indxr+1]))) >= 100) indxr++;
 8001142:	e002      	b.n	800114a <main+0x11e>
 8001144:	68fb      	ldr	r3, [r7, #12]
 8001146:	3301      	adds	r3, #1
 8001148:	60fb      	str	r3, [r7, #12]
 800114a:	68fb      	ldr	r3, [r7, #12]
 800114c:	3302      	adds	r3, #2
 800114e:	4a6d      	ldr	r2, [pc, #436]	; (8001304 <main+0x2d8>)
 8001150:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001154:	68fb      	ldr	r3, [r7, #12]
 8001156:	3301      	adds	r3, #1
 8001158:	496a      	ldr	r1, [pc, #424]	; (8001304 <main+0x2d8>)
 800115a:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800115e:	1ad2      	subs	r2, r2, r3
 8001160:	68fb      	ldr	r3, [r7, #12]
 8001162:	3301      	adds	r3, #1
 8001164:	4967      	ldr	r1, [pc, #412]	; (8001304 <main+0x2d8>)
 8001166:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 800116a:	4866      	ldr	r0, [pc, #408]	; (8001304 <main+0x2d8>)
 800116c:	68fb      	ldr	r3, [r7, #12]
 800116e:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8001172:	1acb      	subs	r3, r1, r3
 8001174:	4293      	cmp	r3, r2
 8001176:	bf28      	it	cs
 8001178:	4613      	movcs	r3, r2
 800117a:	2b63      	cmp	r3, #99	; 0x63
 800117c:	d8e2      	bhi.n	8001144 <main+0x118>
	/* riseavg is the difference in the 2 consecutive rise Time */

	/* Assign a start value to riseavg */
	  riseavg += MIN((riseData[indxr+1]-riseData[indxr]), (riseData[indxr+2]-riseData[indxr+1]));
 800117e:	68fb      	ldr	r3, [r7, #12]
 8001180:	3301      	adds	r3, #1
 8001182:	4a60      	ldr	r2, [pc, #384]	; (8001304 <main+0x2d8>)
 8001184:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001188:	495e      	ldr	r1, [pc, #376]	; (8001304 <main+0x2d8>)
 800118a:	68fb      	ldr	r3, [r7, #12]
 800118c:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8001190:	1ad2      	subs	r2, r2, r3
 8001192:	68fb      	ldr	r3, [r7, #12]
 8001194:	3302      	adds	r3, #2
 8001196:	495b      	ldr	r1, [pc, #364]	; (8001304 <main+0x2d8>)
 8001198:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 800119c:	68fb      	ldr	r3, [r7, #12]
 800119e:	3301      	adds	r3, #1
 80011a0:	4858      	ldr	r0, [pc, #352]	; (8001304 <main+0x2d8>)
 80011a2:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 80011a6:	1acb      	subs	r3, r1, r3
 80011a8:	429a      	cmp	r2, r3
 80011aa:	d20e      	bcs.n	80011ca <main+0x19e>
 80011ac:	68fb      	ldr	r3, [r7, #12]
 80011ae:	3301      	adds	r3, #1
 80011b0:	4a54      	ldr	r2, [pc, #336]	; (8001304 <main+0x2d8>)
 80011b2:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80011b6:	4953      	ldr	r1, [pc, #332]	; (8001304 <main+0x2d8>)
 80011b8:	68fb      	ldr	r3, [r7, #12]
 80011ba:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80011be:	1ad3      	subs	r3, r2, r3
 80011c0:	ee07 3a90 	vmov	s15, r3
 80011c4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80011c8:	e00e      	b.n	80011e8 <main+0x1bc>
 80011ca:	68fb      	ldr	r3, [r7, #12]
 80011cc:	3302      	adds	r3, #2
 80011ce:	4a4d      	ldr	r2, [pc, #308]	; (8001304 <main+0x2d8>)
 80011d0:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80011d4:	68fb      	ldr	r3, [r7, #12]
 80011d6:	3301      	adds	r3, #1
 80011d8:	494a      	ldr	r1, [pc, #296]	; (8001304 <main+0x2d8>)
 80011da:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80011de:	1ad3      	subs	r3, r2, r3
 80011e0:	ee07 3a90 	vmov	s15, r3
 80011e4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80011e8:	ed97 7a01 	vldr	s14, [r7, #4]
 80011ec:	ee77 7a27 	vadd.f32	s15, s14, s15
 80011f0:	edc7 7a01 	vstr	s15, [r7, #4]

	  indxr++;
 80011f4:	68fb      	ldr	r3, [r7, #12]
 80011f6:	3301      	adds	r3, #1
 80011f8:	60fb      	str	r3, [r7, #12]
	  countr++;
 80011fa:	68bb      	ldr	r3, [r7, #8]
 80011fc:	3301      	adds	r3, #1
 80011fe:	60bb      	str	r3, [r7, #8]

	/* start adding the values to the riseavg */
	  while (indxr < (numval)-1)
 8001200:	e03f      	b.n	8001282 <main+0x256>
	  {
		  riseavg += MIN((riseData[indxr+1]-riseData[indxr]), riseavg/countr);
 8001202:	68fb      	ldr	r3, [r7, #12]
 8001204:	3301      	adds	r3, #1
 8001206:	4a3f      	ldr	r2, [pc, #252]	; (8001304 <main+0x2d8>)
 8001208:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800120c:	493d      	ldr	r1, [pc, #244]	; (8001304 <main+0x2d8>)
 800120e:	68fb      	ldr	r3, [r7, #12]
 8001210:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8001214:	1ad3      	subs	r3, r2, r3
 8001216:	ee07 3a90 	vmov	s15, r3
 800121a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800121e:	68bb      	ldr	r3, [r7, #8]
 8001220:	ee07 3a90 	vmov	s15, r3
 8001224:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001228:	ed97 6a01 	vldr	s12, [r7, #4]
 800122c:	eec6 7a26 	vdiv.f32	s15, s12, s13
 8001230:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001234:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001238:	d50e      	bpl.n	8001258 <main+0x22c>
 800123a:	68fb      	ldr	r3, [r7, #12]
 800123c:	3301      	adds	r3, #1
 800123e:	4a31      	ldr	r2, [pc, #196]	; (8001304 <main+0x2d8>)
 8001240:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001244:	492f      	ldr	r1, [pc, #188]	; (8001304 <main+0x2d8>)
 8001246:	68fb      	ldr	r3, [r7, #12]
 8001248:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800124c:	1ad3      	subs	r3, r2, r3
 800124e:	ee07 3a90 	vmov	s15, r3
 8001252:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001256:	e008      	b.n	800126a <main+0x23e>
 8001258:	68bb      	ldr	r3, [r7, #8]
 800125a:	ee07 3a90 	vmov	s15, r3
 800125e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001262:	edd7 6a01 	vldr	s13, [r7, #4]
 8001266:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800126a:	ed97 7a01 	vldr	s14, [r7, #4]
 800126e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001272:	edc7 7a01 	vstr	s15, [r7, #4]
		  countr++;
 8001276:	68bb      	ldr	r3, [r7, #8]
 8001278:	3301      	adds	r3, #1
 800127a:	60bb      	str	r3, [r7, #8]
		  indxr++;
 800127c:	68fb      	ldr	r3, [r7, #12]
 800127e:	3301      	adds	r3, #1
 8001280:	60fb      	str	r3, [r7, #12]
	  while (indxr < (numval)-1)
 8001282:	68fb      	ldr	r3, [r7, #12]
 8001284:	f5b3 7ff9 	cmp.w	r3, #498	; 0x1f2
 8001288:	ddbb      	ble.n	8001202 <main+0x1d6>
	  }

	/* Find the average riseavg, the average time between 2 RISE */
	  riseavg = riseavg/countr;
 800128a:	68bb      	ldr	r3, [r7, #8]
 800128c:	ee07 3a90 	vmov	s15, r3
 8001290:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001294:	edd7 6a01 	vldr	s13, [r7, #4]
 8001298:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800129c:	edc7 7a01 	vstr	s15, [r7, #4]


	  indxr = 0;
 80012a0:	2300      	movs	r3, #0
 80012a2:	60fb      	str	r3, [r7, #12]

	  if(j < 9){
 80012a4:	4b20      	ldr	r3, [pc, #128]	; (8001328 <main+0x2fc>)
 80012a6:	681b      	ldr	r3, [r3, #0]
 80012a8:	2b08      	cmp	r3, #8
 80012aa:	dc25      	bgt.n	80012f8 <main+0x2cc>
		  if(riseavg < 100 && riseavg > 0){
 80012ac:	edd7 7a01 	vldr	s15, [r7, #4]
 80012b0:	ed9f 7a1e 	vldr	s14, [pc, #120]	; 800132c <main+0x300>
 80012b4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80012b8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80012bc:	f140 80aa 	bpl.w	8001414 <main+0x3e8>
 80012c0:	edd7 7a01 	vldr	s15, [r7, #4]
 80012c4:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80012c8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80012cc:	f340 80a2 	ble.w	8001414 <main+0x3e8>
			  MF_freq[j] = (refClock/(float)riseavg);
 80012d0:	4b17      	ldr	r3, [pc, #92]	; (8001330 <main+0x304>)
 80012d2:	edd3 6a00 	vldr	s13, [r3]
 80012d6:	4b14      	ldr	r3, [pc, #80]	; (8001328 <main+0x2fc>)
 80012d8:	681b      	ldr	r3, [r3, #0]
 80012da:	ed97 7a01 	vldr	s14, [r7, #4]
 80012de:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80012e2:	4a0f      	ldr	r2, [pc, #60]	; (8001320 <main+0x2f4>)
 80012e4:	009b      	lsls	r3, r3, #2
 80012e6:	4413      	add	r3, r2
 80012e8:	edc3 7a00 	vstr	s15, [r3]
			  j++;
 80012ec:	4b0e      	ldr	r3, [pc, #56]	; (8001328 <main+0x2fc>)
 80012ee:	681b      	ldr	r3, [r3, #0]
 80012f0:	3301      	adds	r3, #1
 80012f2:	4a0d      	ldr	r2, [pc, #52]	; (8001328 <main+0x2fc>)
 80012f4:	6013      	str	r3, [r2, #0]
 80012f6:	e08d      	b.n	8001414 <main+0x3e8>
		  }
	  }
	  else
	  {
		  for(i=0; i<32; i++){
 80012f8:	4b08      	ldr	r3, [pc, #32]	; (800131c <main+0x2f0>)
 80012fa:	2200      	movs	r2, #0
 80012fc:	601a      	str	r2, [r3, #0]
 80012fe:	e04e      	b.n	800139e <main+0x372>
 8001300:	20000318 	.word	0x20000318
 8001304:	200004cc 	.word	0x200004cc
 8001308:	20000364 	.word	0x20000364
 800130c:	20000c9c 	.word	0x20000c9c
 8001310:	20000204 	.word	0x20000204
 8001314:	2000149c 	.word	0x2000149c
 8001318:	e0001000 	.word	0xe0001000
 800131c:	200004c4 	.word	0x200004c4
 8001320:	2000146c 	.word	0x2000146c
 8001324:	2000151c 	.word	0x2000151c
 8001328:	200004c8 	.word	0x200004c8
 800132c:	42c80000 	.word	0x42c80000
 8001330:	20000000 	.word	0x20000000

			  if(i%2) Pressure = aADCxConvertedData[i]*LSB;
 8001334:	4b44      	ldr	r3, [pc, #272]	; (8001448 <main+0x41c>)
 8001336:	681b      	ldr	r3, [r3, #0]
 8001338:	f003 0301 	and.w	r3, r3, #1
 800133c:	2b00      	cmp	r3, #0
 800133e:	d011      	beq.n	8001364 <main+0x338>
 8001340:	4b41      	ldr	r3, [pc, #260]	; (8001448 <main+0x41c>)
 8001342:	681b      	ldr	r3, [r3, #0]
 8001344:	4a41      	ldr	r2, [pc, #260]	; (800144c <main+0x420>)
 8001346:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800134a:	ee07 3a90 	vmov	s15, r3
 800134e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001352:	4b3f      	ldr	r3, [pc, #252]	; (8001450 <main+0x424>)
 8001354:	edd3 7a00 	vldr	s15, [r3]
 8001358:	ee67 7a27 	vmul.f32	s15, s14, s15
 800135c:	4b3d      	ldr	r3, [pc, #244]	; (8001454 <main+0x428>)
 800135e:	edc3 7a00 	vstr	s15, [r3]
 8001362:	e017      	b.n	8001394 <main+0x368>
			  else ADC_Voltage[i/2] = aADCxConvertedData[i]*LSB;
 8001364:	4b38      	ldr	r3, [pc, #224]	; (8001448 <main+0x41c>)
 8001366:	681b      	ldr	r3, [r3, #0]
 8001368:	4a38      	ldr	r2, [pc, #224]	; (800144c <main+0x420>)
 800136a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800136e:	ee07 3a90 	vmov	s15, r3
 8001372:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001376:	4b36      	ldr	r3, [pc, #216]	; (8001450 <main+0x424>)
 8001378:	edd3 7a00 	vldr	s15, [r3]
 800137c:	4b32      	ldr	r3, [pc, #200]	; (8001448 <main+0x41c>)
 800137e:	681b      	ldr	r3, [r3, #0]
 8001380:	0fda      	lsrs	r2, r3, #31
 8001382:	4413      	add	r3, r2
 8001384:	105b      	asrs	r3, r3, #1
 8001386:	ee67 7a27 	vmul.f32	s15, s14, s15
 800138a:	4a33      	ldr	r2, [pc, #204]	; (8001458 <main+0x42c>)
 800138c:	009b      	lsls	r3, r3, #2
 800138e:	4413      	add	r3, r2
 8001390:	edc3 7a00 	vstr	s15, [r3]
		  for(i=0; i<32; i++){
 8001394:	4b2c      	ldr	r3, [pc, #176]	; (8001448 <main+0x41c>)
 8001396:	681b      	ldr	r3, [r3, #0]
 8001398:	3301      	adds	r3, #1
 800139a:	4a2b      	ldr	r2, [pc, #172]	; (8001448 <main+0x41c>)
 800139c:	6013      	str	r3, [r2, #0]
 800139e:	4b2a      	ldr	r3, [pc, #168]	; (8001448 <main+0x41c>)
 80013a0:	681b      	ldr	r3, [r3, #0]
 80013a2:	2b1f      	cmp	r3, #31
 80013a4:	ddc6      	ble.n	8001334 <main+0x308>

		  }
	//		frequency = 2*medianFilter(MF_freq, 9);
		  frequency = 2*medianFilter(MF_freq, MF_size);
 80013a6:	2109      	movs	r1, #9
 80013a8:	482c      	ldr	r0, [pc, #176]	; (800145c <main+0x430>)
 80013aa:	f000 fbc7 	bl	8001b3c <medianFilter>
 80013ae:	eef0 7a40 	vmov.f32	s15, s0
 80013b2:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80013b6:	4b2a      	ldr	r3, [pc, #168]	; (8001460 <main+0x434>)
 80013b8:	edc3 7a00 	vstr	s15, [r3]
		  AVER_AMP = FIR_Filter(ADC_Voltage, ADC_CONVERTED_DATA_BUFFER_SIZE/2);
 80013bc:	2110      	movs	r1, #16
 80013be:	4826      	ldr	r0, [pc, #152]	; (8001458 <main+0x42c>)
 80013c0:	f000 fc5e 	bl	8001c80 <FIR_Filter>
 80013c4:	ed87 0a00 	vstr	s0, [r7]
		  printf("%f ", frequency);
 80013c8:	4b25      	ldr	r3, [pc, #148]	; (8001460 <main+0x434>)
 80013ca:	681b      	ldr	r3, [r3, #0]
 80013cc:	4618      	mov	r0, r3
 80013ce:	f7ff f8c3 	bl	8000558 <__aeabi_f2d>
 80013d2:	4602      	mov	r2, r0
 80013d4:	460b      	mov	r3, r1
 80013d6:	4823      	ldr	r0, [pc, #140]	; (8001464 <main+0x438>)
 80013d8:	f007 fb52 	bl	8008a80 <iprintf>
		  printf("%f ", AVER_AMP);
 80013dc:	6838      	ldr	r0, [r7, #0]
 80013de:	f7ff f8bb 	bl	8000558 <__aeabi_f2d>
 80013e2:	4602      	mov	r2, r0
 80013e4:	460b      	mov	r3, r1
 80013e6:	481f      	ldr	r0, [pc, #124]	; (8001464 <main+0x438>)
 80013e8:	f007 fb4a 	bl	8008a80 <iprintf>
		  printf("%f \r\n", Pressure);
 80013ec:	4b19      	ldr	r3, [pc, #100]	; (8001454 <main+0x428>)
 80013ee:	681b      	ldr	r3, [r3, #0]
 80013f0:	4618      	mov	r0, r3
 80013f2:	f7ff f8b1 	bl	8000558 <__aeabi_f2d>
 80013f6:	4602      	mov	r2, r0
 80013f8:	460b      	mov	r3, r1
 80013fa:	481b      	ldr	r0, [pc, #108]	; (8001468 <main+0x43c>)
 80013fc:	f007 fb40 	bl	8008a80 <iprintf>
		  AMP = AVER_AMP;
 8001400:	4a1a      	ldr	r2, [pc, #104]	; (800146c <main+0x440>)
 8001402:	683b      	ldr	r3, [r7, #0]
 8001404:	6013      	str	r3, [r2, #0]
		  HAL_Delay(1000);
 8001406:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800140a:	f001 f87f 	bl	800250c <HAL_Delay>
		  j = 0;
 800140e:	4b18      	ldr	r3, [pc, #96]	; (8001470 <main+0x444>)
 8001410:	2200      	movs	r2, #0
 8001412:	601a      	str	r2, [r3, #0]

		}
	endCycle = DWT->CYCCNT;
 8001414:	4b17      	ldr	r3, [pc, #92]	; (8001474 <main+0x448>)
 8001416:	685b      	ldr	r3, [r3, #4]
 8001418:	4a17      	ldr	r2, [pc, #92]	; (8001478 <main+0x44c>)
 800141a:	6013      	str	r3, [r2, #0]
	executionTime = endCycle - startCycle;
 800141c:	4b16      	ldr	r3, [pc, #88]	; (8001478 <main+0x44c>)
 800141e:	681a      	ldr	r2, [r3, #0]
 8001420:	4b16      	ldr	r3, [pc, #88]	; (800147c <main+0x450>)
 8001422:	681b      	ldr	r3, [r3, #0]
 8001424:	1ad3      	subs	r3, r2, r3
 8001426:	4a16      	ldr	r2, [pc, #88]	; (8001480 <main+0x454>)
 8001428:	6013      	str	r3, [r2, #0]
	time = (executionTime/TIMCLOCK);
 800142a:	4b15      	ldr	r3, [pc, #84]	; (8001480 <main+0x454>)
 800142c:	681b      	ldr	r3, [r3, #0]
 800142e:	4a15      	ldr	r2, [pc, #84]	; (8001484 <main+0x458>)
 8001430:	fba2 2303 	umull	r2, r3, r2, r3
 8001434:	0e5b      	lsrs	r3, r3, #25
 8001436:	ee07 3a90 	vmov	s15, r3
 800143a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800143e:	4b12      	ldr	r3, [pc, #72]	; (8001488 <main+0x45c>)
 8001440:	edc3 7a00 	vstr	s15, [r3]
  {
 8001444:	e647      	b.n	80010d6 <main+0xaa>
 8001446:	bf00      	nop
 8001448:	200004c4 	.word	0x200004c4
 800144c:	2000149c 	.word	0x2000149c
 8001450:	20000004 	.word	0x20000004
 8001454:	20001498 	.word	0x20001498
 8001458:	200014dc 	.word	0x200014dc
 800145c:	2000146c 	.word	0x2000146c
 8001460:	20001490 	.word	0x20001490
 8001464:	0800c6b8 	.word	0x0800c6b8
 8001468:	0800c6bc 	.word	0x0800c6bc
 800146c:	20001494 	.word	0x20001494
 8001470:	200004c8 	.word	0x200004c8
 8001474:	e0001000 	.word	0xe0001000
 8001478:	20001520 	.word	0x20001520
 800147c:	2000151c 	.word	0x2000151c
 8001480:	20001524 	.word	0x20001524
 8001484:	6b5fca6b 	.word	0x6b5fca6b
 8001488:	20001528 	.word	0x20001528

0800148c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800148c:	b580      	push	{r7, lr}
 800148e:	b096      	sub	sp, #88	; 0x58
 8001490:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001492:	f107 0314 	add.w	r3, r7, #20
 8001496:	2244      	movs	r2, #68	; 0x44
 8001498:	2100      	movs	r1, #0
 800149a:	4618      	mov	r0, r3
 800149c:	f006 fc6e 	bl	8007d7c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80014a0:	463b      	mov	r3, r7
 80014a2:	2200      	movs	r2, #0
 80014a4:	601a      	str	r2, [r3, #0]
 80014a6:	605a      	str	r2, [r3, #4]
 80014a8:	609a      	str	r2, [r3, #8]
 80014aa:	60da      	str	r2, [r3, #12]
 80014ac:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80014ae:	f44f 7000 	mov.w	r0, #512	; 0x200
 80014b2:	f002 fee9 	bl	8004288 <HAL_PWREx_ControlVoltageScaling>
 80014b6:	4603      	mov	r3, r0
 80014b8:	2b00      	cmp	r3, #0
 80014ba:	d001      	beq.n	80014c0 <SystemClock_Config+0x34>
  {
    Error_Handler();
 80014bc:	f000 fc16 	bl	8001cec <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80014c0:	2302      	movs	r3, #2
 80014c2:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80014c4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80014c8:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80014ca:	2340      	movs	r3, #64	; 0x40
 80014cc:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80014ce:	2302      	movs	r3, #2
 80014d0:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80014d2:	2302      	movs	r3, #2
 80014d4:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 80014d6:	2301      	movs	r3, #1
 80014d8:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 80014da:	230a      	movs	r3, #10
 80014dc:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 80014de:	2307      	movs	r3, #7
 80014e0:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80014e2:	2302      	movs	r3, #2
 80014e4:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80014e6:	2302      	movs	r3, #2
 80014e8:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80014ea:	f107 0314 	add.w	r3, r7, #20
 80014ee:	4618      	mov	r0, r3
 80014f0:	f002 ff20 	bl	8004334 <HAL_RCC_OscConfig>
 80014f4:	4603      	mov	r3, r0
 80014f6:	2b00      	cmp	r3, #0
 80014f8:	d001      	beq.n	80014fe <SystemClock_Config+0x72>
  {
    Error_Handler();
 80014fa:	f000 fbf7 	bl	8001cec <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80014fe:	230f      	movs	r3, #15
 8001500:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001502:	2303      	movs	r3, #3
 8001504:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001506:	2300      	movs	r3, #0
 8001508:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800150a:	2300      	movs	r3, #0
 800150c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800150e:	2300      	movs	r3, #0
 8001510:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8001512:	463b      	mov	r3, r7
 8001514:	2104      	movs	r1, #4
 8001516:	4618      	mov	r0, r3
 8001518:	f003 fb20 	bl	8004b5c <HAL_RCC_ClockConfig>
 800151c:	4603      	mov	r3, r0
 800151e:	2b00      	cmp	r3, #0
 8001520:	d001      	beq.n	8001526 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8001522:	f000 fbe3 	bl	8001cec <Error_Handler>
  }
}
 8001526:	bf00      	nop
 8001528:	3758      	adds	r7, #88	; 0x58
 800152a:	46bd      	mov	sp, r7
 800152c:	bd80      	pop	{r7, pc}
	...

08001530 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001530:	b580      	push	{r7, lr}
 8001532:	b086      	sub	sp, #24
 8001534:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001536:	463b      	mov	r3, r7
 8001538:	2200      	movs	r2, #0
 800153a:	601a      	str	r2, [r3, #0]
 800153c:	605a      	str	r2, [r3, #4]
 800153e:	609a      	str	r2, [r3, #8]
 8001540:	60da      	str	r2, [r3, #12]
 8001542:	611a      	str	r2, [r3, #16]
 8001544:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8001546:	4b31      	ldr	r3, [pc, #196]	; (800160c <MX_ADC1_Init+0xdc>)
 8001548:	4a31      	ldr	r2, [pc, #196]	; (8001610 <MX_ADC1_Init+0xe0>)
 800154a:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 800154c:	4b2f      	ldr	r3, [pc, #188]	; (800160c <MX_ADC1_Init+0xdc>)
 800154e:	2200      	movs	r2, #0
 8001550:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001552:	4b2e      	ldr	r3, [pc, #184]	; (800160c <MX_ADC1_Init+0xdc>)
 8001554:	2200      	movs	r2, #0
 8001556:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001558:	4b2c      	ldr	r3, [pc, #176]	; (800160c <MX_ADC1_Init+0xdc>)
 800155a:	2200      	movs	r2, #0
 800155c:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 800155e:	4b2b      	ldr	r3, [pc, #172]	; (800160c <MX_ADC1_Init+0xdc>)
 8001560:	2201      	movs	r2, #1
 8001562:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001564:	4b29      	ldr	r3, [pc, #164]	; (800160c <MX_ADC1_Init+0xdc>)
 8001566:	2204      	movs	r2, #4
 8001568:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 800156a:	4b28      	ldr	r3, [pc, #160]	; (800160c <MX_ADC1_Init+0xdc>)
 800156c:	2200      	movs	r2, #0
 800156e:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8001570:	4b26      	ldr	r3, [pc, #152]	; (800160c <MX_ADC1_Init+0xdc>)
 8001572:	2201      	movs	r2, #1
 8001574:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 2;
 8001576:	4b25      	ldr	r3, [pc, #148]	; (800160c <MX_ADC1_Init+0xdc>)
 8001578:	2202      	movs	r2, #2
 800157a:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800157c:	4b23      	ldr	r3, [pc, #140]	; (800160c <MX_ADC1_Init+0xdc>)
 800157e:	2200      	movs	r2, #0
 8001580:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001584:	4b21      	ldr	r3, [pc, #132]	; (800160c <MX_ADC1_Init+0xdc>)
 8001586:	2200      	movs	r2, #0
 8001588:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800158a:	4b20      	ldr	r3, [pc, #128]	; (800160c <MX_ADC1_Init+0xdc>)
 800158c:	2200      	movs	r2, #0
 800158e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8001590:	4b1e      	ldr	r3, [pc, #120]	; (800160c <MX_ADC1_Init+0xdc>)
 8001592:	2201      	movs	r2, #1
 8001594:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8001598:	4b1c      	ldr	r3, [pc, #112]	; (800160c <MX_ADC1_Init+0xdc>)
 800159a:	2200      	movs	r2, #0
 800159c:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 800159e:	4b1b      	ldr	r3, [pc, #108]	; (800160c <MX_ADC1_Init+0xdc>)
 80015a0:	2200      	movs	r2, #0
 80015a2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc1.Init.DFSDMConfig = ADC_DFSDM_MODE_ENABLE;
 80015a6:	4b19      	ldr	r3, [pc, #100]	; (800160c <MX_ADC1_Init+0xdc>)
 80015a8:	2204      	movs	r2, #4
 80015aa:	64da      	str	r2, [r3, #76]	; 0x4c
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80015ac:	4817      	ldr	r0, [pc, #92]	; (800160c <MX_ADC1_Init+0xdc>)
 80015ae:	f001 f9d1 	bl	8002954 <HAL_ADC_Init>
 80015b2:	4603      	mov	r3, r0
 80015b4:	2b00      	cmp	r3, #0
 80015b6:	d001      	beq.n	80015bc <MX_ADC1_Init+0x8c>
  {
    Error_Handler();
 80015b8:	f000 fb98 	bl	8001cec <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80015bc:	4b15      	ldr	r3, [pc, #84]	; (8001614 <MX_ADC1_Init+0xe4>)
 80015be:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80015c0:	2306      	movs	r3, #6
 80015c2:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 80015c4:	2300      	movs	r3, #0
 80015c6:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80015c8:	237f      	movs	r3, #127	; 0x7f
 80015ca:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80015cc:	2304      	movs	r3, #4
 80015ce:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 80015d0:	2300      	movs	r3, #0
 80015d2:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80015d4:	463b      	mov	r3, r7
 80015d6:	4619      	mov	r1, r3
 80015d8:	480c      	ldr	r0, [pc, #48]	; (800160c <MX_ADC1_Init+0xdc>)
 80015da:	f001 fba9 	bl	8002d30 <HAL_ADC_ConfigChannel>
 80015de:	4603      	mov	r3, r0
 80015e0:	2b00      	cmp	r3, #0
 80015e2:	d001      	beq.n	80015e8 <MX_ADC1_Init+0xb8>
  {
    Error_Handler();
 80015e4:	f000 fb82 	bl	8001cec <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 80015e8:	4b0b      	ldr	r3, [pc, #44]	; (8001618 <MX_ADC1_Init+0xe8>)
 80015ea:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 80015ec:	230c      	movs	r3, #12
 80015ee:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80015f0:	463b      	mov	r3, r7
 80015f2:	4619      	mov	r1, r3
 80015f4:	4805      	ldr	r0, [pc, #20]	; (800160c <MX_ADC1_Init+0xdc>)
 80015f6:	f001 fb9b 	bl	8002d30 <HAL_ADC_ConfigChannel>
 80015fa:	4603      	mov	r3, r0
 80015fc:	2b00      	cmp	r3, #0
 80015fe:	d001      	beq.n	8001604 <MX_ADC1_Init+0xd4>
  {
    Error_Handler();
 8001600:	f000 fb74 	bl	8001cec <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001604:	bf00      	nop
 8001606:	3718      	adds	r7, #24
 8001608:	46bd      	mov	sp, r7
 800160a:	bd80      	pop	{r7, pc}
 800160c:	20000204 	.word	0x20000204
 8001610:	50040000 	.word	0x50040000
 8001614:	04300002 	.word	0x04300002
 8001618:	08600004 	.word	0x08600004

0800161c <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 800161c:	b580      	push	{r7, lr}
 800161e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8001620:	4b1b      	ldr	r3, [pc, #108]	; (8001690 <MX_SPI2_Init+0x74>)
 8001622:	4a1c      	ldr	r2, [pc, #112]	; (8001694 <MX_SPI2_Init+0x78>)
 8001624:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8001626:	4b1a      	ldr	r3, [pc, #104]	; (8001690 <MX_SPI2_Init+0x74>)
 8001628:	f44f 7282 	mov.w	r2, #260	; 0x104
 800162c:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 800162e:	4b18      	ldr	r3, [pc, #96]	; (8001690 <MX_SPI2_Init+0x74>)
 8001630:	2200      	movs	r2, #0
 8001632:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_16BIT;
 8001634:	4b16      	ldr	r3, [pc, #88]	; (8001690 <MX_SPI2_Init+0x74>)
 8001636:	f44f 6270 	mov.w	r2, #3840	; 0xf00
 800163a:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 800163c:	4b14      	ldr	r3, [pc, #80]	; (8001690 <MX_SPI2_Init+0x74>)
 800163e:	2200      	movs	r2, #0
 8001640:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001642:	4b13      	ldr	r3, [pc, #76]	; (8001690 <MX_SPI2_Init+0x74>)
 8001644:	2200      	movs	r2, #0
 8001646:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8001648:	4b11      	ldr	r3, [pc, #68]	; (8001690 <MX_SPI2_Init+0x74>)
 800164a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800164e:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001650:	4b0f      	ldr	r3, [pc, #60]	; (8001690 <MX_SPI2_Init+0x74>)
 8001652:	2200      	movs	r2, #0
 8001654:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001656:	4b0e      	ldr	r3, [pc, #56]	; (8001690 <MX_SPI2_Init+0x74>)
 8001658:	2200      	movs	r2, #0
 800165a:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 800165c:	4b0c      	ldr	r3, [pc, #48]	; (8001690 <MX_SPI2_Init+0x74>)
 800165e:	2200      	movs	r2, #0
 8001660:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001662:	4b0b      	ldr	r3, [pc, #44]	; (8001690 <MX_SPI2_Init+0x74>)
 8001664:	2200      	movs	r2, #0
 8001666:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 8001668:	4b09      	ldr	r3, [pc, #36]	; (8001690 <MX_SPI2_Init+0x74>)
 800166a:	2207      	movs	r2, #7
 800166c:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800166e:	4b08      	ldr	r3, [pc, #32]	; (8001690 <MX_SPI2_Init+0x74>)
 8001670:	2200      	movs	r2, #0
 8001672:	631a      	str	r2, [r3, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001674:	4b06      	ldr	r3, [pc, #24]	; (8001690 <MX_SPI2_Init+0x74>)
 8001676:	2208      	movs	r2, #8
 8001678:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 800167a:	4805      	ldr	r0, [pc, #20]	; (8001690 <MX_SPI2_Init+0x74>)
 800167c:	f003 fff0 	bl	8005660 <HAL_SPI_Init>
 8001680:	4603      	mov	r3, r0
 8001682:	2b00      	cmp	r3, #0
 8001684:	d001      	beq.n	800168a <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 8001686:	f000 fb31 	bl	8001cec <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 800168a:	bf00      	nop
 800168c:	bd80      	pop	{r7, pc}
 800168e:	bf00      	nop
 8001690:	200002b4 	.word	0x200002b4
 8001694:	40003800 	.word	0x40003800

08001698 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001698:	b580      	push	{r7, lr}
 800169a:	b09a      	sub	sp, #104	; 0x68
 800169c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800169e:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80016a2:	2200      	movs	r2, #0
 80016a4:	601a      	str	r2, [r3, #0]
 80016a6:	605a      	str	r2, [r3, #4]
 80016a8:	609a      	str	r2, [r3, #8]
 80016aa:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80016ac:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80016b0:	2200      	movs	r2, #0
 80016b2:	601a      	str	r2, [r3, #0]
 80016b4:	605a      	str	r2, [r3, #4]
 80016b6:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80016b8:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80016bc:	2200      	movs	r2, #0
 80016be:	601a      	str	r2, [r3, #0]
 80016c0:	605a      	str	r2, [r3, #4]
 80016c2:	609a      	str	r2, [r3, #8]
 80016c4:	60da      	str	r2, [r3, #12]
 80016c6:	611a      	str	r2, [r3, #16]
 80016c8:	615a      	str	r2, [r3, #20]
 80016ca:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80016cc:	1d3b      	adds	r3, r7, #4
 80016ce:	222c      	movs	r2, #44	; 0x2c
 80016d0:	2100      	movs	r1, #0
 80016d2:	4618      	mov	r0, r3
 80016d4:	f006 fb52 	bl	8007d7c <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80016d8:	4b43      	ldr	r3, [pc, #268]	; (80017e8 <MX_TIM1_Init+0x150>)
 80016da:	4a44      	ldr	r2, [pc, #272]	; (80017ec <MX_TIM1_Init+0x154>)
 80016dc:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 80016de:	4b42      	ldr	r3, [pc, #264]	; (80017e8 <MX_TIM1_Init+0x150>)
 80016e0:	2200      	movs	r2, #0
 80016e2:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80016e4:	4b40      	ldr	r3, [pc, #256]	; (80017e8 <MX_TIM1_Init+0x150>)
 80016e6:	2200      	movs	r2, #0
 80016e8:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 80016ea:	4b3f      	ldr	r3, [pc, #252]	; (80017e8 <MX_TIM1_Init+0x150>)
 80016ec:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80016f0:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80016f2:	4b3d      	ldr	r3, [pc, #244]	; (80017e8 <MX_TIM1_Init+0x150>)
 80016f4:	2200      	movs	r2, #0
 80016f6:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80016f8:	4b3b      	ldr	r3, [pc, #236]	; (80017e8 <MX_TIM1_Init+0x150>)
 80016fa:	2200      	movs	r2, #0
 80016fc:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80016fe:	4b3a      	ldr	r3, [pc, #232]	; (80017e8 <MX_TIM1_Init+0x150>)
 8001700:	2200      	movs	r2, #0
 8001702:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001704:	4838      	ldr	r0, [pc, #224]	; (80017e8 <MX_TIM1_Init+0x150>)
 8001706:	f004 f84e 	bl	80057a6 <HAL_TIM_Base_Init>
 800170a:	4603      	mov	r3, r0
 800170c:	2b00      	cmp	r3, #0
 800170e:	d001      	beq.n	8001714 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 8001710:	f000 faec 	bl	8001cec <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001714:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001718:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800171a:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800171e:	4619      	mov	r1, r3
 8001720:	4831      	ldr	r0, [pc, #196]	; (80017e8 <MX_TIM1_Init+0x150>)
 8001722:	f004 fda7 	bl	8006274 <HAL_TIM_ConfigClockSource>
 8001726:	4603      	mov	r3, r0
 8001728:	2b00      	cmp	r3, #0
 800172a:	d001      	beq.n	8001730 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 800172c:	f000 fade 	bl	8001cec <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001730:	482d      	ldr	r0, [pc, #180]	; (80017e8 <MX_TIM1_Init+0x150>)
 8001732:	f004 f88f 	bl	8005854 <HAL_TIM_PWM_Init>
 8001736:	4603      	mov	r3, r0
 8001738:	2b00      	cmp	r3, #0
 800173a:	d001      	beq.n	8001740 <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 800173c:	f000 fad6 	bl	8001cec <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8001740:	2320      	movs	r3, #32
 8001742:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001744:	2300      	movs	r3, #0
 8001746:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001748:	2300      	movs	r3, #0
 800174a:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800174c:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001750:	4619      	mov	r1, r3
 8001752:	4825      	ldr	r0, [pc, #148]	; (80017e8 <MX_TIM1_Init+0x150>)
 8001754:	f005 fcea 	bl	800712c <HAL_TIMEx_MasterConfigSynchronization>
 8001758:	4603      	mov	r3, r0
 800175a:	2b00      	cmp	r3, #0
 800175c:	d001      	beq.n	8001762 <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 800175e:	f000 fac5 	bl	8001cec <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001762:	2360      	movs	r3, #96	; 0x60
 8001764:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 0;
 8001766:	2300      	movs	r3, #0
 8001768:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800176a:	2300      	movs	r3, #0
 800176c:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800176e:	2300      	movs	r3, #0
 8001770:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001772:	2300      	movs	r3, #0
 8001774:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001776:	2300      	movs	r3, #0
 8001778:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800177a:	2300      	movs	r3, #0
 800177c:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800177e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001782:	2204      	movs	r2, #4
 8001784:	4619      	mov	r1, r3
 8001786:	4818      	ldr	r0, [pc, #96]	; (80017e8 <MX_TIM1_Init+0x150>)
 8001788:	f004 fc60 	bl	800604c <HAL_TIM_PWM_ConfigChannel>
 800178c:	4603      	mov	r3, r0
 800178e:	2b00      	cmp	r3, #0
 8001790:	d001      	beq.n	8001796 <MX_TIM1_Init+0xfe>
  {
    Error_Handler();
 8001792:	f000 faab 	bl	8001cec <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001796:	2300      	movs	r3, #0
 8001798:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800179a:	2300      	movs	r3, #0
 800179c:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800179e:	2300      	movs	r3, #0
 80017a0:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80017a2:	2300      	movs	r3, #0
 80017a4:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80017a6:	2300      	movs	r3, #0
 80017a8:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80017aa:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80017ae:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80017b0:	2300      	movs	r3, #0
 80017b2:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 80017b4:	2300      	movs	r3, #0
 80017b6:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 80017b8:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80017bc:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 80017be:	2300      	movs	r3, #0
 80017c0:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80017c2:	2300      	movs	r3, #0
 80017c4:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80017c6:	1d3b      	adds	r3, r7, #4
 80017c8:	4619      	mov	r1, r3
 80017ca:	4807      	ldr	r0, [pc, #28]	; (80017e8 <MX_TIM1_Init+0x150>)
 80017cc:	f005 fd1c 	bl	8007208 <HAL_TIMEx_ConfigBreakDeadTime>
 80017d0:	4603      	mov	r3, r0
 80017d2:	2b00      	cmp	r3, #0
 80017d4:	d001      	beq.n	80017da <MX_TIM1_Init+0x142>
  {
    Error_Handler();
 80017d6:	f000 fa89 	bl	8001cec <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80017da:	4803      	ldr	r0, [pc, #12]	; (80017e8 <MX_TIM1_Init+0x150>)
 80017dc:	f000 fc44 	bl	8002068 <HAL_TIM_MspPostInit>

}
 80017e0:	bf00      	nop
 80017e2:	3768      	adds	r7, #104	; 0x68
 80017e4:	46bd      	mov	sp, r7
 80017e6:	bd80      	pop	{r7, pc}
 80017e8:	20000318 	.word	0x20000318
 80017ec:	40012c00 	.word	0x40012c00

080017f0 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80017f0:	b580      	push	{r7, lr}
 80017f2:	b090      	sub	sp, #64	; 0x40
 80017f4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80017f6:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80017fa:	2200      	movs	r2, #0
 80017fc:	601a      	str	r2, [r3, #0]
 80017fe:	605a      	str	r2, [r3, #4]
 8001800:	609a      	str	r2, [r3, #8]
 8001802:	60da      	str	r2, [r3, #12]
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8001804:	f107 031c 	add.w	r3, r7, #28
 8001808:	2200      	movs	r2, #0
 800180a:	601a      	str	r2, [r3, #0]
 800180c:	605a      	str	r2, [r3, #4]
 800180e:	609a      	str	r2, [r3, #8]
 8001810:	60da      	str	r2, [r3, #12]
 8001812:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001814:	f107 0310 	add.w	r3, r7, #16
 8001818:	2200      	movs	r2, #0
 800181a:	601a      	str	r2, [r3, #0]
 800181c:	605a      	str	r2, [r3, #4]
 800181e:	609a      	str	r2, [r3, #8]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8001820:	463b      	mov	r3, r7
 8001822:	2200      	movs	r2, #0
 8001824:	601a      	str	r2, [r3, #0]
 8001826:	605a      	str	r2, [r3, #4]
 8001828:	609a      	str	r2, [r3, #8]
 800182a:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800182c:	4b3a      	ldr	r3, [pc, #232]	; (8001918 <MX_TIM2_Init+0x128>)
 800182e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001832:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8001834:	4b38      	ldr	r3, [pc, #224]	; (8001918 <MX_TIM2_Init+0x128>)
 8001836:	2200      	movs	r2, #0
 8001838:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800183a:	4b37      	ldr	r3, [pc, #220]	; (8001918 <MX_TIM2_Init+0x128>)
 800183c:	2200      	movs	r2, #0
 800183e:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8001840:	4b35      	ldr	r3, [pc, #212]	; (8001918 <MX_TIM2_Init+0x128>)
 8001842:	f04f 32ff 	mov.w	r2, #4294967295
 8001846:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001848:	4b33      	ldr	r3, [pc, #204]	; (8001918 <MX_TIM2_Init+0x128>)
 800184a:	2200      	movs	r2, #0
 800184c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800184e:	4b32      	ldr	r3, [pc, #200]	; (8001918 <MX_TIM2_Init+0x128>)
 8001850:	2200      	movs	r2, #0
 8001852:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001854:	4830      	ldr	r0, [pc, #192]	; (8001918 <MX_TIM2_Init+0x128>)
 8001856:	f003 ffa6 	bl	80057a6 <HAL_TIM_Base_Init>
 800185a:	4603      	mov	r3, r0
 800185c:	2b00      	cmp	r3, #0
 800185e:	d001      	beq.n	8001864 <MX_TIM2_Init+0x74>
  {
    Error_Handler();
 8001860:	f000 fa44 	bl	8001cec <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001864:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001868:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800186a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800186e:	4619      	mov	r1, r3
 8001870:	4829      	ldr	r0, [pc, #164]	; (8001918 <MX_TIM2_Init+0x128>)
 8001872:	f004 fcff 	bl	8006274 <HAL_TIM_ConfigClockSource>
 8001876:	4603      	mov	r3, r0
 8001878:	2b00      	cmp	r3, #0
 800187a:	d001      	beq.n	8001880 <MX_TIM2_Init+0x90>
  {
    Error_Handler();
 800187c:	f000 fa36 	bl	8001cec <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim2) != HAL_OK)
 8001880:	4825      	ldr	r0, [pc, #148]	; (8001918 <MX_TIM2_Init+0x128>)
 8001882:	f004 f92f 	bl	8005ae4 <HAL_TIM_IC_Init>
 8001886:	4603      	mov	r3, r0
 8001888:	2b00      	cmp	r3, #0
 800188a:	d001      	beq.n	8001890 <MX_TIM2_Init+0xa0>
  {
    Error_Handler();
 800188c:	f000 fa2e 	bl	8001cec <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_RESET;
 8001890:	2304      	movs	r3, #4
 8001892:	61fb      	str	r3, [r7, #28]
  sSlaveConfig.InputTrigger = TIM_TS_ITR0;
 8001894:	2300      	movs	r3, #0
 8001896:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_SlaveConfigSynchro(&htim2, &sSlaveConfig) != HAL_OK)
 8001898:	f107 031c 	add.w	r3, r7, #28
 800189c:	4619      	mov	r1, r3
 800189e:	481e      	ldr	r0, [pc, #120]	; (8001918 <MX_TIM2_Init+0x128>)
 80018a0:	f004 fdb1 	bl	8006406 <HAL_TIM_SlaveConfigSynchro>
 80018a4:	4603      	mov	r3, r0
 80018a6:	2b00      	cmp	r3, #0
 80018a8:	d001      	beq.n	80018ae <MX_TIM2_Init+0xbe>
  {
    Error_Handler();
 80018aa:	f000 fa1f 	bl	8001cec <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80018ae:	2300      	movs	r3, #0
 80018b0:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80018b2:	2300      	movs	r3, #0
 80018b4:	61bb      	str	r3, [r7, #24]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80018b6:	f107 0310 	add.w	r3, r7, #16
 80018ba:	4619      	mov	r1, r3
 80018bc:	4816      	ldr	r0, [pc, #88]	; (8001918 <MX_TIM2_Init+0x128>)
 80018be:	f005 fc35 	bl	800712c <HAL_TIMEx_MasterConfigSynchronization>
 80018c2:	4603      	mov	r3, r0
 80018c4:	2b00      	cmp	r3, #0
 80018c6:	d001      	beq.n	80018cc <MX_TIM2_Init+0xdc>
  {
    Error_Handler();
 80018c8:	f000 fa10 	bl	8001cec <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 80018cc:	2300      	movs	r3, #0
 80018ce:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 80018d0:	2301      	movs	r3, #1
 80018d2:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 80018d4:	2300      	movs	r3, #0
 80018d6:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 80018d8:	2300      	movs	r3, #0
 80018da:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 80018dc:	463b      	mov	r3, r7
 80018de:	2200      	movs	r2, #0
 80018e0:	4619      	mov	r1, r3
 80018e2:	480d      	ldr	r0, [pc, #52]	; (8001918 <MX_TIM2_Init+0x128>)
 80018e4:	f004 fb16 	bl	8005f14 <HAL_TIM_IC_ConfigChannel>
 80018e8:	4603      	mov	r3, r0
 80018ea:	2b00      	cmp	r3, #0
 80018ec:	d001      	beq.n	80018f2 <MX_TIM2_Init+0x102>
  {
    Error_Handler();
 80018ee:	f000 f9fd 	bl	8001cec <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 80018f2:	2302      	movs	r3, #2
 80018f4:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_INDIRECTTI;
 80018f6:	2302      	movs	r3, #2
 80018f8:	607b      	str	r3, [r7, #4]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 80018fa:	463b      	mov	r3, r7
 80018fc:	2204      	movs	r2, #4
 80018fe:	4619      	mov	r1, r3
 8001900:	4805      	ldr	r0, [pc, #20]	; (8001918 <MX_TIM2_Init+0x128>)
 8001902:	f004 fb07 	bl	8005f14 <HAL_TIM_IC_ConfigChannel>
 8001906:	4603      	mov	r3, r0
 8001908:	2b00      	cmp	r3, #0
 800190a:	d001      	beq.n	8001910 <MX_TIM2_Init+0x120>
  {
    Error_Handler();
 800190c:	f000 f9ee 	bl	8001cec <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001910:	bf00      	nop
 8001912:	3740      	adds	r7, #64	; 0x40
 8001914:	46bd      	mov	sp, r7
 8001916:	bd80      	pop	{r7, pc}
 8001918:	20000364 	.word	0x20000364

0800191c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800191c:	b580      	push	{r7, lr}
 800191e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001920:	4b14      	ldr	r3, [pc, #80]	; (8001974 <MX_USART2_UART_Init+0x58>)
 8001922:	4a15      	ldr	r2, [pc, #84]	; (8001978 <MX_USART2_UART_Init+0x5c>)
 8001924:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001926:	4b13      	ldr	r3, [pc, #76]	; (8001974 <MX_USART2_UART_Init+0x58>)
 8001928:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800192c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800192e:	4b11      	ldr	r3, [pc, #68]	; (8001974 <MX_USART2_UART_Init+0x58>)
 8001930:	2200      	movs	r2, #0
 8001932:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001934:	4b0f      	ldr	r3, [pc, #60]	; (8001974 <MX_USART2_UART_Init+0x58>)
 8001936:	2200      	movs	r2, #0
 8001938:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800193a:	4b0e      	ldr	r3, [pc, #56]	; (8001974 <MX_USART2_UART_Init+0x58>)
 800193c:	2200      	movs	r2, #0
 800193e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001940:	4b0c      	ldr	r3, [pc, #48]	; (8001974 <MX_USART2_UART_Init+0x58>)
 8001942:	220c      	movs	r2, #12
 8001944:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001946:	4b0b      	ldr	r3, [pc, #44]	; (8001974 <MX_USART2_UART_Init+0x58>)
 8001948:	2200      	movs	r2, #0
 800194a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800194c:	4b09      	ldr	r3, [pc, #36]	; (8001974 <MX_USART2_UART_Init+0x58>)
 800194e:	2200      	movs	r2, #0
 8001950:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001952:	4b08      	ldr	r3, [pc, #32]	; (8001974 <MX_USART2_UART_Init+0x58>)
 8001954:	2200      	movs	r2, #0
 8001956:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001958:	4b06      	ldr	r3, [pc, #24]	; (8001974 <MX_USART2_UART_Init+0x58>)
 800195a:	2200      	movs	r2, #0
 800195c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800195e:	4805      	ldr	r0, [pc, #20]	; (8001974 <MX_USART2_UART_Init+0x58>)
 8001960:	f005 fcca 	bl	80072f8 <HAL_UART_Init>
 8001964:	4603      	mov	r3, r0
 8001966:	2b00      	cmp	r3, #0
 8001968:	d001      	beq.n	800196e <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 800196a:	f000 f9bf 	bl	8001cec <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800196e:	bf00      	nop
 8001970:	bd80      	pop	{r7, pc}
 8001972:	bf00      	nop
 8001974:	20000440 	.word	0x20000440
 8001978:	40004400 	.word	0x40004400

0800197c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 800197c:	b580      	push	{r7, lr}
 800197e:	b082      	sub	sp, #8
 8001980:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001982:	4b14      	ldr	r3, [pc, #80]	; (80019d4 <MX_DMA_Init+0x58>)
 8001984:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001986:	4a13      	ldr	r2, [pc, #76]	; (80019d4 <MX_DMA_Init+0x58>)
 8001988:	f043 0301 	orr.w	r3, r3, #1
 800198c:	6493      	str	r3, [r2, #72]	; 0x48
 800198e:	4b11      	ldr	r3, [pc, #68]	; (80019d4 <MX_DMA_Init+0x58>)
 8001990:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001992:	f003 0301 	and.w	r3, r3, #1
 8001996:	607b      	str	r3, [r7, #4]
 8001998:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 800199a:	2200      	movs	r2, #0
 800199c:	2100      	movs	r1, #0
 800199e:	200b      	movs	r0, #11
 80019a0:	f002 f8a3 	bl	8003aea <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80019a4:	200b      	movs	r0, #11
 80019a6:	f002 f8bc 	bl	8003b22 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 0, 0);
 80019aa:	2200      	movs	r2, #0
 80019ac:	2100      	movs	r1, #0
 80019ae:	200f      	movs	r0, #15
 80019b0:	f002 f89b 	bl	8003aea <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 80019b4:	200f      	movs	r0, #15
 80019b6:	f002 f8b4 	bl	8003b22 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel7_IRQn, 0, 0);
 80019ba:	2200      	movs	r2, #0
 80019bc:	2100      	movs	r1, #0
 80019be:	2011      	movs	r0, #17
 80019c0:	f002 f893 	bl	8003aea <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel7_IRQn);
 80019c4:	2011      	movs	r0, #17
 80019c6:	f002 f8ac 	bl	8003b22 <HAL_NVIC_EnableIRQ>

}
 80019ca:	bf00      	nop
 80019cc:	3708      	adds	r7, #8
 80019ce:	46bd      	mov	sp, r7
 80019d0:	bd80      	pop	{r7, pc}
 80019d2:	bf00      	nop
 80019d4:	40021000 	.word	0x40021000

080019d8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80019d8:	b580      	push	{r7, lr}
 80019da:	b088      	sub	sp, #32
 80019dc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019de:	f107 030c 	add.w	r3, r7, #12
 80019e2:	2200      	movs	r2, #0
 80019e4:	601a      	str	r2, [r3, #0]
 80019e6:	605a      	str	r2, [r3, #4]
 80019e8:	609a      	str	r2, [r3, #8]
 80019ea:	60da      	str	r2, [r3, #12]
 80019ec:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80019ee:	4b50      	ldr	r3, [pc, #320]	; (8001b30 <MX_GPIO_Init+0x158>)
 80019f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80019f2:	4a4f      	ldr	r2, [pc, #316]	; (8001b30 <MX_GPIO_Init+0x158>)
 80019f4:	f043 0304 	orr.w	r3, r3, #4
 80019f8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80019fa:	4b4d      	ldr	r3, [pc, #308]	; (8001b30 <MX_GPIO_Init+0x158>)
 80019fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80019fe:	f003 0304 	and.w	r3, r3, #4
 8001a02:	60bb      	str	r3, [r7, #8]
 8001a04:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a06:	4b4a      	ldr	r3, [pc, #296]	; (8001b30 <MX_GPIO_Init+0x158>)
 8001a08:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a0a:	4a49      	ldr	r2, [pc, #292]	; (8001b30 <MX_GPIO_Init+0x158>)
 8001a0c:	f043 0301 	orr.w	r3, r3, #1
 8001a10:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001a12:	4b47      	ldr	r3, [pc, #284]	; (8001b30 <MX_GPIO_Init+0x158>)
 8001a14:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a16:	f003 0301 	and.w	r3, r3, #1
 8001a1a:	607b      	str	r3, [r7, #4]
 8001a1c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a1e:	4b44      	ldr	r3, [pc, #272]	; (8001b30 <MX_GPIO_Init+0x158>)
 8001a20:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a22:	4a43      	ldr	r2, [pc, #268]	; (8001b30 <MX_GPIO_Init+0x158>)
 8001a24:	f043 0302 	orr.w	r3, r3, #2
 8001a28:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001a2a:	4b41      	ldr	r3, [pc, #260]	; (8001b30 <MX_GPIO_Init+0x158>)
 8001a2c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a2e:	f003 0302 	and.w	r3, r3, #2
 8001a32:	603b      	str	r3, [r7, #0]
 8001a34:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, COMP_CLK_Pin|COUNTER_ENABLE_Pin|BY_PASS__SEL_Pin|BG_PD_Pin
 8001a36:	2200      	movs	r2, #0
 8001a38:	f44f 419e 	mov.w	r1, #20224	; 0x4f00
 8001a3c:	483d      	ldr	r0, [pc, #244]	; (8001b34 <MX_GPIO_Init+0x15c>)
 8001a3e:	f002 fbfd 	bl	800423c <HAL_GPIO_WritePin>
                          |REF_SEL_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, SMPS_EN_Pin|SMPS_V1_Pin|SMPS_SW_Pin|GPIO_PIN_8
 8001a42:	2200      	movs	r2, #0
 8001a44:	f44f 611b 	mov.w	r1, #2480	; 0x9b0
 8001a48:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001a4c:	f002 fbf6 	bl	800423c <HAL_GPIO_WritePin>
                          |GPIO_PIN_11, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(COUNTER_SET_N_GPIO_Port, COUNTER_SET_N_Pin, GPIO_PIN_RESET);
 8001a50:	2200      	movs	r2, #0
 8001a52:	2180      	movs	r1, #128	; 0x80
 8001a54:	4838      	ldr	r0, [pc, #224]	; (8001b38 <MX_GPIO_Init+0x160>)
 8001a56:	f002 fbf1 	bl	800423c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : COMP_OUT_Pin */
  GPIO_InitStruct.Pin = COMP_OUT_Pin;
 8001a5a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001a5e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001a60:	2300      	movs	r3, #0
 8001a62:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001a64:	2302      	movs	r3, #2
 8001a66:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(COMP_OUT_GPIO_Port, &GPIO_InitStruct);
 8001a68:	f107 030c 	add.w	r3, r7, #12
 8001a6c:	4619      	mov	r1, r3
 8001a6e:	4831      	ldr	r0, [pc, #196]	; (8001b34 <MX_GPIO_Init+0x15c>)
 8001a70:	f002 fa6a 	bl	8003f48 <HAL_GPIO_Init>

  /*Configure GPIO pins : COMP_CLK_Pin BY_PASS__SEL_Pin REF_SEL_Pin */
  GPIO_InitStruct.Pin = COMP_CLK_Pin|BY_PASS__SEL_Pin|REF_SEL_Pin;
 8001a74:	f44f 4394 	mov.w	r3, #18944	; 0x4a00
 8001a78:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a7a:	2301      	movs	r3, #1
 8001a7c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001a7e:	2302      	movs	r3, #2
 8001a80:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a82:	2300      	movs	r3, #0
 8001a84:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001a86:	f107 030c 	add.w	r3, r7, #12
 8001a8a:	4619      	mov	r1, r3
 8001a8c:	4829      	ldr	r0, [pc, #164]	; (8001b34 <MX_GPIO_Init+0x15c>)
 8001a8e:	f002 fa5b 	bl	8003f48 <HAL_GPIO_Init>

  /*Configure GPIO pins : SMPS_EN_Pin SMPS_V1_Pin SMPS_SW_Pin PA8 */
  GPIO_InitStruct.Pin = SMPS_EN_Pin|SMPS_V1_Pin|SMPS_SW_Pin|GPIO_PIN_8;
 8001a92:	f44f 73d8 	mov.w	r3, #432	; 0x1b0
 8001a96:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a98:	2301      	movs	r3, #1
 8001a9a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a9c:	2300      	movs	r3, #0
 8001a9e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001aa0:	2300      	movs	r3, #0
 8001aa2:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001aa4:	f107 030c 	add.w	r3, r7, #12
 8001aa8:	4619      	mov	r1, r3
 8001aaa:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001aae:	f002 fa4b 	bl	8003f48 <HAL_GPIO_Init>

  /*Configure GPIO pin : SMPS_PG_Pin */
  GPIO_InitStruct.Pin = SMPS_PG_Pin;
 8001ab2:	2340      	movs	r3, #64	; 0x40
 8001ab4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001ab6:	2300      	movs	r3, #0
 8001ab8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001aba:	2301      	movs	r3, #1
 8001abc:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(SMPS_PG_GPIO_Port, &GPIO_InitStruct);
 8001abe:	f107 030c 	add.w	r3, r7, #12
 8001ac2:	4619      	mov	r1, r3
 8001ac4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001ac8:	f002 fa3e 	bl	8003f48 <HAL_GPIO_Init>

  /*Configure GPIO pins : COUNTER_ENABLE_Pin BG_PD_Pin */
  GPIO_InitStruct.Pin = COUNTER_ENABLE_Pin|BG_PD_Pin;
 8001acc:	f44f 63a0 	mov.w	r3, #1280	; 0x500
 8001ad0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001ad2:	2301      	movs	r3, #1
 8001ad4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001ad6:	2301      	movs	r3, #1
 8001ad8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ada:	2300      	movs	r3, #0
 8001adc:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001ade:	f107 030c 	add.w	r3, r7, #12
 8001ae2:	4619      	mov	r1, r3
 8001ae4:	4813      	ldr	r0, [pc, #76]	; (8001b34 <MX_GPIO_Init+0x15c>)
 8001ae6:	f002 fa2f 	bl	8003f48 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA11 */
  GPIO_InitStruct.Pin = GPIO_PIN_11;
 8001aea:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001aee:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001af0:	2301      	movs	r3, #1
 8001af2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001af4:	2302      	movs	r3, #2
 8001af6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001af8:	2300      	movs	r3, #0
 8001afa:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001afc:	f107 030c 	add.w	r3, r7, #12
 8001b00:	4619      	mov	r1, r3
 8001b02:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001b06:	f002 fa1f 	bl	8003f48 <HAL_GPIO_Init>

  /*Configure GPIO pin : COUNTER_SET_N_Pin */
  GPIO_InitStruct.Pin = COUNTER_SET_N_Pin;
 8001b0a:	2380      	movs	r3, #128	; 0x80
 8001b0c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b0e:	2301      	movs	r3, #1
 8001b10:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001b12:	2302      	movs	r3, #2
 8001b14:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b16:	2300      	movs	r3, #0
 8001b18:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(COUNTER_SET_N_GPIO_Port, &GPIO_InitStruct);
 8001b1a:	f107 030c 	add.w	r3, r7, #12
 8001b1e:	4619      	mov	r1, r3
 8001b20:	4805      	ldr	r0, [pc, #20]	; (8001b38 <MX_GPIO_Init+0x160>)
 8001b22:	f002 fa11 	bl	8003f48 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001b26:	bf00      	nop
 8001b28:	3720      	adds	r7, #32
 8001b2a:	46bd      	mov	sp, r7
 8001b2c:	bd80      	pop	{r7, pc}
 8001b2e:	bf00      	nop
 8001b30:	40021000 	.word	0x40021000
 8001b34:	48000800 	.word	0x48000800
 8001b38:	48000400 	.word	0x48000400

08001b3c <medianFilter>:

/* USER CODE BEGIN 4 */
float medianFilter(float data[], int size) {
 8001b3c:	e92d 03b0 	stmdb	sp!, {r4, r5, r7, r8, r9}
 8001b40:	b08b      	sub	sp, #44	; 0x2c
 8001b42:	af00      	add	r7, sp, #0
 8001b44:	6078      	str	r0, [r7, #4]
 8001b46:	6039      	str	r1, [r7, #0]
 8001b48:	466b      	mov	r3, sp
 8001b4a:	4618      	mov	r0, r3
    int compare_result[size];
 8001b4c:	6839      	ldr	r1, [r7, #0]
 8001b4e:	1e4b      	subs	r3, r1, #1
 8001b50:	613b      	str	r3, [r7, #16]
 8001b52:	460a      	mov	r2, r1
 8001b54:	2300      	movs	r3, #0
 8001b56:	4690      	mov	r8, r2
 8001b58:	4699      	mov	r9, r3
 8001b5a:	f04f 0200 	mov.w	r2, #0
 8001b5e:	f04f 0300 	mov.w	r3, #0
 8001b62:	ea4f 1349 	mov.w	r3, r9, lsl #5
 8001b66:	ea43 63d8 	orr.w	r3, r3, r8, lsr #27
 8001b6a:	ea4f 1248 	mov.w	r2, r8, lsl #5
 8001b6e:	460a      	mov	r2, r1
 8001b70:	2300      	movs	r3, #0
 8001b72:	4614      	mov	r4, r2
 8001b74:	461d      	mov	r5, r3
 8001b76:	f04f 0200 	mov.w	r2, #0
 8001b7a:	f04f 0300 	mov.w	r3, #0
 8001b7e:	016b      	lsls	r3, r5, #5
 8001b80:	ea43 63d4 	orr.w	r3, r3, r4, lsr #27
 8001b84:	0162      	lsls	r2, r4, #5
 8001b86:	460b      	mov	r3, r1
 8001b88:	009b      	lsls	r3, r3, #2
 8001b8a:	3307      	adds	r3, #7
 8001b8c:	08db      	lsrs	r3, r3, #3
 8001b8e:	00db      	lsls	r3, r3, #3
 8001b90:	ebad 0d03 	sub.w	sp, sp, r3
 8001b94:	466b      	mov	r3, sp
 8001b96:	3303      	adds	r3, #3
 8001b98:	089b      	lsrs	r3, r3, #2
 8001b9a:	009b      	lsls	r3, r3, #2
 8001b9c:	60fb      	str	r3, [r7, #12]
    float result = 0;
 8001b9e:	f04f 0300 	mov.w	r3, #0
 8001ba2:	61bb      	str	r3, [r7, #24]
    for(int i=0; i<size; i++){
 8001ba4:	2300      	movs	r3, #0
 8001ba6:	61fb      	str	r3, [r7, #28]
 8001ba8:	e007      	b.n	8001bba <medianFilter+0x7e>
    	compare_result[i] = 0;
 8001baa:	68fb      	ldr	r3, [r7, #12]
 8001bac:	69fa      	ldr	r2, [r7, #28]
 8001bae:	2100      	movs	r1, #0
 8001bb0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    for(int i=0; i<size; i++){
 8001bb4:	69fb      	ldr	r3, [r7, #28]
 8001bb6:	3301      	adds	r3, #1
 8001bb8:	61fb      	str	r3, [r7, #28]
 8001bba:	69fa      	ldr	r2, [r7, #28]
 8001bbc:	683b      	ldr	r3, [r7, #0]
 8001bbe:	429a      	cmp	r2, r3
 8001bc0:	dbf3      	blt.n	8001baa <medianFilter+0x6e>
    }
    for (int i = 0; i < size; i++) {
 8001bc2:	2300      	movs	r3, #0
 8001bc4:	623b      	str	r3, [r7, #32]
 8001bc6:	e031      	b.n	8001c2c <medianFilter+0xf0>
    	for(int j=i+1; j<size; j++){
 8001bc8:	6a3b      	ldr	r3, [r7, #32]
 8001bca:	3301      	adds	r3, #1
 8001bcc:	627b      	str	r3, [r7, #36]	; 0x24
 8001bce:	e026      	b.n	8001c1e <medianFilter+0xe2>
    		if(data[i]>data[j])compare_result[i] += 1;
 8001bd0:	6a3b      	ldr	r3, [r7, #32]
 8001bd2:	009b      	lsls	r3, r3, #2
 8001bd4:	687a      	ldr	r2, [r7, #4]
 8001bd6:	4413      	add	r3, r2
 8001bd8:	ed93 7a00 	vldr	s14, [r3]
 8001bdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bde:	009b      	lsls	r3, r3, #2
 8001be0:	687a      	ldr	r2, [r7, #4]
 8001be2:	4413      	add	r3, r2
 8001be4:	edd3 7a00 	vldr	s15, [r3]
 8001be8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001bec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001bf0:	dd09      	ble.n	8001c06 <medianFilter+0xca>
 8001bf2:	68fb      	ldr	r3, [r7, #12]
 8001bf4:	6a3a      	ldr	r2, [r7, #32]
 8001bf6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001bfa:	1c59      	adds	r1, r3, #1
 8001bfc:	68fb      	ldr	r3, [r7, #12]
 8001bfe:	6a3a      	ldr	r2, [r7, #32]
 8001c00:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8001c04:	e008      	b.n	8001c18 <medianFilter+0xdc>
    		else compare_result[j] += 1;
 8001c06:	68fb      	ldr	r3, [r7, #12]
 8001c08:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001c0a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001c0e:	1c59      	adds	r1, r3, #1
 8001c10:	68fb      	ldr	r3, [r7, #12]
 8001c12:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001c14:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    	for(int j=i+1; j<size; j++){
 8001c18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c1a:	3301      	adds	r3, #1
 8001c1c:	627b      	str	r3, [r7, #36]	; 0x24
 8001c1e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001c20:	683b      	ldr	r3, [r7, #0]
 8001c22:	429a      	cmp	r2, r3
 8001c24:	dbd4      	blt.n	8001bd0 <medianFilter+0x94>
    for (int i = 0; i < size; i++) {
 8001c26:	6a3b      	ldr	r3, [r7, #32]
 8001c28:	3301      	adds	r3, #1
 8001c2a:	623b      	str	r3, [r7, #32]
 8001c2c:	6a3a      	ldr	r2, [r7, #32]
 8001c2e:	683b      	ldr	r3, [r7, #0]
 8001c30:	429a      	cmp	r2, r3
 8001c32:	dbc9      	blt.n	8001bc8 <medianFilter+0x8c>
    	}
    }
    for(int i=0; i<size; i++){
 8001c34:	2300      	movs	r3, #0
 8001c36:	617b      	str	r3, [r7, #20]
 8001c38:	e012      	b.n	8001c60 <medianFilter+0x124>
    	if(compare_result[i]== (size/2)) result = data[i];
 8001c3a:	68fb      	ldr	r3, [r7, #12]
 8001c3c:	697a      	ldr	r2, [r7, #20]
 8001c3e:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8001c42:	683b      	ldr	r3, [r7, #0]
 8001c44:	0fd9      	lsrs	r1, r3, #31
 8001c46:	440b      	add	r3, r1
 8001c48:	105b      	asrs	r3, r3, #1
 8001c4a:	429a      	cmp	r2, r3
 8001c4c:	d105      	bne.n	8001c5a <medianFilter+0x11e>
 8001c4e:	697b      	ldr	r3, [r7, #20]
 8001c50:	009b      	lsls	r3, r3, #2
 8001c52:	687a      	ldr	r2, [r7, #4]
 8001c54:	4413      	add	r3, r2
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	61bb      	str	r3, [r7, #24]
    for(int i=0; i<size; i++){
 8001c5a:	697b      	ldr	r3, [r7, #20]
 8001c5c:	3301      	adds	r3, #1
 8001c5e:	617b      	str	r3, [r7, #20]
 8001c60:	697a      	ldr	r2, [r7, #20]
 8001c62:	683b      	ldr	r3, [r7, #0]
 8001c64:	429a      	cmp	r2, r3
 8001c66:	dbe8      	blt.n	8001c3a <medianFilter+0xfe>
    }

    return result;
 8001c68:	69bb      	ldr	r3, [r7, #24]
 8001c6a:	4685      	mov	sp, r0
 8001c6c:	ee07 3a90 	vmov	s15, r3
}
 8001c70:	eeb0 0a67 	vmov.f32	s0, s15
 8001c74:	372c      	adds	r7, #44	; 0x2c
 8001c76:	46bd      	mov	sp, r7
 8001c78:	e8bd 03b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9}
 8001c7c:	4770      	bx	lr
	...

08001c80 <FIR_Filter>:

float FIR_Filter(float data[], int size) {
 8001c80:	b480      	push	{r7}
 8001c82:	b085      	sub	sp, #20
 8001c84:	af00      	add	r7, sp, #0
 8001c86:	6078      	str	r0, [r7, #4]
 8001c88:	6039      	str	r1, [r7, #0]
    float result = 0;
 8001c8a:	f04f 0300 	mov.w	r3, #0
 8001c8e:	60fb      	str	r3, [r7, #12]
    for(i=0; i<size; i++){
 8001c90:	4b15      	ldr	r3, [pc, #84]	; (8001ce8 <FIR_Filter+0x68>)
 8001c92:	2200      	movs	r2, #0
 8001c94:	601a      	str	r2, [r3, #0]
 8001c96:	e018      	b.n	8001cca <FIR_Filter+0x4a>
    	result = result + data[i]/size;
 8001c98:	4b13      	ldr	r3, [pc, #76]	; (8001ce8 <FIR_Filter+0x68>)
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	009b      	lsls	r3, r3, #2
 8001c9e:	687a      	ldr	r2, [r7, #4]
 8001ca0:	4413      	add	r3, r2
 8001ca2:	edd3 6a00 	vldr	s13, [r3]
 8001ca6:	683b      	ldr	r3, [r7, #0]
 8001ca8:	ee07 3a90 	vmov	s15, r3
 8001cac:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001cb0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001cb4:	ed97 7a03 	vldr	s14, [r7, #12]
 8001cb8:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001cbc:	edc7 7a03 	vstr	s15, [r7, #12]
    for(i=0; i<size; i++){
 8001cc0:	4b09      	ldr	r3, [pc, #36]	; (8001ce8 <FIR_Filter+0x68>)
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	3301      	adds	r3, #1
 8001cc6:	4a08      	ldr	r2, [pc, #32]	; (8001ce8 <FIR_Filter+0x68>)
 8001cc8:	6013      	str	r3, [r2, #0]
 8001cca:	4b07      	ldr	r3, [pc, #28]	; (8001ce8 <FIR_Filter+0x68>)
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	683a      	ldr	r2, [r7, #0]
 8001cd0:	429a      	cmp	r2, r3
 8001cd2:	dce1      	bgt.n	8001c98 <FIR_Filter+0x18>
    }

    return result;
 8001cd4:	68fb      	ldr	r3, [r7, #12]
 8001cd6:	ee07 3a90 	vmov	s15, r3
}
 8001cda:	eeb0 0a67 	vmov.f32	s0, s15
 8001cde:	3714      	adds	r7, #20
 8001ce0:	46bd      	mov	sp, r7
 8001ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ce6:	4770      	bx	lr
 8001ce8:	200004c4 	.word	0x200004c4

08001cec <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001cec:	b480      	push	{r7}
 8001cee:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001cf0:	b672      	cpsid	i
}
 8001cf2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001cf4:	e7fe      	b.n	8001cf4 <Error_Handler+0x8>
	...

08001cf8 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001cf8:	b480      	push	{r7}
 8001cfa:	b083      	sub	sp, #12
 8001cfc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001cfe:	4b0f      	ldr	r3, [pc, #60]	; (8001d3c <HAL_MspInit+0x44>)
 8001d00:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001d02:	4a0e      	ldr	r2, [pc, #56]	; (8001d3c <HAL_MspInit+0x44>)
 8001d04:	f043 0301 	orr.w	r3, r3, #1
 8001d08:	6613      	str	r3, [r2, #96]	; 0x60
 8001d0a:	4b0c      	ldr	r3, [pc, #48]	; (8001d3c <HAL_MspInit+0x44>)
 8001d0c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001d0e:	f003 0301 	and.w	r3, r3, #1
 8001d12:	607b      	str	r3, [r7, #4]
 8001d14:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001d16:	4b09      	ldr	r3, [pc, #36]	; (8001d3c <HAL_MspInit+0x44>)
 8001d18:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d1a:	4a08      	ldr	r2, [pc, #32]	; (8001d3c <HAL_MspInit+0x44>)
 8001d1c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001d20:	6593      	str	r3, [r2, #88]	; 0x58
 8001d22:	4b06      	ldr	r3, [pc, #24]	; (8001d3c <HAL_MspInit+0x44>)
 8001d24:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d26:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d2a:	603b      	str	r3, [r7, #0]
 8001d2c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001d2e:	bf00      	nop
 8001d30:	370c      	adds	r7, #12
 8001d32:	46bd      	mov	sp, r7
 8001d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d38:	4770      	bx	lr
 8001d3a:	bf00      	nop
 8001d3c:	40021000 	.word	0x40021000

08001d40 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001d40:	b580      	push	{r7, lr}
 8001d42:	b0a4      	sub	sp, #144	; 0x90
 8001d44:	af00      	add	r7, sp, #0
 8001d46:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d48:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8001d4c:	2200      	movs	r2, #0
 8001d4e:	601a      	str	r2, [r3, #0]
 8001d50:	605a      	str	r2, [r3, #4]
 8001d52:	609a      	str	r2, [r3, #8]
 8001d54:	60da      	str	r2, [r3, #12]
 8001d56:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001d58:	f107 0314 	add.w	r3, r7, #20
 8001d5c:	2268      	movs	r2, #104	; 0x68
 8001d5e:	2100      	movs	r1, #0
 8001d60:	4618      	mov	r0, r3
 8001d62:	f006 f80b 	bl	8007d7c <memset>
  if(hadc->Instance==ADC1)
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	4a3b      	ldr	r2, [pc, #236]	; (8001e58 <HAL_ADC_MspInit+0x118>)
 8001d6c:	4293      	cmp	r3, r2
 8001d6e:	d16f      	bne.n	8001e50 <HAL_ADC_MspInit+0x110>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8001d70:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001d74:	617b      	str	r3, [r7, #20]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 8001d76:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8001d7a:	673b      	str	r3, [r7, #112]	; 0x70
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_HSI;
 8001d7c:	2302      	movs	r3, #2
 8001d7e:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 8001d80:	2301      	movs	r3, #1
 8001d82:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 8;
 8001d84:	2308      	movs	r3, #8
 8001d86:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 8001d88:	2307      	movs	r3, #7
 8001d8a:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 8001d8c:	2302      	movs	r3, #2
 8001d8e:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 8001d90:	2302      	movs	r3, #2
 8001d92:	62fb      	str	r3, [r7, #44]	; 0x2c
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 8001d94:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001d98:	633b      	str	r3, [r7, #48]	; 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001d9a:	f107 0314 	add.w	r3, r7, #20
 8001d9e:	4618      	mov	r0, r3
 8001da0:	f003 f900 	bl	8004fa4 <HAL_RCCEx_PeriphCLKConfig>
 8001da4:	4603      	mov	r3, r0
 8001da6:	2b00      	cmp	r3, #0
 8001da8:	d001      	beq.n	8001dae <HAL_ADC_MspInit+0x6e>
    {
      Error_Handler();
 8001daa:	f7ff ff9f 	bl	8001cec <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8001dae:	4b2b      	ldr	r3, [pc, #172]	; (8001e5c <HAL_ADC_MspInit+0x11c>)
 8001db0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001db2:	4a2a      	ldr	r2, [pc, #168]	; (8001e5c <HAL_ADC_MspInit+0x11c>)
 8001db4:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001db8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001dba:	4b28      	ldr	r3, [pc, #160]	; (8001e5c <HAL_ADC_MspInit+0x11c>)
 8001dbc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001dbe:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001dc2:	613b      	str	r3, [r7, #16]
 8001dc4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001dc6:	4b25      	ldr	r3, [pc, #148]	; (8001e5c <HAL_ADC_MspInit+0x11c>)
 8001dc8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001dca:	4a24      	ldr	r2, [pc, #144]	; (8001e5c <HAL_ADC_MspInit+0x11c>)
 8001dcc:	f043 0304 	orr.w	r3, r3, #4
 8001dd0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001dd2:	4b22      	ldr	r3, [pc, #136]	; (8001e5c <HAL_ADC_MspInit+0x11c>)
 8001dd4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001dd6:	f003 0304 	and.w	r3, r3, #4
 8001dda:	60fb      	str	r3, [r7, #12]
 8001ddc:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PC0     ------> ADC1_IN1
    PC1     ------> ADC1_IN2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001dde:	2303      	movs	r3, #3
 8001de0:	67fb      	str	r3, [r7, #124]	; 0x7c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8001de2:	230b      	movs	r3, #11
 8001de4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001de8:	2300      	movs	r3, #0
 8001dea:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001dee:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8001df2:	4619      	mov	r1, r3
 8001df4:	481a      	ldr	r0, [pc, #104]	; (8001e60 <HAL_ADC_MspInit+0x120>)
 8001df6:	f002 f8a7 	bl	8003f48 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8001dfa:	4b1a      	ldr	r3, [pc, #104]	; (8001e64 <HAL_ADC_MspInit+0x124>)
 8001dfc:	4a1a      	ldr	r2, [pc, #104]	; (8001e68 <HAL_ADC_MspInit+0x128>)
 8001dfe:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_0;
 8001e00:	4b18      	ldr	r3, [pc, #96]	; (8001e64 <HAL_ADC_MspInit+0x124>)
 8001e02:	2200      	movs	r2, #0
 8001e04:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001e06:	4b17      	ldr	r3, [pc, #92]	; (8001e64 <HAL_ADC_MspInit+0x124>)
 8001e08:	2200      	movs	r2, #0
 8001e0a:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001e0c:	4b15      	ldr	r3, [pc, #84]	; (8001e64 <HAL_ADC_MspInit+0x124>)
 8001e0e:	2200      	movs	r2, #0
 8001e10:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8001e12:	4b14      	ldr	r3, [pc, #80]	; (8001e64 <HAL_ADC_MspInit+0x124>)
 8001e14:	2280      	movs	r2, #128	; 0x80
 8001e16:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001e18:	4b12      	ldr	r3, [pc, #72]	; (8001e64 <HAL_ADC_MspInit+0x124>)
 8001e1a:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001e1e:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001e20:	4b10      	ldr	r3, [pc, #64]	; (8001e64 <HAL_ADC_MspInit+0x124>)
 8001e22:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001e26:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8001e28:	4b0e      	ldr	r3, [pc, #56]	; (8001e64 <HAL_ADC_MspInit+0x124>)
 8001e2a:	2220      	movs	r2, #32
 8001e2c:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8001e2e:	4b0d      	ldr	r3, [pc, #52]	; (8001e64 <HAL_ADC_MspInit+0x124>)
 8001e30:	2200      	movs	r2, #0
 8001e32:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001e34:	480b      	ldr	r0, [pc, #44]	; (8001e64 <HAL_ADC_MspInit+0x124>)
 8001e36:	f001 fe8f 	bl	8003b58 <HAL_DMA_Init>
 8001e3a:	4603      	mov	r3, r0
 8001e3c:	2b00      	cmp	r3, #0
 8001e3e:	d001      	beq.n	8001e44 <HAL_ADC_MspInit+0x104>
    {
      Error_Handler();
 8001e40:	f7ff ff54 	bl	8001cec <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	4a07      	ldr	r2, [pc, #28]	; (8001e64 <HAL_ADC_MspInit+0x124>)
 8001e48:	651a      	str	r2, [r3, #80]	; 0x50
 8001e4a:	4a06      	ldr	r2, [pc, #24]	; (8001e64 <HAL_ADC_MspInit+0x124>)
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	6293      	str	r3, [r2, #40]	; 0x28
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001e50:	bf00      	nop
 8001e52:	3790      	adds	r7, #144	; 0x90
 8001e54:	46bd      	mov	sp, r7
 8001e56:	bd80      	pop	{r7, pc}
 8001e58:	50040000 	.word	0x50040000
 8001e5c:	40021000 	.word	0x40021000
 8001e60:	48000800 	.word	0x48000800
 8001e64:	2000026c 	.word	0x2000026c
 8001e68:	40020008 	.word	0x40020008

08001e6c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001e6c:	b580      	push	{r7, lr}
 8001e6e:	b08a      	sub	sp, #40	; 0x28
 8001e70:	af00      	add	r7, sp, #0
 8001e72:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e74:	f107 0314 	add.w	r3, r7, #20
 8001e78:	2200      	movs	r2, #0
 8001e7a:	601a      	str	r2, [r3, #0]
 8001e7c:	605a      	str	r2, [r3, #4]
 8001e7e:	609a      	str	r2, [r3, #8]
 8001e80:	60da      	str	r2, [r3, #12]
 8001e82:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	4a17      	ldr	r2, [pc, #92]	; (8001ee8 <HAL_SPI_MspInit+0x7c>)
 8001e8a:	4293      	cmp	r3, r2
 8001e8c:	d128      	bne.n	8001ee0 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8001e8e:	4b17      	ldr	r3, [pc, #92]	; (8001eec <HAL_SPI_MspInit+0x80>)
 8001e90:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e92:	4a16      	ldr	r2, [pc, #88]	; (8001eec <HAL_SPI_MspInit+0x80>)
 8001e94:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001e98:	6593      	str	r3, [r2, #88]	; 0x58
 8001e9a:	4b14      	ldr	r3, [pc, #80]	; (8001eec <HAL_SPI_MspInit+0x80>)
 8001e9c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e9e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001ea2:	613b      	str	r3, [r7, #16]
 8001ea4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001ea6:	4b11      	ldr	r3, [pc, #68]	; (8001eec <HAL_SPI_MspInit+0x80>)
 8001ea8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001eaa:	4a10      	ldr	r2, [pc, #64]	; (8001eec <HAL_SPI_MspInit+0x80>)
 8001eac:	f043 0302 	orr.w	r3, r3, #2
 8001eb0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001eb2:	4b0e      	ldr	r3, [pc, #56]	; (8001eec <HAL_SPI_MspInit+0x80>)
 8001eb4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001eb6:	f003 0302 	and.w	r3, r3, #2
 8001eba:	60fb      	str	r3, [r7, #12]
 8001ebc:	68fb      	ldr	r3, [r7, #12]
    PB12     ------> SPI2_NSS
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8001ebe:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 8001ec2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ec4:	2302      	movs	r3, #2
 8001ec6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ec8:	2300      	movs	r3, #0
 8001eca:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ecc:	2303      	movs	r3, #3
 8001ece:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001ed0:	2305      	movs	r3, #5
 8001ed2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001ed4:	f107 0314 	add.w	r3, r7, #20
 8001ed8:	4619      	mov	r1, r3
 8001eda:	4805      	ldr	r0, [pc, #20]	; (8001ef0 <HAL_SPI_MspInit+0x84>)
 8001edc:	f002 f834 	bl	8003f48 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8001ee0:	bf00      	nop
 8001ee2:	3728      	adds	r7, #40	; 0x28
 8001ee4:	46bd      	mov	sp, r7
 8001ee6:	bd80      	pop	{r7, pc}
 8001ee8:	40003800 	.word	0x40003800
 8001eec:	40021000 	.word	0x40021000
 8001ef0:	48000400 	.word	0x48000400

08001ef4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001ef4:	b580      	push	{r7, lr}
 8001ef6:	b08a      	sub	sp, #40	; 0x28
 8001ef8:	af00      	add	r7, sp, #0
 8001efa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001efc:	f107 0314 	add.w	r3, r7, #20
 8001f00:	2200      	movs	r2, #0
 8001f02:	601a      	str	r2, [r3, #0]
 8001f04:	605a      	str	r2, [r3, #4]
 8001f06:	609a      	str	r2, [r3, #8]
 8001f08:	60da      	str	r2, [r3, #12]
 8001f0a:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM1)
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	4a4f      	ldr	r2, [pc, #316]	; (8002050 <HAL_TIM_Base_MspInit+0x15c>)
 8001f12:	4293      	cmp	r3, r2
 8001f14:	d10c      	bne.n	8001f30 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001f16:	4b4f      	ldr	r3, [pc, #316]	; (8002054 <HAL_TIM_Base_MspInit+0x160>)
 8001f18:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001f1a:	4a4e      	ldr	r2, [pc, #312]	; (8002054 <HAL_TIM_Base_MspInit+0x160>)
 8001f1c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001f20:	6613      	str	r3, [r2, #96]	; 0x60
 8001f22:	4b4c      	ldr	r3, [pc, #304]	; (8002054 <HAL_TIM_Base_MspInit+0x160>)
 8001f24:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001f26:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001f2a:	613b      	str	r3, [r7, #16]
 8001f2c:	693b      	ldr	r3, [r7, #16]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8001f2e:	e08a      	b.n	8002046 <HAL_TIM_Base_MspInit+0x152>
  else if(htim_base->Instance==TIM2)
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001f38:	f040 8085 	bne.w	8002046 <HAL_TIM_Base_MspInit+0x152>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001f3c:	4b45      	ldr	r3, [pc, #276]	; (8002054 <HAL_TIM_Base_MspInit+0x160>)
 8001f3e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f40:	4a44      	ldr	r2, [pc, #272]	; (8002054 <HAL_TIM_Base_MspInit+0x160>)
 8001f42:	f043 0301 	orr.w	r3, r3, #1
 8001f46:	6593      	str	r3, [r2, #88]	; 0x58
 8001f48:	4b42      	ldr	r3, [pc, #264]	; (8002054 <HAL_TIM_Base_MspInit+0x160>)
 8001f4a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f4c:	f003 0301 	and.w	r3, r3, #1
 8001f50:	60fb      	str	r3, [r7, #12]
 8001f52:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f54:	4b3f      	ldr	r3, [pc, #252]	; (8002054 <HAL_TIM_Base_MspInit+0x160>)
 8001f56:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f58:	4a3e      	ldr	r2, [pc, #248]	; (8002054 <HAL_TIM_Base_MspInit+0x160>)
 8001f5a:	f043 0301 	orr.w	r3, r3, #1
 8001f5e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001f60:	4b3c      	ldr	r3, [pc, #240]	; (8002054 <HAL_TIM_Base_MspInit+0x160>)
 8001f62:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f64:	f003 0301 	and.w	r3, r3, #1
 8001f68:	60bb      	str	r3, [r7, #8]
 8001f6a:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001f6c:	2301      	movs	r3, #1
 8001f6e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f70:	2302      	movs	r3, #2
 8001f72:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f74:	2300      	movs	r3, #0
 8001f76:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f78:	2300      	movs	r3, #0
 8001f7a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001f7c:	2301      	movs	r3, #1
 8001f7e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f80:	f107 0314 	add.w	r3, r7, #20
 8001f84:	4619      	mov	r1, r3
 8001f86:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001f8a:	f001 ffdd 	bl	8003f48 <HAL_GPIO_Init>
    hdma_tim2_ch1.Instance = DMA1_Channel5;
 8001f8e:	4b32      	ldr	r3, [pc, #200]	; (8002058 <HAL_TIM_Base_MspInit+0x164>)
 8001f90:	4a32      	ldr	r2, [pc, #200]	; (800205c <HAL_TIM_Base_MspInit+0x168>)
 8001f92:	601a      	str	r2, [r3, #0]
    hdma_tim2_ch1.Init.Request = DMA_REQUEST_4;
 8001f94:	4b30      	ldr	r3, [pc, #192]	; (8002058 <HAL_TIM_Base_MspInit+0x164>)
 8001f96:	2204      	movs	r2, #4
 8001f98:	605a      	str	r2, [r3, #4]
    hdma_tim2_ch1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001f9a:	4b2f      	ldr	r3, [pc, #188]	; (8002058 <HAL_TIM_Base_MspInit+0x164>)
 8001f9c:	2200      	movs	r2, #0
 8001f9e:	609a      	str	r2, [r3, #8]
    hdma_tim2_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001fa0:	4b2d      	ldr	r3, [pc, #180]	; (8002058 <HAL_TIM_Base_MspInit+0x164>)
 8001fa2:	2200      	movs	r2, #0
 8001fa4:	60da      	str	r2, [r3, #12]
    hdma_tim2_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8001fa6:	4b2c      	ldr	r3, [pc, #176]	; (8002058 <HAL_TIM_Base_MspInit+0x164>)
 8001fa8:	2280      	movs	r2, #128	; 0x80
 8001faa:	611a      	str	r2, [r3, #16]
    hdma_tim2_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8001fac:	4b2a      	ldr	r3, [pc, #168]	; (8002058 <HAL_TIM_Base_MspInit+0x164>)
 8001fae:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001fb2:	615a      	str	r2, [r3, #20]
    hdma_tim2_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8001fb4:	4b28      	ldr	r3, [pc, #160]	; (8002058 <HAL_TIM_Base_MspInit+0x164>)
 8001fb6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001fba:	619a      	str	r2, [r3, #24]
    hdma_tim2_ch1.Init.Mode = DMA_CIRCULAR;
 8001fbc:	4b26      	ldr	r3, [pc, #152]	; (8002058 <HAL_TIM_Base_MspInit+0x164>)
 8001fbe:	2220      	movs	r2, #32
 8001fc0:	61da      	str	r2, [r3, #28]
    hdma_tim2_ch1.Init.Priority = DMA_PRIORITY_LOW;
 8001fc2:	4b25      	ldr	r3, [pc, #148]	; (8002058 <HAL_TIM_Base_MspInit+0x164>)
 8001fc4:	2200      	movs	r2, #0
 8001fc6:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_tim2_ch1) != HAL_OK)
 8001fc8:	4823      	ldr	r0, [pc, #140]	; (8002058 <HAL_TIM_Base_MspInit+0x164>)
 8001fca:	f001 fdc5 	bl	8003b58 <HAL_DMA_Init>
 8001fce:	4603      	mov	r3, r0
 8001fd0:	2b00      	cmp	r3, #0
 8001fd2:	d001      	beq.n	8001fd8 <HAL_TIM_Base_MspInit+0xe4>
      Error_Handler();
 8001fd4:	f7ff fe8a 	bl	8001cec <Error_Handler>
    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC1],hdma_tim2_ch1);
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	4a1f      	ldr	r2, [pc, #124]	; (8002058 <HAL_TIM_Base_MspInit+0x164>)
 8001fdc:	625a      	str	r2, [r3, #36]	; 0x24
 8001fde:	4a1e      	ldr	r2, [pc, #120]	; (8002058 <HAL_TIM_Base_MspInit+0x164>)
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	6293      	str	r3, [r2, #40]	; 0x28
    hdma_tim2_ch2_ch4.Instance = DMA1_Channel7;
 8001fe4:	4b1e      	ldr	r3, [pc, #120]	; (8002060 <HAL_TIM_Base_MspInit+0x16c>)
 8001fe6:	4a1f      	ldr	r2, [pc, #124]	; (8002064 <HAL_TIM_Base_MspInit+0x170>)
 8001fe8:	601a      	str	r2, [r3, #0]
    hdma_tim2_ch2_ch4.Init.Request = DMA_REQUEST_4;
 8001fea:	4b1d      	ldr	r3, [pc, #116]	; (8002060 <HAL_TIM_Base_MspInit+0x16c>)
 8001fec:	2204      	movs	r2, #4
 8001fee:	605a      	str	r2, [r3, #4]
    hdma_tim2_ch2_ch4.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001ff0:	4b1b      	ldr	r3, [pc, #108]	; (8002060 <HAL_TIM_Base_MspInit+0x16c>)
 8001ff2:	2200      	movs	r2, #0
 8001ff4:	609a      	str	r2, [r3, #8]
    hdma_tim2_ch2_ch4.Init.PeriphInc = DMA_PINC_DISABLE;
 8001ff6:	4b1a      	ldr	r3, [pc, #104]	; (8002060 <HAL_TIM_Base_MspInit+0x16c>)
 8001ff8:	2200      	movs	r2, #0
 8001ffa:	60da      	str	r2, [r3, #12]
    hdma_tim2_ch2_ch4.Init.MemInc = DMA_MINC_ENABLE;
 8001ffc:	4b18      	ldr	r3, [pc, #96]	; (8002060 <HAL_TIM_Base_MspInit+0x16c>)
 8001ffe:	2280      	movs	r2, #128	; 0x80
 8002000:	611a      	str	r2, [r3, #16]
    hdma_tim2_ch2_ch4.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8002002:	4b17      	ldr	r3, [pc, #92]	; (8002060 <HAL_TIM_Base_MspInit+0x16c>)
 8002004:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002008:	615a      	str	r2, [r3, #20]
    hdma_tim2_ch2_ch4.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 800200a:	4b15      	ldr	r3, [pc, #84]	; (8002060 <HAL_TIM_Base_MspInit+0x16c>)
 800200c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002010:	619a      	str	r2, [r3, #24]
    hdma_tim2_ch2_ch4.Init.Mode = DMA_CIRCULAR;
 8002012:	4b13      	ldr	r3, [pc, #76]	; (8002060 <HAL_TIM_Base_MspInit+0x16c>)
 8002014:	2220      	movs	r2, #32
 8002016:	61da      	str	r2, [r3, #28]
    hdma_tim2_ch2_ch4.Init.Priority = DMA_PRIORITY_LOW;
 8002018:	4b11      	ldr	r3, [pc, #68]	; (8002060 <HAL_TIM_Base_MspInit+0x16c>)
 800201a:	2200      	movs	r2, #0
 800201c:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_tim2_ch2_ch4) != HAL_OK)
 800201e:	4810      	ldr	r0, [pc, #64]	; (8002060 <HAL_TIM_Base_MspInit+0x16c>)
 8002020:	f001 fd9a 	bl	8003b58 <HAL_DMA_Init>
 8002024:	4603      	mov	r3, r0
 8002026:	2b00      	cmp	r3, #0
 8002028:	d001      	beq.n	800202e <HAL_TIM_Base_MspInit+0x13a>
      Error_Handler();
 800202a:	f7ff fe5f 	bl	8001cec <Error_Handler>
    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC2],hdma_tim2_ch2_ch4);
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	4a0b      	ldr	r2, [pc, #44]	; (8002060 <HAL_TIM_Base_MspInit+0x16c>)
 8002032:	629a      	str	r2, [r3, #40]	; 0x28
 8002034:	4a0a      	ldr	r2, [pc, #40]	; (8002060 <HAL_TIM_Base_MspInit+0x16c>)
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	6293      	str	r3, [r2, #40]	; 0x28
    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC4],hdma_tim2_ch2_ch4);
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	4a08      	ldr	r2, [pc, #32]	; (8002060 <HAL_TIM_Base_MspInit+0x16c>)
 800203e:	631a      	str	r2, [r3, #48]	; 0x30
 8002040:	4a07      	ldr	r2, [pc, #28]	; (8002060 <HAL_TIM_Base_MspInit+0x16c>)
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	6293      	str	r3, [r2, #40]	; 0x28
}
 8002046:	bf00      	nop
 8002048:	3728      	adds	r7, #40	; 0x28
 800204a:	46bd      	mov	sp, r7
 800204c:	bd80      	pop	{r7, pc}
 800204e:	bf00      	nop
 8002050:	40012c00 	.word	0x40012c00
 8002054:	40021000 	.word	0x40021000
 8002058:	200003b0 	.word	0x200003b0
 800205c:	40020058 	.word	0x40020058
 8002060:	200003f8 	.word	0x200003f8
 8002064:	40020080 	.word	0x40020080

08002068 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002068:	b580      	push	{r7, lr}
 800206a:	b088      	sub	sp, #32
 800206c:	af00      	add	r7, sp, #0
 800206e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002070:	f107 030c 	add.w	r3, r7, #12
 8002074:	2200      	movs	r2, #0
 8002076:	601a      	str	r2, [r3, #0]
 8002078:	605a      	str	r2, [r3, #4]
 800207a:	609a      	str	r2, [r3, #8]
 800207c:	60da      	str	r2, [r3, #12]
 800207e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	4a12      	ldr	r2, [pc, #72]	; (80020d0 <HAL_TIM_MspPostInit+0x68>)
 8002086:	4293      	cmp	r3, r2
 8002088:	d11d      	bne.n	80020c6 <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800208a:	4b12      	ldr	r3, [pc, #72]	; (80020d4 <HAL_TIM_MspPostInit+0x6c>)
 800208c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800208e:	4a11      	ldr	r2, [pc, #68]	; (80020d4 <HAL_TIM_MspPostInit+0x6c>)
 8002090:	f043 0301 	orr.w	r3, r3, #1
 8002094:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002096:	4b0f      	ldr	r3, [pc, #60]	; (80020d4 <HAL_TIM_MspPostInit+0x6c>)
 8002098:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800209a:	f003 0301 	and.w	r3, r3, #1
 800209e:	60bb      	str	r3, [r7, #8]
 80020a0:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80020a2:	f44f 7300 	mov.w	r3, #512	; 0x200
 80020a6:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020a8:	2302      	movs	r3, #2
 80020aa:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020ac:	2300      	movs	r3, #0
 80020ae:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80020b0:	2300      	movs	r3, #0
 80020b2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80020b4:	2301      	movs	r3, #1
 80020b6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80020b8:	f107 030c 	add.w	r3, r7, #12
 80020bc:	4619      	mov	r1, r3
 80020be:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80020c2:	f001 ff41 	bl	8003f48 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 80020c6:	bf00      	nop
 80020c8:	3720      	adds	r7, #32
 80020ca:	46bd      	mov	sp, r7
 80020cc:	bd80      	pop	{r7, pc}
 80020ce:	bf00      	nop
 80020d0:	40012c00 	.word	0x40012c00
 80020d4:	40021000 	.word	0x40021000

080020d8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80020d8:	b580      	push	{r7, lr}
 80020da:	b0a4      	sub	sp, #144	; 0x90
 80020dc:	af00      	add	r7, sp, #0
 80020de:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80020e0:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 80020e4:	2200      	movs	r2, #0
 80020e6:	601a      	str	r2, [r3, #0]
 80020e8:	605a      	str	r2, [r3, #4]
 80020ea:	609a      	str	r2, [r3, #8]
 80020ec:	60da      	str	r2, [r3, #12]
 80020ee:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80020f0:	f107 0314 	add.w	r3, r7, #20
 80020f4:	2268      	movs	r2, #104	; 0x68
 80020f6:	2100      	movs	r1, #0
 80020f8:	4618      	mov	r0, r3
 80020fa:	f005 fe3f 	bl	8007d7c <memset>
  if(huart->Instance==USART2)
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	4a21      	ldr	r2, [pc, #132]	; (8002188 <HAL_UART_MspInit+0xb0>)
 8002104:	4293      	cmp	r3, r2
 8002106:	d13a      	bne.n	800217e <HAL_UART_MspInit+0xa6>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8002108:	2302      	movs	r3, #2
 800210a:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 800210c:	2300      	movs	r3, #0
 800210e:	63bb      	str	r3, [r7, #56]	; 0x38
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002110:	f107 0314 	add.w	r3, r7, #20
 8002114:	4618      	mov	r0, r3
 8002116:	f002 ff45 	bl	8004fa4 <HAL_RCCEx_PeriphCLKConfig>
 800211a:	4603      	mov	r3, r0
 800211c:	2b00      	cmp	r3, #0
 800211e:	d001      	beq.n	8002124 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8002120:	f7ff fde4 	bl	8001cec <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8002124:	4b19      	ldr	r3, [pc, #100]	; (800218c <HAL_UART_MspInit+0xb4>)
 8002126:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002128:	4a18      	ldr	r2, [pc, #96]	; (800218c <HAL_UART_MspInit+0xb4>)
 800212a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800212e:	6593      	str	r3, [r2, #88]	; 0x58
 8002130:	4b16      	ldr	r3, [pc, #88]	; (800218c <HAL_UART_MspInit+0xb4>)
 8002132:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002134:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002138:	613b      	str	r3, [r7, #16]
 800213a:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800213c:	4b13      	ldr	r3, [pc, #76]	; (800218c <HAL_UART_MspInit+0xb4>)
 800213e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002140:	4a12      	ldr	r2, [pc, #72]	; (800218c <HAL_UART_MspInit+0xb4>)
 8002142:	f043 0301 	orr.w	r3, r3, #1
 8002146:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002148:	4b10      	ldr	r3, [pc, #64]	; (800218c <HAL_UART_MspInit+0xb4>)
 800214a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800214c:	f003 0301 	and.w	r3, r3, #1
 8002150:	60fb      	str	r3, [r7, #12]
 8002152:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8002154:	230c      	movs	r3, #12
 8002156:	67fb      	str	r3, [r7, #124]	; 0x7c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002158:	2302      	movs	r3, #2
 800215a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800215e:	2300      	movs	r3, #0
 8002160:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002164:	2303      	movs	r3, #3
 8002166:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800216a:	2307      	movs	r3, #7
 800216c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002170:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8002174:	4619      	mov	r1, r3
 8002176:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800217a:	f001 fee5 	bl	8003f48 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800217e:	bf00      	nop
 8002180:	3790      	adds	r7, #144	; 0x90
 8002182:	46bd      	mov	sp, r7
 8002184:	bd80      	pop	{r7, pc}
 8002186:	bf00      	nop
 8002188:	40004400 	.word	0x40004400
 800218c:	40021000 	.word	0x40021000

08002190 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002190:	b480      	push	{r7}
 8002192:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002194:	e7fe      	b.n	8002194 <NMI_Handler+0x4>

08002196 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002196:	b480      	push	{r7}
 8002198:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800219a:	e7fe      	b.n	800219a <HardFault_Handler+0x4>

0800219c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800219c:	b480      	push	{r7}
 800219e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80021a0:	e7fe      	b.n	80021a0 <MemManage_Handler+0x4>

080021a2 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80021a2:	b480      	push	{r7}
 80021a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80021a6:	e7fe      	b.n	80021a6 <BusFault_Handler+0x4>

080021a8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80021a8:	b480      	push	{r7}
 80021aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80021ac:	e7fe      	b.n	80021ac <UsageFault_Handler+0x4>

080021ae <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80021ae:	b480      	push	{r7}
 80021b0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80021b2:	bf00      	nop
 80021b4:	46bd      	mov	sp, r7
 80021b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ba:	4770      	bx	lr

080021bc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80021bc:	b480      	push	{r7}
 80021be:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80021c0:	bf00      	nop
 80021c2:	46bd      	mov	sp, r7
 80021c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021c8:	4770      	bx	lr

080021ca <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80021ca:	b480      	push	{r7}
 80021cc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80021ce:	bf00      	nop
 80021d0:	46bd      	mov	sp, r7
 80021d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021d6:	4770      	bx	lr

080021d8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80021d8:	b580      	push	{r7, lr}
 80021da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80021dc:	f000 f976 	bl	80024cc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80021e0:	bf00      	nop
 80021e2:	bd80      	pop	{r7, pc}

080021e4 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 80021e4:	b580      	push	{r7, lr}
 80021e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80021e8:	4802      	ldr	r0, [pc, #8]	; (80021f4 <DMA1_Channel1_IRQHandler+0x10>)
 80021ea:	f001 fdcd 	bl	8003d88 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 80021ee:	bf00      	nop
 80021f0:	bd80      	pop	{r7, pc}
 80021f2:	bf00      	nop
 80021f4:	2000026c 	.word	0x2000026c

080021f8 <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 80021f8:	b580      	push	{r7, lr}
 80021fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim2_ch1);
 80021fc:	4802      	ldr	r0, [pc, #8]	; (8002208 <DMA1_Channel5_IRQHandler+0x10>)
 80021fe:	f001 fdc3 	bl	8003d88 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 8002202:	bf00      	nop
 8002204:	bd80      	pop	{r7, pc}
 8002206:	bf00      	nop
 8002208:	200003b0 	.word	0x200003b0

0800220c <DMA1_Channel7_IRQHandler>:

/**
  * @brief This function handles DMA1 channel7 global interrupt.
  */
void DMA1_Channel7_IRQHandler(void)
{
 800220c:	b580      	push	{r7, lr}
 800220e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel7_IRQn 0 */

  /* USER CODE END DMA1_Channel7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim2_ch2_ch4);
 8002210:	4802      	ldr	r0, [pc, #8]	; (800221c <DMA1_Channel7_IRQHandler+0x10>)
 8002212:	f001 fdb9 	bl	8003d88 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel7_IRQn 1 */

  /* USER CODE END DMA1_Channel7_IRQn 1 */
}
 8002216:	bf00      	nop
 8002218:	bd80      	pop	{r7, pc}
 800221a:	bf00      	nop
 800221c:	200003f8 	.word	0x200003f8

08002220 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002220:	b480      	push	{r7}
 8002222:	af00      	add	r7, sp, #0
  return 1;
 8002224:	2301      	movs	r3, #1
}
 8002226:	4618      	mov	r0, r3
 8002228:	46bd      	mov	sp, r7
 800222a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800222e:	4770      	bx	lr

08002230 <_kill>:

int _kill(int pid, int sig)
{
 8002230:	b580      	push	{r7, lr}
 8002232:	b082      	sub	sp, #8
 8002234:	af00      	add	r7, sp, #0
 8002236:	6078      	str	r0, [r7, #4]
 8002238:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800223a:	f005 fd75 	bl	8007d28 <__errno>
 800223e:	4603      	mov	r3, r0
 8002240:	2216      	movs	r2, #22
 8002242:	601a      	str	r2, [r3, #0]
  return -1;
 8002244:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002248:	4618      	mov	r0, r3
 800224a:	3708      	adds	r7, #8
 800224c:	46bd      	mov	sp, r7
 800224e:	bd80      	pop	{r7, pc}

08002250 <_exit>:

void _exit (int status)
{
 8002250:	b580      	push	{r7, lr}
 8002252:	b082      	sub	sp, #8
 8002254:	af00      	add	r7, sp, #0
 8002256:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002258:	f04f 31ff 	mov.w	r1, #4294967295
 800225c:	6878      	ldr	r0, [r7, #4]
 800225e:	f7ff ffe7 	bl	8002230 <_kill>
  while (1) {}    /* Make sure we hang here */
 8002262:	e7fe      	b.n	8002262 <_exit+0x12>

08002264 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002264:	b580      	push	{r7, lr}
 8002266:	b086      	sub	sp, #24
 8002268:	af00      	add	r7, sp, #0
 800226a:	60f8      	str	r0, [r7, #12]
 800226c:	60b9      	str	r1, [r7, #8]
 800226e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002270:	2300      	movs	r3, #0
 8002272:	617b      	str	r3, [r7, #20]
 8002274:	e00a      	b.n	800228c <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002276:	f3af 8000 	nop.w
 800227a:	4601      	mov	r1, r0
 800227c:	68bb      	ldr	r3, [r7, #8]
 800227e:	1c5a      	adds	r2, r3, #1
 8002280:	60ba      	str	r2, [r7, #8]
 8002282:	b2ca      	uxtb	r2, r1
 8002284:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002286:	697b      	ldr	r3, [r7, #20]
 8002288:	3301      	adds	r3, #1
 800228a:	617b      	str	r3, [r7, #20]
 800228c:	697a      	ldr	r2, [r7, #20]
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	429a      	cmp	r2, r3
 8002292:	dbf0      	blt.n	8002276 <_read+0x12>
  }

  return len;
 8002294:	687b      	ldr	r3, [r7, #4]
}
 8002296:	4618      	mov	r0, r3
 8002298:	3718      	adds	r7, #24
 800229a:	46bd      	mov	sp, r7
 800229c:	bd80      	pop	{r7, pc}

0800229e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800229e:	b580      	push	{r7, lr}
 80022a0:	b086      	sub	sp, #24
 80022a2:	af00      	add	r7, sp, #0
 80022a4:	60f8      	str	r0, [r7, #12]
 80022a6:	60b9      	str	r1, [r7, #8]
 80022a8:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80022aa:	2300      	movs	r3, #0
 80022ac:	617b      	str	r3, [r7, #20]
 80022ae:	e009      	b.n	80022c4 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80022b0:	68bb      	ldr	r3, [r7, #8]
 80022b2:	1c5a      	adds	r2, r3, #1
 80022b4:	60ba      	str	r2, [r7, #8]
 80022b6:	781b      	ldrb	r3, [r3, #0]
 80022b8:	4618      	mov	r0, r3
 80022ba:	f7fe fea5 	bl	8001008 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80022be:	697b      	ldr	r3, [r7, #20]
 80022c0:	3301      	adds	r3, #1
 80022c2:	617b      	str	r3, [r7, #20]
 80022c4:	697a      	ldr	r2, [r7, #20]
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	429a      	cmp	r2, r3
 80022ca:	dbf1      	blt.n	80022b0 <_write+0x12>
  }
  return len;
 80022cc:	687b      	ldr	r3, [r7, #4]
}
 80022ce:	4618      	mov	r0, r3
 80022d0:	3718      	adds	r7, #24
 80022d2:	46bd      	mov	sp, r7
 80022d4:	bd80      	pop	{r7, pc}

080022d6 <_close>:

int _close(int file)
{
 80022d6:	b480      	push	{r7}
 80022d8:	b083      	sub	sp, #12
 80022da:	af00      	add	r7, sp, #0
 80022dc:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80022de:	f04f 33ff 	mov.w	r3, #4294967295
}
 80022e2:	4618      	mov	r0, r3
 80022e4:	370c      	adds	r7, #12
 80022e6:	46bd      	mov	sp, r7
 80022e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ec:	4770      	bx	lr

080022ee <_fstat>:


int _fstat(int file, struct stat *st)
{
 80022ee:	b480      	push	{r7}
 80022f0:	b083      	sub	sp, #12
 80022f2:	af00      	add	r7, sp, #0
 80022f4:	6078      	str	r0, [r7, #4]
 80022f6:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80022f8:	683b      	ldr	r3, [r7, #0]
 80022fa:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80022fe:	605a      	str	r2, [r3, #4]
  return 0;
 8002300:	2300      	movs	r3, #0
}
 8002302:	4618      	mov	r0, r3
 8002304:	370c      	adds	r7, #12
 8002306:	46bd      	mov	sp, r7
 8002308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800230c:	4770      	bx	lr

0800230e <_isatty>:

int _isatty(int file)
{
 800230e:	b480      	push	{r7}
 8002310:	b083      	sub	sp, #12
 8002312:	af00      	add	r7, sp, #0
 8002314:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002316:	2301      	movs	r3, #1
}
 8002318:	4618      	mov	r0, r3
 800231a:	370c      	adds	r7, #12
 800231c:	46bd      	mov	sp, r7
 800231e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002322:	4770      	bx	lr

08002324 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002324:	b480      	push	{r7}
 8002326:	b085      	sub	sp, #20
 8002328:	af00      	add	r7, sp, #0
 800232a:	60f8      	str	r0, [r7, #12]
 800232c:	60b9      	str	r1, [r7, #8]
 800232e:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002330:	2300      	movs	r3, #0
}
 8002332:	4618      	mov	r0, r3
 8002334:	3714      	adds	r7, #20
 8002336:	46bd      	mov	sp, r7
 8002338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800233c:	4770      	bx	lr
	...

08002340 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002340:	b580      	push	{r7, lr}
 8002342:	b086      	sub	sp, #24
 8002344:	af00      	add	r7, sp, #0
 8002346:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002348:	4a14      	ldr	r2, [pc, #80]	; (800239c <_sbrk+0x5c>)
 800234a:	4b15      	ldr	r3, [pc, #84]	; (80023a0 <_sbrk+0x60>)
 800234c:	1ad3      	subs	r3, r2, r3
 800234e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002350:	697b      	ldr	r3, [r7, #20]
 8002352:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002354:	4b13      	ldr	r3, [pc, #76]	; (80023a4 <_sbrk+0x64>)
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	2b00      	cmp	r3, #0
 800235a:	d102      	bne.n	8002362 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800235c:	4b11      	ldr	r3, [pc, #68]	; (80023a4 <_sbrk+0x64>)
 800235e:	4a12      	ldr	r2, [pc, #72]	; (80023a8 <_sbrk+0x68>)
 8002360:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002362:	4b10      	ldr	r3, [pc, #64]	; (80023a4 <_sbrk+0x64>)
 8002364:	681a      	ldr	r2, [r3, #0]
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	4413      	add	r3, r2
 800236a:	693a      	ldr	r2, [r7, #16]
 800236c:	429a      	cmp	r2, r3
 800236e:	d207      	bcs.n	8002380 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002370:	f005 fcda 	bl	8007d28 <__errno>
 8002374:	4603      	mov	r3, r0
 8002376:	220c      	movs	r2, #12
 8002378:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800237a:	f04f 33ff 	mov.w	r3, #4294967295
 800237e:	e009      	b.n	8002394 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002380:	4b08      	ldr	r3, [pc, #32]	; (80023a4 <_sbrk+0x64>)
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002386:	4b07      	ldr	r3, [pc, #28]	; (80023a4 <_sbrk+0x64>)
 8002388:	681a      	ldr	r2, [r3, #0]
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	4413      	add	r3, r2
 800238e:	4a05      	ldr	r2, [pc, #20]	; (80023a4 <_sbrk+0x64>)
 8002390:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002392:	68fb      	ldr	r3, [r7, #12]
}
 8002394:	4618      	mov	r0, r3
 8002396:	3718      	adds	r7, #24
 8002398:	46bd      	mov	sp, r7
 800239a:	bd80      	pop	{r7, pc}
 800239c:	20028000 	.word	0x20028000
 80023a0:	00000400 	.word	0x00000400
 80023a4:	2000152c 	.word	0x2000152c
 80023a8:	20001548 	.word	0x20001548

080023ac <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80023ac:	b480      	push	{r7}
 80023ae:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80023b0:	4b06      	ldr	r3, [pc, #24]	; (80023cc <SystemInit+0x20>)
 80023b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80023b6:	4a05      	ldr	r2, [pc, #20]	; (80023cc <SystemInit+0x20>)
 80023b8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80023bc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 80023c0:	bf00      	nop
 80023c2:	46bd      	mov	sp, r7
 80023c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023c8:	4770      	bx	lr
 80023ca:	bf00      	nop
 80023cc:	e000ed00 	.word	0xe000ed00

080023d0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80023d0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002408 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80023d4:	f7ff ffea 	bl	80023ac <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80023d8:	480c      	ldr	r0, [pc, #48]	; (800240c <LoopForever+0x6>)
  ldr r1, =_edata
 80023da:	490d      	ldr	r1, [pc, #52]	; (8002410 <LoopForever+0xa>)
  ldr r2, =_sidata
 80023dc:	4a0d      	ldr	r2, [pc, #52]	; (8002414 <LoopForever+0xe>)
  movs r3, #0
 80023de:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80023e0:	e002      	b.n	80023e8 <LoopCopyDataInit>

080023e2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80023e2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80023e4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80023e6:	3304      	adds	r3, #4

080023e8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80023e8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80023ea:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80023ec:	d3f9      	bcc.n	80023e2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80023ee:	4a0a      	ldr	r2, [pc, #40]	; (8002418 <LoopForever+0x12>)
  ldr r4, =_ebss
 80023f0:	4c0a      	ldr	r4, [pc, #40]	; (800241c <LoopForever+0x16>)
  movs r3, #0
 80023f2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80023f4:	e001      	b.n	80023fa <LoopFillZerobss>

080023f6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80023f6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80023f8:	3204      	adds	r2, #4

080023fa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80023fa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80023fc:	d3fb      	bcc.n	80023f6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80023fe:	f005 fc99 	bl	8007d34 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8002402:	f7fe fe13 	bl	800102c <main>

08002406 <LoopForever>:

LoopForever:
    b LoopForever
 8002406:	e7fe      	b.n	8002406 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8002408:	20028000 	.word	0x20028000
  ldr r0, =_sdata
 800240c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002410:	200001e8 	.word	0x200001e8
  ldr r2, =_sidata
 8002414:	0800cbcc 	.word	0x0800cbcc
  ldr r2, =_sbss
 8002418:	200001e8 	.word	0x200001e8
  ldr r4, =_ebss
 800241c:	20001544 	.word	0x20001544

08002420 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002420:	e7fe      	b.n	8002420 <ADC1_IRQHandler>

08002422 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002422:	b580      	push	{r7, lr}
 8002424:	b082      	sub	sp, #8
 8002426:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002428:	2300      	movs	r3, #0
 800242a:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800242c:	2003      	movs	r0, #3
 800242e:	f001 fb51 	bl	8003ad4 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002432:	2000      	movs	r0, #0
 8002434:	f000 f80e 	bl	8002454 <HAL_InitTick>
 8002438:	4603      	mov	r3, r0
 800243a:	2b00      	cmp	r3, #0
 800243c:	d002      	beq.n	8002444 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800243e:	2301      	movs	r3, #1
 8002440:	71fb      	strb	r3, [r7, #7]
 8002442:	e001      	b.n	8002448 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8002444:	f7ff fc58 	bl	8001cf8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002448:	79fb      	ldrb	r3, [r7, #7]
}
 800244a:	4618      	mov	r0, r3
 800244c:	3708      	adds	r7, #8
 800244e:	46bd      	mov	sp, r7
 8002450:	bd80      	pop	{r7, pc}
	...

08002454 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002454:	b580      	push	{r7, lr}
 8002456:	b084      	sub	sp, #16
 8002458:	af00      	add	r7, sp, #0
 800245a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 800245c:	2300      	movs	r3, #0
 800245e:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8002460:	4b17      	ldr	r3, [pc, #92]	; (80024c0 <HAL_InitTick+0x6c>)
 8002462:	781b      	ldrb	r3, [r3, #0]
 8002464:	2b00      	cmp	r3, #0
 8002466:	d023      	beq.n	80024b0 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8002468:	4b16      	ldr	r3, [pc, #88]	; (80024c4 <HAL_InitTick+0x70>)
 800246a:	681a      	ldr	r2, [r3, #0]
 800246c:	4b14      	ldr	r3, [pc, #80]	; (80024c0 <HAL_InitTick+0x6c>)
 800246e:	781b      	ldrb	r3, [r3, #0]
 8002470:	4619      	mov	r1, r3
 8002472:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002476:	fbb3 f3f1 	udiv	r3, r3, r1
 800247a:	fbb2 f3f3 	udiv	r3, r2, r3
 800247e:	4618      	mov	r0, r3
 8002480:	f001 fb5d 	bl	8003b3e <HAL_SYSTICK_Config>
 8002484:	4603      	mov	r3, r0
 8002486:	2b00      	cmp	r3, #0
 8002488:	d10f      	bne.n	80024aa <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	2b0f      	cmp	r3, #15
 800248e:	d809      	bhi.n	80024a4 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002490:	2200      	movs	r2, #0
 8002492:	6879      	ldr	r1, [r7, #4]
 8002494:	f04f 30ff 	mov.w	r0, #4294967295
 8002498:	f001 fb27 	bl	8003aea <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800249c:	4a0a      	ldr	r2, [pc, #40]	; (80024c8 <HAL_InitTick+0x74>)
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	6013      	str	r3, [r2, #0]
 80024a2:	e007      	b.n	80024b4 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 80024a4:	2301      	movs	r3, #1
 80024a6:	73fb      	strb	r3, [r7, #15]
 80024a8:	e004      	b.n	80024b4 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 80024aa:	2301      	movs	r3, #1
 80024ac:	73fb      	strb	r3, [r7, #15]
 80024ae:	e001      	b.n	80024b4 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 80024b0:	2301      	movs	r3, #1
 80024b2:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80024b4:	7bfb      	ldrb	r3, [r7, #15]
}
 80024b6:	4618      	mov	r0, r3
 80024b8:	3710      	adds	r7, #16
 80024ba:	46bd      	mov	sp, r7
 80024bc:	bd80      	pop	{r7, pc}
 80024be:	bf00      	nop
 80024c0:	20000010 	.word	0x20000010
 80024c4:	20000008 	.word	0x20000008
 80024c8:	2000000c 	.word	0x2000000c

080024cc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80024cc:	b480      	push	{r7}
 80024ce:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80024d0:	4b06      	ldr	r3, [pc, #24]	; (80024ec <HAL_IncTick+0x20>)
 80024d2:	781b      	ldrb	r3, [r3, #0]
 80024d4:	461a      	mov	r2, r3
 80024d6:	4b06      	ldr	r3, [pc, #24]	; (80024f0 <HAL_IncTick+0x24>)
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	4413      	add	r3, r2
 80024dc:	4a04      	ldr	r2, [pc, #16]	; (80024f0 <HAL_IncTick+0x24>)
 80024de:	6013      	str	r3, [r2, #0]
}
 80024e0:	bf00      	nop
 80024e2:	46bd      	mov	sp, r7
 80024e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024e8:	4770      	bx	lr
 80024ea:	bf00      	nop
 80024ec:	20000010 	.word	0x20000010
 80024f0:	20001530 	.word	0x20001530

080024f4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80024f4:	b480      	push	{r7}
 80024f6:	af00      	add	r7, sp, #0
  return uwTick;
 80024f8:	4b03      	ldr	r3, [pc, #12]	; (8002508 <HAL_GetTick+0x14>)
 80024fa:	681b      	ldr	r3, [r3, #0]
}
 80024fc:	4618      	mov	r0, r3
 80024fe:	46bd      	mov	sp, r7
 8002500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002504:	4770      	bx	lr
 8002506:	bf00      	nop
 8002508:	20001530 	.word	0x20001530

0800250c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800250c:	b580      	push	{r7, lr}
 800250e:	b084      	sub	sp, #16
 8002510:	af00      	add	r7, sp, #0
 8002512:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002514:	f7ff ffee 	bl	80024f4 <HAL_GetTick>
 8002518:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 800251e:	68fb      	ldr	r3, [r7, #12]
 8002520:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002524:	d005      	beq.n	8002532 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8002526:	4b0a      	ldr	r3, [pc, #40]	; (8002550 <HAL_Delay+0x44>)
 8002528:	781b      	ldrb	r3, [r3, #0]
 800252a:	461a      	mov	r2, r3
 800252c:	68fb      	ldr	r3, [r7, #12]
 800252e:	4413      	add	r3, r2
 8002530:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002532:	bf00      	nop
 8002534:	f7ff ffde 	bl	80024f4 <HAL_GetTick>
 8002538:	4602      	mov	r2, r0
 800253a:	68bb      	ldr	r3, [r7, #8]
 800253c:	1ad3      	subs	r3, r2, r3
 800253e:	68fa      	ldr	r2, [r7, #12]
 8002540:	429a      	cmp	r2, r3
 8002542:	d8f7      	bhi.n	8002534 <HAL_Delay+0x28>
  {
  }
}
 8002544:	bf00      	nop
 8002546:	bf00      	nop
 8002548:	3710      	adds	r7, #16
 800254a:	46bd      	mov	sp, r7
 800254c:	bd80      	pop	{r7, pc}
 800254e:	bf00      	nop
 8002550:	20000010 	.word	0x20000010

08002554 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8002554:	b480      	push	{r7}
 8002556:	b083      	sub	sp, #12
 8002558:	af00      	add	r7, sp, #0
 800255a:	6078      	str	r0, [r7, #4]
 800255c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	689b      	ldr	r3, [r3, #8]
 8002562:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8002566:	683b      	ldr	r3, [r7, #0]
 8002568:	431a      	orrs	r2, r3
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	609a      	str	r2, [r3, #8]
}
 800256e:	bf00      	nop
 8002570:	370c      	adds	r7, #12
 8002572:	46bd      	mov	sp, r7
 8002574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002578:	4770      	bx	lr

0800257a <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 800257a:	b480      	push	{r7}
 800257c:	b083      	sub	sp, #12
 800257e:	af00      	add	r7, sp, #0
 8002580:	6078      	str	r0, [r7, #4]
 8002582:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	689b      	ldr	r3, [r3, #8]
 8002588:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 800258c:	683b      	ldr	r3, [r7, #0]
 800258e:	431a      	orrs	r2, r3
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	609a      	str	r2, [r3, #8]
}
 8002594:	bf00      	nop
 8002596:	370c      	adds	r7, #12
 8002598:	46bd      	mov	sp, r7
 800259a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800259e:	4770      	bx	lr

080025a0 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 80025a0:	b480      	push	{r7}
 80025a2:	b083      	sub	sp, #12
 80025a4:	af00      	add	r7, sp, #0
 80025a6:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	689b      	ldr	r3, [r3, #8]
 80025ac:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 80025b0:	4618      	mov	r0, r3
 80025b2:	370c      	adds	r7, #12
 80025b4:	46bd      	mov	sp, r7
 80025b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ba:	4770      	bx	lr

080025bc <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 80025bc:	b480      	push	{r7}
 80025be:	b087      	sub	sp, #28
 80025c0:	af00      	add	r7, sp, #0
 80025c2:	60f8      	str	r0, [r7, #12]
 80025c4:	60b9      	str	r1, [r7, #8]
 80025c6:	607a      	str	r2, [r7, #4]
 80025c8:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80025ca:	68fb      	ldr	r3, [r7, #12]
 80025cc:	3360      	adds	r3, #96	; 0x60
 80025ce:	461a      	mov	r2, r3
 80025d0:	68bb      	ldr	r3, [r7, #8]
 80025d2:	009b      	lsls	r3, r3, #2
 80025d4:	4413      	add	r3, r2
 80025d6:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80025d8:	697b      	ldr	r3, [r7, #20]
 80025da:	681a      	ldr	r2, [r3, #0]
 80025dc:	4b08      	ldr	r3, [pc, #32]	; (8002600 <LL_ADC_SetOffset+0x44>)
 80025de:	4013      	ands	r3, r2
 80025e0:	687a      	ldr	r2, [r7, #4]
 80025e2:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 80025e6:	683a      	ldr	r2, [r7, #0]
 80025e8:	430a      	orrs	r2, r1
 80025ea:	4313      	orrs	r3, r2
 80025ec:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80025f0:	697b      	ldr	r3, [r7, #20]
 80025f2:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 80025f4:	bf00      	nop
 80025f6:	371c      	adds	r7, #28
 80025f8:	46bd      	mov	sp, r7
 80025fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025fe:	4770      	bx	lr
 8002600:	03fff000 	.word	0x03fff000

08002604 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8002604:	b480      	push	{r7}
 8002606:	b085      	sub	sp, #20
 8002608:	af00      	add	r7, sp, #0
 800260a:	6078      	str	r0, [r7, #4]
 800260c:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	3360      	adds	r3, #96	; 0x60
 8002612:	461a      	mov	r2, r3
 8002614:	683b      	ldr	r3, [r7, #0]
 8002616:	009b      	lsls	r3, r3, #2
 8002618:	4413      	add	r3, r2
 800261a:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 800261c:	68fb      	ldr	r3, [r7, #12]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8002624:	4618      	mov	r0, r3
 8002626:	3714      	adds	r7, #20
 8002628:	46bd      	mov	sp, r7
 800262a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800262e:	4770      	bx	lr

08002630 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8002630:	b480      	push	{r7}
 8002632:	b087      	sub	sp, #28
 8002634:	af00      	add	r7, sp, #0
 8002636:	60f8      	str	r0, [r7, #12]
 8002638:	60b9      	str	r1, [r7, #8]
 800263a:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800263c:	68fb      	ldr	r3, [r7, #12]
 800263e:	3360      	adds	r3, #96	; 0x60
 8002640:	461a      	mov	r2, r3
 8002642:	68bb      	ldr	r3, [r7, #8]
 8002644:	009b      	lsls	r3, r3, #2
 8002646:	4413      	add	r3, r2
 8002648:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800264a:	697b      	ldr	r3, [r7, #20]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	431a      	orrs	r2, r3
 8002656:	697b      	ldr	r3, [r7, #20]
 8002658:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 800265a:	bf00      	nop
 800265c:	371c      	adds	r7, #28
 800265e:	46bd      	mov	sp, r7
 8002660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002664:	4770      	bx	lr

08002666 <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 8002666:	b480      	push	{r7}
 8002668:	b083      	sub	sp, #12
 800266a:	af00      	add	r7, sp, #0
 800266c:	6078      	str	r0, [r7, #4]
 800266e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	695b      	ldr	r3, [r3, #20]
 8002674:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002678:	683b      	ldr	r3, [r7, #0]
 800267a:	431a      	orrs	r2, r3
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	615a      	str	r2, [r3, #20]
}
 8002680:	bf00      	nop
 8002682:	370c      	adds	r7, #12
 8002684:	46bd      	mov	sp, r7
 8002686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800268a:	4770      	bx	lr

0800268c <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 800268c:	b480      	push	{r7}
 800268e:	b083      	sub	sp, #12
 8002690:	af00      	add	r7, sp, #0
 8002692:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	68db      	ldr	r3, [r3, #12]
 8002698:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800269c:	2b00      	cmp	r3, #0
 800269e:	d101      	bne.n	80026a4 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 80026a0:	2301      	movs	r3, #1
 80026a2:	e000      	b.n	80026a6 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 80026a4:	2300      	movs	r3, #0
}
 80026a6:	4618      	mov	r0, r3
 80026a8:	370c      	adds	r7, #12
 80026aa:	46bd      	mov	sp, r7
 80026ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026b0:	4770      	bx	lr

080026b2 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80026b2:	b480      	push	{r7}
 80026b4:	b087      	sub	sp, #28
 80026b6:	af00      	add	r7, sp, #0
 80026b8:	60f8      	str	r0, [r7, #12]
 80026ba:	60b9      	str	r1, [r7, #8]
 80026bc:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 80026be:	68fb      	ldr	r3, [r7, #12]
 80026c0:	3330      	adds	r3, #48	; 0x30
 80026c2:	461a      	mov	r2, r3
 80026c4:	68bb      	ldr	r3, [r7, #8]
 80026c6:	0a1b      	lsrs	r3, r3, #8
 80026c8:	009b      	lsls	r3, r3, #2
 80026ca:	f003 030c 	and.w	r3, r3, #12
 80026ce:	4413      	add	r3, r2
 80026d0:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80026d2:	697b      	ldr	r3, [r7, #20]
 80026d4:	681a      	ldr	r2, [r3, #0]
 80026d6:	68bb      	ldr	r3, [r7, #8]
 80026d8:	f003 031f 	and.w	r3, r3, #31
 80026dc:	211f      	movs	r1, #31
 80026de:	fa01 f303 	lsl.w	r3, r1, r3
 80026e2:	43db      	mvns	r3, r3
 80026e4:	401a      	ands	r2, r3
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	0e9b      	lsrs	r3, r3, #26
 80026ea:	f003 011f 	and.w	r1, r3, #31
 80026ee:	68bb      	ldr	r3, [r7, #8]
 80026f0:	f003 031f 	and.w	r3, r3, #31
 80026f4:	fa01 f303 	lsl.w	r3, r1, r3
 80026f8:	431a      	orrs	r2, r3
 80026fa:	697b      	ldr	r3, [r7, #20]
 80026fc:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80026fe:	bf00      	nop
 8002700:	371c      	adds	r7, #28
 8002702:	46bd      	mov	sp, r7
 8002704:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002708:	4770      	bx	lr

0800270a <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 800270a:	b480      	push	{r7}
 800270c:	b087      	sub	sp, #28
 800270e:	af00      	add	r7, sp, #0
 8002710:	60f8      	str	r0, [r7, #12]
 8002712:	60b9      	str	r1, [r7, #8]
 8002714:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8002716:	68fb      	ldr	r3, [r7, #12]
 8002718:	3314      	adds	r3, #20
 800271a:	461a      	mov	r2, r3
 800271c:	68bb      	ldr	r3, [r7, #8]
 800271e:	0e5b      	lsrs	r3, r3, #25
 8002720:	009b      	lsls	r3, r3, #2
 8002722:	f003 0304 	and.w	r3, r3, #4
 8002726:	4413      	add	r3, r2
 8002728:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800272a:	697b      	ldr	r3, [r7, #20]
 800272c:	681a      	ldr	r2, [r3, #0]
 800272e:	68bb      	ldr	r3, [r7, #8]
 8002730:	0d1b      	lsrs	r3, r3, #20
 8002732:	f003 031f 	and.w	r3, r3, #31
 8002736:	2107      	movs	r1, #7
 8002738:	fa01 f303 	lsl.w	r3, r1, r3
 800273c:	43db      	mvns	r3, r3
 800273e:	401a      	ands	r2, r3
 8002740:	68bb      	ldr	r3, [r7, #8]
 8002742:	0d1b      	lsrs	r3, r3, #20
 8002744:	f003 031f 	and.w	r3, r3, #31
 8002748:	6879      	ldr	r1, [r7, #4]
 800274a:	fa01 f303 	lsl.w	r3, r1, r3
 800274e:	431a      	orrs	r2, r3
 8002750:	697b      	ldr	r3, [r7, #20]
 8002752:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8002754:	bf00      	nop
 8002756:	371c      	adds	r7, #28
 8002758:	46bd      	mov	sp, r7
 800275a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800275e:	4770      	bx	lr

08002760 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8002760:	b480      	push	{r7}
 8002762:	b085      	sub	sp, #20
 8002764:	af00      	add	r7, sp, #0
 8002766:	60f8      	str	r0, [r7, #12]
 8002768:	60b9      	str	r1, [r7, #8]
 800276a:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 800276c:	68fb      	ldr	r3, [r7, #12]
 800276e:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8002772:	68bb      	ldr	r3, [r7, #8]
 8002774:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002778:	43db      	mvns	r3, r3
 800277a:	401a      	ands	r2, r3
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	f003 0318 	and.w	r3, r3, #24
 8002782:	4908      	ldr	r1, [pc, #32]	; (80027a4 <LL_ADC_SetChannelSingleDiff+0x44>)
 8002784:	40d9      	lsrs	r1, r3
 8002786:	68bb      	ldr	r3, [r7, #8]
 8002788:	400b      	ands	r3, r1
 800278a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800278e:	431a      	orrs	r2, r3
 8002790:	68fb      	ldr	r3, [r7, #12]
 8002792:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8002796:	bf00      	nop
 8002798:	3714      	adds	r7, #20
 800279a:	46bd      	mov	sp, r7
 800279c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027a0:	4770      	bx	lr
 80027a2:	bf00      	nop
 80027a4:	0007ffff 	.word	0x0007ffff

080027a8 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 80027a8:	b480      	push	{r7}
 80027aa:	b083      	sub	sp, #12
 80027ac:	af00      	add	r7, sp, #0
 80027ae:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	689b      	ldr	r3, [r3, #8]
 80027b4:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 80027b8:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80027bc:	687a      	ldr	r2, [r7, #4]
 80027be:	6093      	str	r3, [r2, #8]
}
 80027c0:	bf00      	nop
 80027c2:	370c      	adds	r7, #12
 80027c4:	46bd      	mov	sp, r7
 80027c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ca:	4770      	bx	lr

080027cc <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 80027cc:	b480      	push	{r7}
 80027ce:	b083      	sub	sp, #12
 80027d0:	af00      	add	r7, sp, #0
 80027d2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	689b      	ldr	r3, [r3, #8]
 80027d8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80027dc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80027e0:	d101      	bne.n	80027e6 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 80027e2:	2301      	movs	r3, #1
 80027e4:	e000      	b.n	80027e8 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 80027e6:	2300      	movs	r3, #0
}
 80027e8:	4618      	mov	r0, r3
 80027ea:	370c      	adds	r7, #12
 80027ec:	46bd      	mov	sp, r7
 80027ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027f2:	4770      	bx	lr

080027f4 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80027f4:	b480      	push	{r7}
 80027f6:	b083      	sub	sp, #12
 80027f8:	af00      	add	r7, sp, #0
 80027fa:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	689b      	ldr	r3, [r3, #8]
 8002800:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8002804:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002808:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8002810:	bf00      	nop
 8002812:	370c      	adds	r7, #12
 8002814:	46bd      	mov	sp, r7
 8002816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800281a:	4770      	bx	lr

0800281c <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 800281c:	b480      	push	{r7}
 800281e:	b083      	sub	sp, #12
 8002820:	af00      	add	r7, sp, #0
 8002822:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	689b      	ldr	r3, [r3, #8]
 8002828:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800282c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002830:	d101      	bne.n	8002836 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8002832:	2301      	movs	r3, #1
 8002834:	e000      	b.n	8002838 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8002836:	2300      	movs	r3, #0
}
 8002838:	4618      	mov	r0, r3
 800283a:	370c      	adds	r7, #12
 800283c:	46bd      	mov	sp, r7
 800283e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002842:	4770      	bx	lr

08002844 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8002844:	b480      	push	{r7}
 8002846:	b083      	sub	sp, #12
 8002848:	af00      	add	r7, sp, #0
 800284a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	689b      	ldr	r3, [r3, #8]
 8002850:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002854:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002858:	f043 0201 	orr.w	r2, r3, #1
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8002860:	bf00      	nop
 8002862:	370c      	adds	r7, #12
 8002864:	46bd      	mov	sp, r7
 8002866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800286a:	4770      	bx	lr

0800286c <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 800286c:	b480      	push	{r7}
 800286e:	b083      	sub	sp, #12
 8002870:	af00      	add	r7, sp, #0
 8002872:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	689b      	ldr	r3, [r3, #8]
 8002878:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800287c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002880:	f043 0202 	orr.w	r2, r3, #2
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8002888:	bf00      	nop
 800288a:	370c      	adds	r7, #12
 800288c:	46bd      	mov	sp, r7
 800288e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002892:	4770      	bx	lr

08002894 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8002894:	b480      	push	{r7}
 8002896:	b083      	sub	sp, #12
 8002898:	af00      	add	r7, sp, #0
 800289a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	689b      	ldr	r3, [r3, #8]
 80028a0:	f003 0301 	and.w	r3, r3, #1
 80028a4:	2b01      	cmp	r3, #1
 80028a6:	d101      	bne.n	80028ac <LL_ADC_IsEnabled+0x18>
 80028a8:	2301      	movs	r3, #1
 80028aa:	e000      	b.n	80028ae <LL_ADC_IsEnabled+0x1a>
 80028ac:	2300      	movs	r3, #0
}
 80028ae:	4618      	mov	r0, r3
 80028b0:	370c      	adds	r7, #12
 80028b2:	46bd      	mov	sp, r7
 80028b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028b8:	4770      	bx	lr

080028ba <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(ADC_TypeDef *ADCx)
{
 80028ba:	b480      	push	{r7}
 80028bc:	b083      	sub	sp, #12
 80028be:	af00      	add	r7, sp, #0
 80028c0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	689b      	ldr	r3, [r3, #8]
 80028c6:	f003 0302 	and.w	r3, r3, #2
 80028ca:	2b02      	cmp	r3, #2
 80028cc:	d101      	bne.n	80028d2 <LL_ADC_IsDisableOngoing+0x18>
 80028ce:	2301      	movs	r3, #1
 80028d0:	e000      	b.n	80028d4 <LL_ADC_IsDisableOngoing+0x1a>
 80028d2:	2300      	movs	r3, #0
}
 80028d4:	4618      	mov	r0, r3
 80028d6:	370c      	adds	r7, #12
 80028d8:	46bd      	mov	sp, r7
 80028da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028de:	4770      	bx	lr

080028e0 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 80028e0:	b480      	push	{r7}
 80028e2:	b083      	sub	sp, #12
 80028e4:	af00      	add	r7, sp, #0
 80028e6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	689b      	ldr	r3, [r3, #8]
 80028ec:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80028f0:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80028f4:	f043 0204 	orr.w	r2, r3, #4
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 80028fc:	bf00      	nop
 80028fe:	370c      	adds	r7, #12
 8002900:	46bd      	mov	sp, r7
 8002902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002906:	4770      	bx	lr

08002908 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8002908:	b480      	push	{r7}
 800290a:	b083      	sub	sp, #12
 800290c:	af00      	add	r7, sp, #0
 800290e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	689b      	ldr	r3, [r3, #8]
 8002914:	f003 0304 	and.w	r3, r3, #4
 8002918:	2b04      	cmp	r3, #4
 800291a:	d101      	bne.n	8002920 <LL_ADC_REG_IsConversionOngoing+0x18>
 800291c:	2301      	movs	r3, #1
 800291e:	e000      	b.n	8002922 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002920:	2300      	movs	r3, #0
}
 8002922:	4618      	mov	r0, r3
 8002924:	370c      	adds	r7, #12
 8002926:	46bd      	mov	sp, r7
 8002928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800292c:	4770      	bx	lr

0800292e <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 800292e:	b480      	push	{r7}
 8002930:	b083      	sub	sp, #12
 8002932:	af00      	add	r7, sp, #0
 8002934:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	689b      	ldr	r3, [r3, #8]
 800293a:	f003 0308 	and.w	r3, r3, #8
 800293e:	2b08      	cmp	r3, #8
 8002940:	d101      	bne.n	8002946 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8002942:	2301      	movs	r3, #1
 8002944:	e000      	b.n	8002948 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8002946:	2300      	movs	r3, #0
}
 8002948:	4618      	mov	r0, r3
 800294a:	370c      	adds	r7, #12
 800294c:	46bd      	mov	sp, r7
 800294e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002952:	4770      	bx	lr

08002954 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002954:	b580      	push	{r7, lr}
 8002956:	b088      	sub	sp, #32
 8002958:	af00      	add	r7, sp, #0
 800295a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800295c:	2300      	movs	r3, #0
 800295e:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8002960:	2300      	movs	r3, #0
 8002962:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	2b00      	cmp	r3, #0
 8002968:	d101      	bne.n	800296e <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 800296a:	2301      	movs	r3, #1
 800296c:	e12f      	b.n	8002bce <HAL_ADC_Init+0x27a>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	691b      	ldr	r3, [r3, #16]
 8002972:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002978:	2b00      	cmp	r3, #0
 800297a:	d109      	bne.n	8002990 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800297c:	6878      	ldr	r0, [r7, #4]
 800297e:	f7ff f9df 	bl	8001d40 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	2200      	movs	r2, #0
 8002986:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	2200      	movs	r2, #0
 800298c:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	4618      	mov	r0, r3
 8002996:	f7ff ff19 	bl	80027cc <LL_ADC_IsDeepPowerDownEnabled>
 800299a:	4603      	mov	r3, r0
 800299c:	2b00      	cmp	r3, #0
 800299e:	d004      	beq.n	80029aa <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	4618      	mov	r0, r3
 80029a6:	f7ff feff 	bl	80027a8 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	4618      	mov	r0, r3
 80029b0:	f7ff ff34 	bl	800281c <LL_ADC_IsInternalRegulatorEnabled>
 80029b4:	4603      	mov	r3, r0
 80029b6:	2b00      	cmp	r3, #0
 80029b8:	d115      	bne.n	80029e6 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	4618      	mov	r0, r3
 80029c0:	f7ff ff18 	bl	80027f4 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80029c4:	4b84      	ldr	r3, [pc, #528]	; (8002bd8 <HAL_ADC_Init+0x284>)
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	099b      	lsrs	r3, r3, #6
 80029ca:	4a84      	ldr	r2, [pc, #528]	; (8002bdc <HAL_ADC_Init+0x288>)
 80029cc:	fba2 2303 	umull	r2, r3, r2, r3
 80029d0:	099b      	lsrs	r3, r3, #6
 80029d2:	3301      	adds	r3, #1
 80029d4:	005b      	lsls	r3, r3, #1
 80029d6:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80029d8:	e002      	b.n	80029e0 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 80029da:	68bb      	ldr	r3, [r7, #8]
 80029dc:	3b01      	subs	r3, #1
 80029de:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80029e0:	68bb      	ldr	r3, [r7, #8]
 80029e2:	2b00      	cmp	r3, #0
 80029e4:	d1f9      	bne.n	80029da <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	4618      	mov	r0, r3
 80029ec:	f7ff ff16 	bl	800281c <LL_ADC_IsInternalRegulatorEnabled>
 80029f0:	4603      	mov	r3, r0
 80029f2:	2b00      	cmp	r3, #0
 80029f4:	d10d      	bne.n	8002a12 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80029fa:	f043 0210 	orr.w	r2, r3, #16
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	659a      	str	r2, [r3, #88]	; 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a06:	f043 0201 	orr.w	r2, r3, #1
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8002a0e:	2301      	movs	r3, #1
 8002a10:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	4618      	mov	r0, r3
 8002a18:	f7ff ff76 	bl	8002908 <LL_ADC_REG_IsConversionOngoing>
 8002a1c:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a22:	f003 0310 	and.w	r3, r3, #16
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	f040 80c8 	bne.w	8002bbc <HAL_ADC_Init+0x268>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8002a2c:	697b      	ldr	r3, [r7, #20]
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	f040 80c4 	bne.w	8002bbc <HAL_ADC_Init+0x268>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a38:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8002a3c:	f043 0202 	orr.w	r2, r3, #2
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	659a      	str	r2, [r3, #88]	; 0x58
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	4618      	mov	r0, r3
 8002a4a:	f7ff ff23 	bl	8002894 <LL_ADC_IsEnabled>
 8002a4e:	4603      	mov	r3, r0
 8002a50:	2b00      	cmp	r3, #0
 8002a52:	d10b      	bne.n	8002a6c <HAL_ADC_Init+0x118>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002a54:	4862      	ldr	r0, [pc, #392]	; (8002be0 <HAL_ADC_Init+0x28c>)
 8002a56:	f7ff ff1d 	bl	8002894 <LL_ADC_IsEnabled>
 8002a5a:	4603      	mov	r3, r0
 8002a5c:	2b00      	cmp	r3, #0
 8002a5e:	d105      	bne.n	8002a6c <HAL_ADC_Init+0x118>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	685b      	ldr	r3, [r3, #4]
 8002a64:	4619      	mov	r1, r3
 8002a66:	485f      	ldr	r0, [pc, #380]	; (8002be4 <HAL_ADC_Init+0x290>)
 8002a68:	f7ff fd74 	bl	8002554 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	7e5b      	ldrb	r3, [r3, #25]
 8002a70:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002a76:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 8002a7c:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 8002a82:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002a8a:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002a8c:	4313      	orrs	r3, r2
 8002a8e:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002a96:	2b01      	cmp	r3, #1
 8002a98:	d106      	bne.n	8002aa8 <HAL_ADC_Init+0x154>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a9e:	3b01      	subs	r3, #1
 8002aa0:	045b      	lsls	r3, r3, #17
 8002aa2:	69ba      	ldr	r2, [r7, #24]
 8002aa4:	4313      	orrs	r3, r2
 8002aa6:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002aac:	2b00      	cmp	r3, #0
 8002aae:	d009      	beq.n	8002ac4 <HAL_ADC_Init+0x170>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ab4:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002abc:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002abe:	69ba      	ldr	r2, [r7, #24]
 8002ac0:	4313      	orrs	r3, r2
 8002ac2:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	68da      	ldr	r2, [r3, #12]
 8002aca:	4b47      	ldr	r3, [pc, #284]	; (8002be8 <HAL_ADC_Init+0x294>)
 8002acc:	4013      	ands	r3, r2
 8002ace:	687a      	ldr	r2, [r7, #4]
 8002ad0:	6812      	ldr	r2, [r2, #0]
 8002ad2:	69b9      	ldr	r1, [r7, #24]
 8002ad4:	430b      	orrs	r3, r1
 8002ad6:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	4618      	mov	r0, r3
 8002ade:	f7ff ff13 	bl	8002908 <LL_ADC_REG_IsConversionOngoing>
 8002ae2:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	4618      	mov	r0, r3
 8002aea:	f7ff ff20 	bl	800292e <LL_ADC_INJ_IsConversionOngoing>
 8002aee:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002af0:	693b      	ldr	r3, [r7, #16]
 8002af2:	2b00      	cmp	r3, #0
 8002af4:	d140      	bne.n	8002b78 <HAL_ADC_Init+0x224>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002af6:	68fb      	ldr	r3, [r7, #12]
 8002af8:	2b00      	cmp	r3, #0
 8002afa:	d13d      	bne.n	8002b78 <HAL_ADC_Init+0x224>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	6cda      	ldr	r2, [r3, #76]	; 0x4c
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	7e1b      	ldrb	r3, [r3, #24]
 8002b04:	039b      	lsls	r3, r3, #14
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8002b06:	431a      	orrs	r2, r3
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002b0e:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8002b10:	4313      	orrs	r3, r2
 8002b12:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	68db      	ldr	r3, [r3, #12]
 8002b1a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002b1e:	f023 0306 	bic.w	r3, r3, #6
 8002b22:	687a      	ldr	r2, [r7, #4]
 8002b24:	6812      	ldr	r2, [r2, #0]
 8002b26:	69b9      	ldr	r1, [r7, #24]
 8002b28:	430b      	orrs	r3, r1
 8002b2a:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002b32:	2b01      	cmp	r3, #1
 8002b34:	d118      	bne.n	8002b68 <HAL_ADC_Init+0x214>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	691b      	ldr	r3, [r3, #16]
 8002b3c:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8002b40:	f023 0304 	bic.w	r3, r3, #4
 8002b44:	687a      	ldr	r2, [r7, #4]
 8002b46:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 8002b48:	687a      	ldr	r2, [r7, #4]
 8002b4a:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8002b4c:	4311      	orrs	r1, r2
 8002b4e:	687a      	ldr	r2, [r7, #4]
 8002b50:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8002b52:	4311      	orrs	r1, r2
 8002b54:	687a      	ldr	r2, [r7, #4]
 8002b56:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8002b58:	430a      	orrs	r2, r1
 8002b5a:	431a      	orrs	r2, r3
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	f042 0201 	orr.w	r2, r2, #1
 8002b64:	611a      	str	r2, [r3, #16]
 8002b66:	e007      	b.n	8002b78 <HAL_ADC_Init+0x224>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	691a      	ldr	r2, [r3, #16]
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	f022 0201 	bic.w	r2, r2, #1
 8002b76:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	691b      	ldr	r3, [r3, #16]
 8002b7c:	2b01      	cmp	r3, #1
 8002b7e:	d10c      	bne.n	8002b9a <HAL_ADC_Init+0x246>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b86:	f023 010f 	bic.w	r1, r3, #15
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	69db      	ldr	r3, [r3, #28]
 8002b8e:	1e5a      	subs	r2, r3, #1
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	430a      	orrs	r2, r1
 8002b96:	631a      	str	r2, [r3, #48]	; 0x30
 8002b98:	e007      	b.n	8002baa <HAL_ADC_Init+0x256>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	f022 020f 	bic.w	r2, r2, #15
 8002ba8:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002bae:	f023 0303 	bic.w	r3, r3, #3
 8002bb2:	f043 0201 	orr.w	r2, r3, #1
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	659a      	str	r2, [r3, #88]	; 0x58
 8002bba:	e007      	b.n	8002bcc <HAL_ADC_Init+0x278>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002bc0:	f043 0210 	orr.w	r2, r3, #16
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8002bc8:	2301      	movs	r3, #1
 8002bca:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8002bcc:	7ffb      	ldrb	r3, [r7, #31]
}
 8002bce:	4618      	mov	r0, r3
 8002bd0:	3720      	adds	r7, #32
 8002bd2:	46bd      	mov	sp, r7
 8002bd4:	bd80      	pop	{r7, pc}
 8002bd6:	bf00      	nop
 8002bd8:	20000008 	.word	0x20000008
 8002bdc:	053e2d63 	.word	0x053e2d63
 8002be0:	50040000 	.word	0x50040000
 8002be4:	50040300 	.word	0x50040300
 8002be8:	fff0c007 	.word	0xfff0c007

08002bec <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8002bec:	b580      	push	{r7, lr}
 8002bee:	b086      	sub	sp, #24
 8002bf0:	af00      	add	r7, sp, #0
 8002bf2:	60f8      	str	r0, [r7, #12]
 8002bf4:	60b9      	str	r1, [r7, #8]
 8002bf6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002bf8:	68fb      	ldr	r3, [r7, #12]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	4618      	mov	r0, r3
 8002bfe:	f7ff fe83 	bl	8002908 <LL_ADC_REG_IsConversionOngoing>
 8002c02:	4603      	mov	r3, r0
 8002c04:	2b00      	cmp	r3, #0
 8002c06:	d167      	bne.n	8002cd8 <HAL_ADC_Start_DMA+0xec>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8002c08:	68fb      	ldr	r3, [r7, #12]
 8002c0a:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8002c0e:	2b01      	cmp	r3, #1
 8002c10:	d101      	bne.n	8002c16 <HAL_ADC_Start_DMA+0x2a>
 8002c12:	2302      	movs	r3, #2
 8002c14:	e063      	b.n	8002cde <HAL_ADC_Start_DMA+0xf2>
 8002c16:	68fb      	ldr	r3, [r7, #12]
 8002c18:	2201      	movs	r2, #1
 8002c1a:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
       )
#endif /* ADC_MULTIMODE_SUPPORT */
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 8002c1e:	68f8      	ldr	r0, [r7, #12]
 8002c20:	f000 fc82 	bl	8003528 <ADC_Enable>
 8002c24:	4603      	mov	r3, r0
 8002c26:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8002c28:	7dfb      	ldrb	r3, [r7, #23]
 8002c2a:	2b00      	cmp	r3, #0
 8002c2c:	d14f      	bne.n	8002cce <HAL_ADC_Start_DMA+0xe2>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 8002c2e:	68fb      	ldr	r3, [r7, #12]
 8002c30:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c32:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002c36:	f023 0301 	bic.w	r3, r3, #1
 8002c3a:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002c3e:	68fb      	ldr	r3, [r7, #12]
 8002c40:	659a      	str	r2, [r3, #88]	; 0x58
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
        }
#endif

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8002c42:	68fb      	ldr	r3, [r7, #12]
 8002c44:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c46:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002c4a:	2b00      	cmp	r3, #0
 8002c4c:	d006      	beq.n	8002c5c <HAL_ADC_Start_DMA+0x70>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8002c4e:	68fb      	ldr	r3, [r7, #12]
 8002c50:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c52:	f023 0206 	bic.w	r2, r3, #6
 8002c56:	68fb      	ldr	r3, [r7, #12]
 8002c58:	65da      	str	r2, [r3, #92]	; 0x5c
 8002c5a:	e002      	b.n	8002c62 <HAL_ADC_Start_DMA+0x76>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8002c5c:	68fb      	ldr	r3, [r7, #12]
 8002c5e:	2200      	movs	r2, #0
 8002c60:	65da      	str	r2, [r3, #92]	; 0x5c
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8002c62:	68fb      	ldr	r3, [r7, #12]
 8002c64:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002c66:	4a20      	ldr	r2, [pc, #128]	; (8002ce8 <HAL_ADC_Start_DMA+0xfc>)
 8002c68:	62da      	str	r2, [r3, #44]	; 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8002c6a:	68fb      	ldr	r3, [r7, #12]
 8002c6c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002c6e:	4a1f      	ldr	r2, [pc, #124]	; (8002cec <HAL_ADC_Start_DMA+0x100>)
 8002c70:	631a      	str	r2, [r3, #48]	; 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8002c72:	68fb      	ldr	r3, [r7, #12]
 8002c74:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002c76:	4a1e      	ldr	r2, [pc, #120]	; (8002cf0 <HAL_ADC_Start_DMA+0x104>)
 8002c78:	635a      	str	r2, [r3, #52]	; 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8002c7a:	68fb      	ldr	r3, [r7, #12]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	221c      	movs	r2, #28
 8002c80:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8002c82:	68fb      	ldr	r3, [r7, #12]
 8002c84:	2200      	movs	r2, #0
 8002c86:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8002c8a:	68fb      	ldr	r3, [r7, #12]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	685a      	ldr	r2, [r3, #4]
 8002c90:	68fb      	ldr	r3, [r7, #12]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	f042 0210 	orr.w	r2, r2, #16
 8002c98:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8002c9a:	68fb      	ldr	r3, [r7, #12]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	68da      	ldr	r2, [r3, #12]
 8002ca0:	68fb      	ldr	r3, [r7, #12]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	f042 0201 	orr.w	r2, r2, #1
 8002ca8:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8002caa:	68fb      	ldr	r3, [r7, #12]
 8002cac:	6d18      	ldr	r0, [r3, #80]	; 0x50
 8002cae:	68fb      	ldr	r3, [r7, #12]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	3340      	adds	r3, #64	; 0x40
 8002cb4:	4619      	mov	r1, r3
 8002cb6:	68ba      	ldr	r2, [r7, #8]
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	f001 f805 	bl	8003cc8 <HAL_DMA_Start_IT>
 8002cbe:	4603      	mov	r3, r0
 8002cc0:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8002cc2:	68fb      	ldr	r3, [r7, #12]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	4618      	mov	r0, r3
 8002cc8:	f7ff fe0a 	bl	80028e0 <LL_ADC_REG_StartConversion>
 8002ccc:	e006      	b.n	8002cdc <HAL_ADC_Start_DMA+0xf0>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8002cce:	68fb      	ldr	r3, [r7, #12]
 8002cd0:	2200      	movs	r2, #0
 8002cd2:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
 8002cd6:	e001      	b.n	8002cdc <HAL_ADC_Start_DMA+0xf0>
    }
#endif
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8002cd8:	2302      	movs	r3, #2
 8002cda:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8002cdc:	7dfb      	ldrb	r3, [r7, #23]
}
 8002cde:	4618      	mov	r0, r3
 8002ce0:	3718      	adds	r7, #24
 8002ce2:	46bd      	mov	sp, r7
 8002ce4:	bd80      	pop	{r7, pc}
 8002ce6:	bf00      	nop
 8002ce8:	080036f3 	.word	0x080036f3
 8002cec:	080037cb 	.word	0x080037cb
 8002cf0:	080037e7 	.word	0x080037e7

08002cf4 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8002cf4:	b480      	push	{r7}
 8002cf6:	b083      	sub	sp, #12
 8002cf8:	af00      	add	r7, sp, #0
 8002cfa:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8002cfc:	bf00      	nop
 8002cfe:	370c      	adds	r7, #12
 8002d00:	46bd      	mov	sp, r7
 8002d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d06:	4770      	bx	lr

08002d08 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8002d08:	b480      	push	{r7}
 8002d0a:	b083      	sub	sp, #12
 8002d0c:	af00      	add	r7, sp, #0
 8002d0e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8002d10:	bf00      	nop
 8002d12:	370c      	adds	r7, #12
 8002d14:	46bd      	mov	sp, r7
 8002d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d1a:	4770      	bx	lr

08002d1c <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8002d1c:	b480      	push	{r7}
 8002d1e:	b083      	sub	sp, #12
 8002d20:	af00      	add	r7, sp, #0
 8002d22:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8002d24:	bf00      	nop
 8002d26:	370c      	adds	r7, #12
 8002d28:	46bd      	mov	sp, r7
 8002d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d2e:	4770      	bx	lr

08002d30 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8002d30:	b580      	push	{r7, lr}
 8002d32:	b0b6      	sub	sp, #216	; 0xd8
 8002d34:	af00      	add	r7, sp, #0
 8002d36:	6078      	str	r0, [r7, #4]
 8002d38:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002d3a:	2300      	movs	r3, #0
 8002d3c:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8002d40:	2300      	movs	r3, #0
 8002d42:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8002d4a:	2b01      	cmp	r3, #1
 8002d4c:	d101      	bne.n	8002d52 <HAL_ADC_ConfigChannel+0x22>
 8002d4e:	2302      	movs	r3, #2
 8002d50:	e3d5      	b.n	80034fe <HAL_ADC_ConfigChannel+0x7ce>
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	2201      	movs	r2, #1
 8002d56:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	4618      	mov	r0, r3
 8002d60:	f7ff fdd2 	bl	8002908 <LL_ADC_REG_IsConversionOngoing>
 8002d64:	4603      	mov	r3, r0
 8002d66:	2b00      	cmp	r3, #0
 8002d68:	f040 83ba 	bne.w	80034e0 <HAL_ADC_ConfigChannel+0x7b0>
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (sConfig->Rank <= 5U)
 8002d6c:	683b      	ldr	r3, [r7, #0]
 8002d6e:	685b      	ldr	r3, [r3, #4]
 8002d70:	2b05      	cmp	r3, #5
 8002d72:	d824      	bhi.n	8002dbe <HAL_ADC_ConfigChannel+0x8e>
    {
      switch (sConfig->Rank)
 8002d74:	683b      	ldr	r3, [r7, #0]
 8002d76:	685b      	ldr	r3, [r3, #4]
 8002d78:	3b02      	subs	r3, #2
 8002d7a:	2b03      	cmp	r3, #3
 8002d7c:	d81b      	bhi.n	8002db6 <HAL_ADC_ConfigChannel+0x86>
 8002d7e:	a201      	add	r2, pc, #4	; (adr r2, 8002d84 <HAL_ADC_ConfigChannel+0x54>)
 8002d80:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002d84:	08002d95 	.word	0x08002d95
 8002d88:	08002d9d 	.word	0x08002d9d
 8002d8c:	08002da5 	.word	0x08002da5
 8002d90:	08002dad 	.word	0x08002dad
      {
        case 2U:
          sConfig->Rank = ADC_REGULAR_RANK_2;
 8002d94:	683b      	ldr	r3, [r7, #0]
 8002d96:	220c      	movs	r2, #12
 8002d98:	605a      	str	r2, [r3, #4]
          break;
 8002d9a:	e011      	b.n	8002dc0 <HAL_ADC_ConfigChannel+0x90>
        case 3U:
          sConfig->Rank = ADC_REGULAR_RANK_3;
 8002d9c:	683b      	ldr	r3, [r7, #0]
 8002d9e:	2212      	movs	r2, #18
 8002da0:	605a      	str	r2, [r3, #4]
          break;
 8002da2:	e00d      	b.n	8002dc0 <HAL_ADC_ConfigChannel+0x90>
        case 4U:
          sConfig->Rank = ADC_REGULAR_RANK_4;
 8002da4:	683b      	ldr	r3, [r7, #0]
 8002da6:	2218      	movs	r2, #24
 8002da8:	605a      	str	r2, [r3, #4]
          break;
 8002daa:	e009      	b.n	8002dc0 <HAL_ADC_ConfigChannel+0x90>
        case 5U:
          sConfig->Rank = ADC_REGULAR_RANK_5;
 8002dac:	683b      	ldr	r3, [r7, #0]
 8002dae:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002db2:	605a      	str	r2, [r3, #4]
          break;
 8002db4:	e004      	b.n	8002dc0 <HAL_ADC_ConfigChannel+0x90>
        /* case 1U */
        default:
          sConfig->Rank = ADC_REGULAR_RANK_1;
 8002db6:	683b      	ldr	r3, [r7, #0]
 8002db8:	2206      	movs	r2, #6
 8002dba:	605a      	str	r2, [r3, #4]
          break;
 8002dbc:	e000      	b.n	8002dc0 <HAL_ADC_ConfigChannel+0x90>
      }
    }
 8002dbe:	bf00      	nop
#endif

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	6818      	ldr	r0, [r3, #0]
 8002dc4:	683b      	ldr	r3, [r7, #0]
 8002dc6:	6859      	ldr	r1, [r3, #4]
 8002dc8:	683b      	ldr	r3, [r7, #0]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	461a      	mov	r2, r3
 8002dce:	f7ff fc70 	bl	80026b2 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	4618      	mov	r0, r3
 8002dd8:	f7ff fd96 	bl	8002908 <LL_ADC_REG_IsConversionOngoing>
 8002ddc:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	4618      	mov	r0, r3
 8002de6:	f7ff fda2 	bl	800292e <LL_ADC_INJ_IsConversionOngoing>
 8002dea:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002dee:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	f040 81c1 	bne.w	800317a <HAL_ADC_ConfigChannel+0x44a>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002df8:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8002dfc:	2b00      	cmp	r3, #0
 8002dfe:	f040 81bc 	bne.w	800317a <HAL_ADC_ConfigChannel+0x44a>
       )
    {
#if defined(ADC_SMPR1_SMPPLUS)
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (sConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8002e02:	683b      	ldr	r3, [r7, #0]
 8002e04:	689b      	ldr	r3, [r3, #8]
 8002e06:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002e0a:	d10f      	bne.n	8002e2c <HAL_ADC_ConfigChannel+0xfc>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	6818      	ldr	r0, [r3, #0]
 8002e10:	683b      	ldr	r3, [r7, #0]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	2200      	movs	r2, #0
 8002e16:	4619      	mov	r1, r3
 8002e18:	f7ff fc77 	bl	800270a <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 8002e24:	4618      	mov	r0, r3
 8002e26:	f7ff fc1e 	bl	8002666 <LL_ADC_SetSamplingTimeCommonConfig>
 8002e2a:	e00e      	b.n	8002e4a <HAL_ADC_ConfigChannel+0x11a>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	6818      	ldr	r0, [r3, #0]
 8002e30:	683b      	ldr	r3, [r7, #0]
 8002e32:	6819      	ldr	r1, [r3, #0]
 8002e34:	683b      	ldr	r3, [r7, #0]
 8002e36:	689b      	ldr	r3, [r3, #8]
 8002e38:	461a      	mov	r2, r3
 8002e3a:	f7ff fc66 	bl	800270a <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	2100      	movs	r1, #0
 8002e44:	4618      	mov	r0, r3
 8002e46:	f7ff fc0e 	bl	8002666 <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8002e4a:	683b      	ldr	r3, [r7, #0]
 8002e4c:	695a      	ldr	r2, [r3, #20]
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	68db      	ldr	r3, [r3, #12]
 8002e54:	08db      	lsrs	r3, r3, #3
 8002e56:	f003 0303 	and.w	r3, r3, #3
 8002e5a:	005b      	lsls	r3, r3, #1
 8002e5c:	fa02 f303 	lsl.w	r3, r2, r3
 8002e60:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8002e64:	683b      	ldr	r3, [r7, #0]
 8002e66:	691b      	ldr	r3, [r3, #16]
 8002e68:	2b04      	cmp	r3, #4
 8002e6a:	d00a      	beq.n	8002e82 <HAL_ADC_ConfigChannel+0x152>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	6818      	ldr	r0, [r3, #0]
 8002e70:	683b      	ldr	r3, [r7, #0]
 8002e72:	6919      	ldr	r1, [r3, #16]
 8002e74:	683b      	ldr	r3, [r7, #0]
 8002e76:	681a      	ldr	r2, [r3, #0]
 8002e78:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8002e7c:	f7ff fb9e 	bl	80025bc <LL_ADC_SetOffset>
 8002e80:	e17b      	b.n	800317a <HAL_ADC_ConfigChannel+0x44a>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	2100      	movs	r1, #0
 8002e88:	4618      	mov	r0, r3
 8002e8a:	f7ff fbbb 	bl	8002604 <LL_ADC_GetOffsetChannel>
 8002e8e:	4603      	mov	r3, r0
 8002e90:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002e94:	2b00      	cmp	r3, #0
 8002e96:	d10a      	bne.n	8002eae <HAL_ADC_ConfigChannel+0x17e>
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	2100      	movs	r1, #0
 8002e9e:	4618      	mov	r0, r3
 8002ea0:	f7ff fbb0 	bl	8002604 <LL_ADC_GetOffsetChannel>
 8002ea4:	4603      	mov	r3, r0
 8002ea6:	0e9b      	lsrs	r3, r3, #26
 8002ea8:	f003 021f 	and.w	r2, r3, #31
 8002eac:	e01e      	b.n	8002eec <HAL_ADC_ConfigChannel+0x1bc>
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	2100      	movs	r1, #0
 8002eb4:	4618      	mov	r0, r3
 8002eb6:	f7ff fba5 	bl	8002604 <LL_ADC_GetOffsetChannel>
 8002eba:	4603      	mov	r3, r0
 8002ebc:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ec0:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8002ec4:	fa93 f3a3 	rbit	r3, r3
 8002ec8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002ecc:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8002ed0:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8002ed4:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002ed8:	2b00      	cmp	r3, #0
 8002eda:	d101      	bne.n	8002ee0 <HAL_ADC_ConfigChannel+0x1b0>
  {
    return 32U;
 8002edc:	2320      	movs	r3, #32
 8002ede:	e004      	b.n	8002eea <HAL_ADC_ConfigChannel+0x1ba>
  }
  return __builtin_clz(value);
 8002ee0:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002ee4:	fab3 f383 	clz	r3, r3
 8002ee8:	b2db      	uxtb	r3, r3
 8002eea:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002eec:	683b      	ldr	r3, [r7, #0]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002ef4:	2b00      	cmp	r3, #0
 8002ef6:	d105      	bne.n	8002f04 <HAL_ADC_ConfigChannel+0x1d4>
 8002ef8:	683b      	ldr	r3, [r7, #0]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	0e9b      	lsrs	r3, r3, #26
 8002efe:	f003 031f 	and.w	r3, r3, #31
 8002f02:	e018      	b.n	8002f36 <HAL_ADC_ConfigChannel+0x206>
 8002f04:	683b      	ldr	r3, [r7, #0]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f0c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8002f10:	fa93 f3a3 	rbit	r3, r3
 8002f14:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 8002f18:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002f1c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 8002f20:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8002f24:	2b00      	cmp	r3, #0
 8002f26:	d101      	bne.n	8002f2c <HAL_ADC_ConfigChannel+0x1fc>
    return 32U;
 8002f28:	2320      	movs	r3, #32
 8002f2a:	e004      	b.n	8002f36 <HAL_ADC_ConfigChannel+0x206>
  return __builtin_clz(value);
 8002f2c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8002f30:	fab3 f383 	clz	r3, r3
 8002f34:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002f36:	429a      	cmp	r2, r3
 8002f38:	d106      	bne.n	8002f48 <HAL_ADC_ConfigChannel+0x218>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	2200      	movs	r2, #0
 8002f40:	2100      	movs	r1, #0
 8002f42:	4618      	mov	r0, r3
 8002f44:	f7ff fb74 	bl	8002630 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	2101      	movs	r1, #1
 8002f4e:	4618      	mov	r0, r3
 8002f50:	f7ff fb58 	bl	8002604 <LL_ADC_GetOffsetChannel>
 8002f54:	4603      	mov	r3, r0
 8002f56:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002f5a:	2b00      	cmp	r3, #0
 8002f5c:	d10a      	bne.n	8002f74 <HAL_ADC_ConfigChannel+0x244>
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	2101      	movs	r1, #1
 8002f64:	4618      	mov	r0, r3
 8002f66:	f7ff fb4d 	bl	8002604 <LL_ADC_GetOffsetChannel>
 8002f6a:	4603      	mov	r3, r0
 8002f6c:	0e9b      	lsrs	r3, r3, #26
 8002f6e:	f003 021f 	and.w	r2, r3, #31
 8002f72:	e01e      	b.n	8002fb2 <HAL_ADC_ConfigChannel+0x282>
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	2101      	movs	r1, #1
 8002f7a:	4618      	mov	r0, r3
 8002f7c:	f7ff fb42 	bl	8002604 <LL_ADC_GetOffsetChannel>
 8002f80:	4603      	mov	r3, r0
 8002f82:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f86:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8002f8a:	fa93 f3a3 	rbit	r3, r3
 8002f8e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 8002f92:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8002f96:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 8002f9a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8002f9e:	2b00      	cmp	r3, #0
 8002fa0:	d101      	bne.n	8002fa6 <HAL_ADC_ConfigChannel+0x276>
    return 32U;
 8002fa2:	2320      	movs	r3, #32
 8002fa4:	e004      	b.n	8002fb0 <HAL_ADC_ConfigChannel+0x280>
  return __builtin_clz(value);
 8002fa6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8002faa:	fab3 f383 	clz	r3, r3
 8002fae:	b2db      	uxtb	r3, r3
 8002fb0:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002fb2:	683b      	ldr	r3, [r7, #0]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002fba:	2b00      	cmp	r3, #0
 8002fbc:	d105      	bne.n	8002fca <HAL_ADC_ConfigChannel+0x29a>
 8002fbe:	683b      	ldr	r3, [r7, #0]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	0e9b      	lsrs	r3, r3, #26
 8002fc4:	f003 031f 	and.w	r3, r3, #31
 8002fc8:	e018      	b.n	8002ffc <HAL_ADC_ConfigChannel+0x2cc>
 8002fca:	683b      	ldr	r3, [r7, #0]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002fd2:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002fd6:	fa93 f3a3 	rbit	r3, r3
 8002fda:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 8002fde:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8002fe2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 8002fe6:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	d101      	bne.n	8002ff2 <HAL_ADC_ConfigChannel+0x2c2>
    return 32U;
 8002fee:	2320      	movs	r3, #32
 8002ff0:	e004      	b.n	8002ffc <HAL_ADC_ConfigChannel+0x2cc>
  return __builtin_clz(value);
 8002ff2:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002ff6:	fab3 f383 	clz	r3, r3
 8002ffa:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002ffc:	429a      	cmp	r2, r3
 8002ffe:	d106      	bne.n	800300e <HAL_ADC_ConfigChannel+0x2de>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	2200      	movs	r2, #0
 8003006:	2101      	movs	r1, #1
 8003008:	4618      	mov	r0, r3
 800300a:	f7ff fb11 	bl	8002630 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	2102      	movs	r1, #2
 8003014:	4618      	mov	r0, r3
 8003016:	f7ff faf5 	bl	8002604 <LL_ADC_GetOffsetChannel>
 800301a:	4603      	mov	r3, r0
 800301c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003020:	2b00      	cmp	r3, #0
 8003022:	d10a      	bne.n	800303a <HAL_ADC_ConfigChannel+0x30a>
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	2102      	movs	r1, #2
 800302a:	4618      	mov	r0, r3
 800302c:	f7ff faea 	bl	8002604 <LL_ADC_GetOffsetChannel>
 8003030:	4603      	mov	r3, r0
 8003032:	0e9b      	lsrs	r3, r3, #26
 8003034:	f003 021f 	and.w	r2, r3, #31
 8003038:	e01e      	b.n	8003078 <HAL_ADC_ConfigChannel+0x348>
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	2102      	movs	r1, #2
 8003040:	4618      	mov	r0, r3
 8003042:	f7ff fadf 	bl	8002604 <LL_ADC_GetOffsetChannel>
 8003046:	4603      	mov	r3, r0
 8003048:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800304c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003050:	fa93 f3a3 	rbit	r3, r3
 8003054:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 8003058:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800305c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 8003060:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8003064:	2b00      	cmp	r3, #0
 8003066:	d101      	bne.n	800306c <HAL_ADC_ConfigChannel+0x33c>
    return 32U;
 8003068:	2320      	movs	r3, #32
 800306a:	e004      	b.n	8003076 <HAL_ADC_ConfigChannel+0x346>
  return __builtin_clz(value);
 800306c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8003070:	fab3 f383 	clz	r3, r3
 8003074:	b2db      	uxtb	r3, r3
 8003076:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8003078:	683b      	ldr	r3, [r7, #0]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003080:	2b00      	cmp	r3, #0
 8003082:	d105      	bne.n	8003090 <HAL_ADC_ConfigChannel+0x360>
 8003084:	683b      	ldr	r3, [r7, #0]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	0e9b      	lsrs	r3, r3, #26
 800308a:	f003 031f 	and.w	r3, r3, #31
 800308e:	e016      	b.n	80030be <HAL_ADC_ConfigChannel+0x38e>
 8003090:	683b      	ldr	r3, [r7, #0]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003098:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800309c:	fa93 f3a3 	rbit	r3, r3
 80030a0:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 80030a2:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80030a4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 80030a8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80030ac:	2b00      	cmp	r3, #0
 80030ae:	d101      	bne.n	80030b4 <HAL_ADC_ConfigChannel+0x384>
    return 32U;
 80030b0:	2320      	movs	r3, #32
 80030b2:	e004      	b.n	80030be <HAL_ADC_ConfigChannel+0x38e>
  return __builtin_clz(value);
 80030b4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80030b8:	fab3 f383 	clz	r3, r3
 80030bc:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80030be:	429a      	cmp	r2, r3
 80030c0:	d106      	bne.n	80030d0 <HAL_ADC_ConfigChannel+0x3a0>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	2200      	movs	r2, #0
 80030c8:	2102      	movs	r1, #2
 80030ca:	4618      	mov	r0, r3
 80030cc:	f7ff fab0 	bl	8002630 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	2103      	movs	r1, #3
 80030d6:	4618      	mov	r0, r3
 80030d8:	f7ff fa94 	bl	8002604 <LL_ADC_GetOffsetChannel>
 80030dc:	4603      	mov	r3, r0
 80030de:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80030e2:	2b00      	cmp	r3, #0
 80030e4:	d10a      	bne.n	80030fc <HAL_ADC_ConfigChannel+0x3cc>
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	2103      	movs	r1, #3
 80030ec:	4618      	mov	r0, r3
 80030ee:	f7ff fa89 	bl	8002604 <LL_ADC_GetOffsetChannel>
 80030f2:	4603      	mov	r3, r0
 80030f4:	0e9b      	lsrs	r3, r3, #26
 80030f6:	f003 021f 	and.w	r2, r3, #31
 80030fa:	e017      	b.n	800312c <HAL_ADC_ConfigChannel+0x3fc>
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	2103      	movs	r1, #3
 8003102:	4618      	mov	r0, r3
 8003104:	f7ff fa7e 	bl	8002604 <LL_ADC_GetOffsetChannel>
 8003108:	4603      	mov	r3, r0
 800310a:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800310c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800310e:	fa93 f3a3 	rbit	r3, r3
 8003112:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 8003114:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003116:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 8003118:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800311a:	2b00      	cmp	r3, #0
 800311c:	d101      	bne.n	8003122 <HAL_ADC_ConfigChannel+0x3f2>
    return 32U;
 800311e:	2320      	movs	r3, #32
 8003120:	e003      	b.n	800312a <HAL_ADC_ConfigChannel+0x3fa>
  return __builtin_clz(value);
 8003122:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003124:	fab3 f383 	clz	r3, r3
 8003128:	b2db      	uxtb	r3, r3
 800312a:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800312c:	683b      	ldr	r3, [r7, #0]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003134:	2b00      	cmp	r3, #0
 8003136:	d105      	bne.n	8003144 <HAL_ADC_ConfigChannel+0x414>
 8003138:	683b      	ldr	r3, [r7, #0]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	0e9b      	lsrs	r3, r3, #26
 800313e:	f003 031f 	and.w	r3, r3, #31
 8003142:	e011      	b.n	8003168 <HAL_ADC_ConfigChannel+0x438>
 8003144:	683b      	ldr	r3, [r7, #0]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800314a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800314c:	fa93 f3a3 	rbit	r3, r3
 8003150:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 8003152:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003154:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 8003156:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003158:	2b00      	cmp	r3, #0
 800315a:	d101      	bne.n	8003160 <HAL_ADC_ConfigChannel+0x430>
    return 32U;
 800315c:	2320      	movs	r3, #32
 800315e:	e003      	b.n	8003168 <HAL_ADC_ConfigChannel+0x438>
  return __builtin_clz(value);
 8003160:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003162:	fab3 f383 	clz	r3, r3
 8003166:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8003168:	429a      	cmp	r2, r3
 800316a:	d106      	bne.n	800317a <HAL_ADC_ConfigChannel+0x44a>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	2200      	movs	r2, #0
 8003172:	2103      	movs	r1, #3
 8003174:	4618      	mov	r0, r3
 8003176:	f7ff fa5b 	bl	8002630 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	4618      	mov	r0, r3
 8003180:	f7ff fb88 	bl	8002894 <LL_ADC_IsEnabled>
 8003184:	4603      	mov	r3, r0
 8003186:	2b00      	cmp	r3, #0
 8003188:	f040 8140 	bne.w	800340c <HAL_ADC_ConfigChannel+0x6dc>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	6818      	ldr	r0, [r3, #0]
 8003190:	683b      	ldr	r3, [r7, #0]
 8003192:	6819      	ldr	r1, [r3, #0]
 8003194:	683b      	ldr	r3, [r7, #0]
 8003196:	68db      	ldr	r3, [r3, #12]
 8003198:	461a      	mov	r2, r3
 800319a:	f7ff fae1 	bl	8002760 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 800319e:	683b      	ldr	r3, [r7, #0]
 80031a0:	68db      	ldr	r3, [r3, #12]
 80031a2:	4a8f      	ldr	r2, [pc, #572]	; (80033e0 <HAL_ADC_ConfigChannel+0x6b0>)
 80031a4:	4293      	cmp	r3, r2
 80031a6:	f040 8131 	bne.w	800340c <HAL_ADC_ConfigChannel+0x6dc>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80031ae:	683b      	ldr	r3, [r7, #0]
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80031b6:	2b00      	cmp	r3, #0
 80031b8:	d10b      	bne.n	80031d2 <HAL_ADC_ConfigChannel+0x4a2>
 80031ba:	683b      	ldr	r3, [r7, #0]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	0e9b      	lsrs	r3, r3, #26
 80031c0:	3301      	adds	r3, #1
 80031c2:	f003 031f 	and.w	r3, r3, #31
 80031c6:	2b09      	cmp	r3, #9
 80031c8:	bf94      	ite	ls
 80031ca:	2301      	movls	r3, #1
 80031cc:	2300      	movhi	r3, #0
 80031ce:	b2db      	uxtb	r3, r3
 80031d0:	e019      	b.n	8003206 <HAL_ADC_ConfigChannel+0x4d6>
 80031d2:	683b      	ldr	r3, [r7, #0]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80031d8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80031da:	fa93 f3a3 	rbit	r3, r3
 80031de:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 80031e0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80031e2:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 80031e4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80031e6:	2b00      	cmp	r3, #0
 80031e8:	d101      	bne.n	80031ee <HAL_ADC_ConfigChannel+0x4be>
    return 32U;
 80031ea:	2320      	movs	r3, #32
 80031ec:	e003      	b.n	80031f6 <HAL_ADC_ConfigChannel+0x4c6>
  return __builtin_clz(value);
 80031ee:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80031f0:	fab3 f383 	clz	r3, r3
 80031f4:	b2db      	uxtb	r3, r3
 80031f6:	3301      	adds	r3, #1
 80031f8:	f003 031f 	and.w	r3, r3, #31
 80031fc:	2b09      	cmp	r3, #9
 80031fe:	bf94      	ite	ls
 8003200:	2301      	movls	r3, #1
 8003202:	2300      	movhi	r3, #0
 8003204:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003206:	2b00      	cmp	r3, #0
 8003208:	d079      	beq.n	80032fe <HAL_ADC_ConfigChannel+0x5ce>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 800320a:	683b      	ldr	r3, [r7, #0]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003212:	2b00      	cmp	r3, #0
 8003214:	d107      	bne.n	8003226 <HAL_ADC_ConfigChannel+0x4f6>
 8003216:	683b      	ldr	r3, [r7, #0]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	0e9b      	lsrs	r3, r3, #26
 800321c:	3301      	adds	r3, #1
 800321e:	069b      	lsls	r3, r3, #26
 8003220:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003224:	e015      	b.n	8003252 <HAL_ADC_ConfigChannel+0x522>
 8003226:	683b      	ldr	r3, [r7, #0]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800322c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800322e:	fa93 f3a3 	rbit	r3, r3
 8003232:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8003234:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003236:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 8003238:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800323a:	2b00      	cmp	r3, #0
 800323c:	d101      	bne.n	8003242 <HAL_ADC_ConfigChannel+0x512>
    return 32U;
 800323e:	2320      	movs	r3, #32
 8003240:	e003      	b.n	800324a <HAL_ADC_ConfigChannel+0x51a>
  return __builtin_clz(value);
 8003242:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003244:	fab3 f383 	clz	r3, r3
 8003248:	b2db      	uxtb	r3, r3
 800324a:	3301      	adds	r3, #1
 800324c:	069b      	lsls	r3, r3, #26
 800324e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003252:	683b      	ldr	r3, [r7, #0]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800325a:	2b00      	cmp	r3, #0
 800325c:	d109      	bne.n	8003272 <HAL_ADC_ConfigChannel+0x542>
 800325e:	683b      	ldr	r3, [r7, #0]
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	0e9b      	lsrs	r3, r3, #26
 8003264:	3301      	adds	r3, #1
 8003266:	f003 031f 	and.w	r3, r3, #31
 800326a:	2101      	movs	r1, #1
 800326c:	fa01 f303 	lsl.w	r3, r1, r3
 8003270:	e017      	b.n	80032a2 <HAL_ADC_ConfigChannel+0x572>
 8003272:	683b      	ldr	r3, [r7, #0]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003278:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800327a:	fa93 f3a3 	rbit	r3, r3
 800327e:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 8003280:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003282:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 8003284:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003286:	2b00      	cmp	r3, #0
 8003288:	d101      	bne.n	800328e <HAL_ADC_ConfigChannel+0x55e>
    return 32U;
 800328a:	2320      	movs	r3, #32
 800328c:	e003      	b.n	8003296 <HAL_ADC_ConfigChannel+0x566>
  return __builtin_clz(value);
 800328e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003290:	fab3 f383 	clz	r3, r3
 8003294:	b2db      	uxtb	r3, r3
 8003296:	3301      	adds	r3, #1
 8003298:	f003 031f 	and.w	r3, r3, #31
 800329c:	2101      	movs	r1, #1
 800329e:	fa01 f303 	lsl.w	r3, r1, r3
 80032a2:	ea42 0103 	orr.w	r1, r2, r3
 80032a6:	683b      	ldr	r3, [r7, #0]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80032ae:	2b00      	cmp	r3, #0
 80032b0:	d10a      	bne.n	80032c8 <HAL_ADC_ConfigChannel+0x598>
 80032b2:	683b      	ldr	r3, [r7, #0]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	0e9b      	lsrs	r3, r3, #26
 80032b8:	3301      	adds	r3, #1
 80032ba:	f003 021f 	and.w	r2, r3, #31
 80032be:	4613      	mov	r3, r2
 80032c0:	005b      	lsls	r3, r3, #1
 80032c2:	4413      	add	r3, r2
 80032c4:	051b      	lsls	r3, r3, #20
 80032c6:	e018      	b.n	80032fa <HAL_ADC_ConfigChannel+0x5ca>
 80032c8:	683b      	ldr	r3, [r7, #0]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80032ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80032d0:	fa93 f3a3 	rbit	r3, r3
 80032d4:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 80032d6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80032d8:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 80032da:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80032dc:	2b00      	cmp	r3, #0
 80032de:	d101      	bne.n	80032e4 <HAL_ADC_ConfigChannel+0x5b4>
    return 32U;
 80032e0:	2320      	movs	r3, #32
 80032e2:	e003      	b.n	80032ec <HAL_ADC_ConfigChannel+0x5bc>
  return __builtin_clz(value);
 80032e4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80032e6:	fab3 f383 	clz	r3, r3
 80032ea:	b2db      	uxtb	r3, r3
 80032ec:	3301      	adds	r3, #1
 80032ee:	f003 021f 	and.w	r2, r3, #31
 80032f2:	4613      	mov	r3, r2
 80032f4:	005b      	lsls	r3, r3, #1
 80032f6:	4413      	add	r3, r2
 80032f8:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80032fa:	430b      	orrs	r3, r1
 80032fc:	e081      	b.n	8003402 <HAL_ADC_ConfigChannel+0x6d2>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80032fe:	683b      	ldr	r3, [r7, #0]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003306:	2b00      	cmp	r3, #0
 8003308:	d107      	bne.n	800331a <HAL_ADC_ConfigChannel+0x5ea>
 800330a:	683b      	ldr	r3, [r7, #0]
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	0e9b      	lsrs	r3, r3, #26
 8003310:	3301      	adds	r3, #1
 8003312:	069b      	lsls	r3, r3, #26
 8003314:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003318:	e015      	b.n	8003346 <HAL_ADC_ConfigChannel+0x616>
 800331a:	683b      	ldr	r3, [r7, #0]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003320:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003322:	fa93 f3a3 	rbit	r3, r3
 8003326:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 8003328:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800332a:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 800332c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800332e:	2b00      	cmp	r3, #0
 8003330:	d101      	bne.n	8003336 <HAL_ADC_ConfigChannel+0x606>
    return 32U;
 8003332:	2320      	movs	r3, #32
 8003334:	e003      	b.n	800333e <HAL_ADC_ConfigChannel+0x60e>
  return __builtin_clz(value);
 8003336:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003338:	fab3 f383 	clz	r3, r3
 800333c:	b2db      	uxtb	r3, r3
 800333e:	3301      	adds	r3, #1
 8003340:	069b      	lsls	r3, r3, #26
 8003342:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003346:	683b      	ldr	r3, [r7, #0]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800334e:	2b00      	cmp	r3, #0
 8003350:	d109      	bne.n	8003366 <HAL_ADC_ConfigChannel+0x636>
 8003352:	683b      	ldr	r3, [r7, #0]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	0e9b      	lsrs	r3, r3, #26
 8003358:	3301      	adds	r3, #1
 800335a:	f003 031f 	and.w	r3, r3, #31
 800335e:	2101      	movs	r1, #1
 8003360:	fa01 f303 	lsl.w	r3, r1, r3
 8003364:	e017      	b.n	8003396 <HAL_ADC_ConfigChannel+0x666>
 8003366:	683b      	ldr	r3, [r7, #0]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800336c:	6a3b      	ldr	r3, [r7, #32]
 800336e:	fa93 f3a3 	rbit	r3, r3
 8003372:	61fb      	str	r3, [r7, #28]
  return result;
 8003374:	69fb      	ldr	r3, [r7, #28]
 8003376:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8003378:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800337a:	2b00      	cmp	r3, #0
 800337c:	d101      	bne.n	8003382 <HAL_ADC_ConfigChannel+0x652>
    return 32U;
 800337e:	2320      	movs	r3, #32
 8003380:	e003      	b.n	800338a <HAL_ADC_ConfigChannel+0x65a>
  return __builtin_clz(value);
 8003382:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003384:	fab3 f383 	clz	r3, r3
 8003388:	b2db      	uxtb	r3, r3
 800338a:	3301      	adds	r3, #1
 800338c:	f003 031f 	and.w	r3, r3, #31
 8003390:	2101      	movs	r1, #1
 8003392:	fa01 f303 	lsl.w	r3, r1, r3
 8003396:	ea42 0103 	orr.w	r1, r2, r3
 800339a:	683b      	ldr	r3, [r7, #0]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80033a2:	2b00      	cmp	r3, #0
 80033a4:	d10d      	bne.n	80033c2 <HAL_ADC_ConfigChannel+0x692>
 80033a6:	683b      	ldr	r3, [r7, #0]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	0e9b      	lsrs	r3, r3, #26
 80033ac:	3301      	adds	r3, #1
 80033ae:	f003 021f 	and.w	r2, r3, #31
 80033b2:	4613      	mov	r3, r2
 80033b4:	005b      	lsls	r3, r3, #1
 80033b6:	4413      	add	r3, r2
 80033b8:	3b1e      	subs	r3, #30
 80033ba:	051b      	lsls	r3, r3, #20
 80033bc:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80033c0:	e01e      	b.n	8003400 <HAL_ADC_ConfigChannel+0x6d0>
 80033c2:	683b      	ldr	r3, [r7, #0]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80033c8:	697b      	ldr	r3, [r7, #20]
 80033ca:	fa93 f3a3 	rbit	r3, r3
 80033ce:	613b      	str	r3, [r7, #16]
  return result;
 80033d0:	693b      	ldr	r3, [r7, #16]
 80033d2:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 80033d4:	69bb      	ldr	r3, [r7, #24]
 80033d6:	2b00      	cmp	r3, #0
 80033d8:	d104      	bne.n	80033e4 <HAL_ADC_ConfigChannel+0x6b4>
    return 32U;
 80033da:	2320      	movs	r3, #32
 80033dc:	e006      	b.n	80033ec <HAL_ADC_ConfigChannel+0x6bc>
 80033de:	bf00      	nop
 80033e0:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 80033e4:	69bb      	ldr	r3, [r7, #24]
 80033e6:	fab3 f383 	clz	r3, r3
 80033ea:	b2db      	uxtb	r3, r3
 80033ec:	3301      	adds	r3, #1
 80033ee:	f003 021f 	and.w	r2, r3, #31
 80033f2:	4613      	mov	r3, r2
 80033f4:	005b      	lsls	r3, r3, #1
 80033f6:	4413      	add	r3, r2
 80033f8:	3b1e      	subs	r3, #30
 80033fa:	051b      	lsls	r3, r3, #20
 80033fc:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003400:	430b      	orrs	r3, r1
 8003402:	683a      	ldr	r2, [r7, #0]
 8003404:	6892      	ldr	r2, [r2, #8]
 8003406:	4619      	mov	r1, r3
 8003408:	f7ff f97f 	bl	800270a <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 800340c:	683b      	ldr	r3, [r7, #0]
 800340e:	681a      	ldr	r2, [r3, #0]
 8003410:	4b3d      	ldr	r3, [pc, #244]	; (8003508 <HAL_ADC_ConfigChannel+0x7d8>)
 8003412:	4013      	ands	r3, r2
 8003414:	2b00      	cmp	r3, #0
 8003416:	d06c      	beq.n	80034f2 <HAL_ADC_ConfigChannel+0x7c2>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003418:	483c      	ldr	r0, [pc, #240]	; (800350c <HAL_ADC_ConfigChannel+0x7dc>)
 800341a:	f7ff f8c1 	bl	80025a0 <LL_ADC_GetCommonPathInternalCh>
 800341e:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003422:	683b      	ldr	r3, [r7, #0]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	4a3a      	ldr	r2, [pc, #232]	; (8003510 <HAL_ADC_ConfigChannel+0x7e0>)
 8003428:	4293      	cmp	r3, r2
 800342a:	d127      	bne.n	800347c <HAL_ADC_ConfigChannel+0x74c>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 800342c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003430:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003434:	2b00      	cmp	r3, #0
 8003436:	d121      	bne.n	800347c <HAL_ADC_ConfigChannel+0x74c>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	4a35      	ldr	r2, [pc, #212]	; (8003514 <HAL_ADC_ConfigChannel+0x7e4>)
 800343e:	4293      	cmp	r3, r2
 8003440:	d157      	bne.n	80034f2 <HAL_ADC_ConfigChannel+0x7c2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003442:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003446:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800344a:	4619      	mov	r1, r3
 800344c:	482f      	ldr	r0, [pc, #188]	; (800350c <HAL_ADC_ConfigChannel+0x7dc>)
 800344e:	f7ff f894 	bl	800257a <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003452:	4b31      	ldr	r3, [pc, #196]	; (8003518 <HAL_ADC_ConfigChannel+0x7e8>)
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	099b      	lsrs	r3, r3, #6
 8003458:	4a30      	ldr	r2, [pc, #192]	; (800351c <HAL_ADC_ConfigChannel+0x7ec>)
 800345a:	fba2 2303 	umull	r2, r3, r2, r3
 800345e:	099b      	lsrs	r3, r3, #6
 8003460:	1c5a      	adds	r2, r3, #1
 8003462:	4613      	mov	r3, r2
 8003464:	005b      	lsls	r3, r3, #1
 8003466:	4413      	add	r3, r2
 8003468:	009b      	lsls	r3, r3, #2
 800346a:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 800346c:	e002      	b.n	8003474 <HAL_ADC_ConfigChannel+0x744>
          {
            wait_loop_index--;
 800346e:	68fb      	ldr	r3, [r7, #12]
 8003470:	3b01      	subs	r3, #1
 8003472:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8003474:	68fb      	ldr	r3, [r7, #12]
 8003476:	2b00      	cmp	r3, #0
 8003478:	d1f9      	bne.n	800346e <HAL_ADC_ConfigChannel+0x73e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800347a:	e03a      	b.n	80034f2 <HAL_ADC_ConfigChannel+0x7c2>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 800347c:	683b      	ldr	r3, [r7, #0]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	4a27      	ldr	r2, [pc, #156]	; (8003520 <HAL_ADC_ConfigChannel+0x7f0>)
 8003482:	4293      	cmp	r3, r2
 8003484:	d113      	bne.n	80034ae <HAL_ADC_ConfigChannel+0x77e>
 8003486:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800348a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800348e:	2b00      	cmp	r3, #0
 8003490:	d10d      	bne.n	80034ae <HAL_ADC_ConfigChannel+0x77e>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	4a1f      	ldr	r2, [pc, #124]	; (8003514 <HAL_ADC_ConfigChannel+0x7e4>)
 8003498:	4293      	cmp	r3, r2
 800349a:	d12a      	bne.n	80034f2 <HAL_ADC_ConfigChannel+0x7c2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800349c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80034a0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80034a4:	4619      	mov	r1, r3
 80034a6:	4819      	ldr	r0, [pc, #100]	; (800350c <HAL_ADC_ConfigChannel+0x7dc>)
 80034a8:	f7ff f867 	bl	800257a <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80034ac:	e021      	b.n	80034f2 <HAL_ADC_ConfigChannel+0x7c2>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 80034ae:	683b      	ldr	r3, [r7, #0]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	4a1c      	ldr	r2, [pc, #112]	; (8003524 <HAL_ADC_ConfigChannel+0x7f4>)
 80034b4:	4293      	cmp	r3, r2
 80034b6:	d11c      	bne.n	80034f2 <HAL_ADC_ConfigChannel+0x7c2>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80034b8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80034bc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80034c0:	2b00      	cmp	r3, #0
 80034c2:	d116      	bne.n	80034f2 <HAL_ADC_ConfigChannel+0x7c2>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	4a12      	ldr	r2, [pc, #72]	; (8003514 <HAL_ADC_ConfigChannel+0x7e4>)
 80034ca:	4293      	cmp	r3, r2
 80034cc:	d111      	bne.n	80034f2 <HAL_ADC_ConfigChannel+0x7c2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80034ce:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80034d2:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80034d6:	4619      	mov	r1, r3
 80034d8:	480c      	ldr	r0, [pc, #48]	; (800350c <HAL_ADC_ConfigChannel+0x7dc>)
 80034da:	f7ff f84e 	bl	800257a <LL_ADC_SetCommonPathInternalCh>
 80034de:	e008      	b.n	80034f2 <HAL_ADC_ConfigChannel+0x7c2>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80034e4:	f043 0220 	orr.w	r2, r3, #32
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 80034ec:	2301      	movs	r3, #1
 80034ee:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	2200      	movs	r2, #0
 80034f6:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  /* Return function status */
  return tmp_hal_status;
 80034fa:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 80034fe:	4618      	mov	r0, r3
 8003500:	37d8      	adds	r7, #216	; 0xd8
 8003502:	46bd      	mov	sp, r7
 8003504:	bd80      	pop	{r7, pc}
 8003506:	bf00      	nop
 8003508:	80080000 	.word	0x80080000
 800350c:	50040300 	.word	0x50040300
 8003510:	c7520000 	.word	0xc7520000
 8003514:	50040000 	.word	0x50040000
 8003518:	20000008 	.word	0x20000008
 800351c:	053e2d63 	.word	0x053e2d63
 8003520:	cb840000 	.word	0xcb840000
 8003524:	80000001 	.word	0x80000001

08003528 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8003528:	b580      	push	{r7, lr}
 800352a:	b084      	sub	sp, #16
 800352c:	af00      	add	r7, sp, #0
 800352e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8003530:	2300      	movs	r3, #0
 8003532:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	4618      	mov	r0, r3
 800353a:	f7ff f9ab 	bl	8002894 <LL_ADC_IsEnabled>
 800353e:	4603      	mov	r3, r0
 8003540:	2b00      	cmp	r3, #0
 8003542:	d169      	bne.n	8003618 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	689a      	ldr	r2, [r3, #8]
 800354a:	4b36      	ldr	r3, [pc, #216]	; (8003624 <ADC_Enable+0xfc>)
 800354c:	4013      	ands	r3, r2
 800354e:	2b00      	cmp	r3, #0
 8003550:	d00d      	beq.n	800356e <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003556:	f043 0210 	orr.w	r2, r3, #16
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	659a      	str	r2, [r3, #88]	; 0x58

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003562:	f043 0201 	orr.w	r2, r3, #1
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	65da      	str	r2, [r3, #92]	; 0x5c

      return HAL_ERROR;
 800356a:	2301      	movs	r3, #1
 800356c:	e055      	b.n	800361a <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	4618      	mov	r0, r3
 8003574:	f7ff f966 	bl	8002844 <LL_ADC_Enable>

    if((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 8003578:	482b      	ldr	r0, [pc, #172]	; (8003628 <ADC_Enable+0x100>)
 800357a:	f7ff f811 	bl	80025a0 <LL_ADC_GetCommonPathInternalCh>
 800357e:	4603      	mov	r3, r0
 8003580:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003584:	2b00      	cmp	r3, #0
 8003586:	d013      	beq.n	80035b0 <ADC_Enable+0x88>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003588:	4b28      	ldr	r3, [pc, #160]	; (800362c <ADC_Enable+0x104>)
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	099b      	lsrs	r3, r3, #6
 800358e:	4a28      	ldr	r2, [pc, #160]	; (8003630 <ADC_Enable+0x108>)
 8003590:	fba2 2303 	umull	r2, r3, r2, r3
 8003594:	099b      	lsrs	r3, r3, #6
 8003596:	1c5a      	adds	r2, r3, #1
 8003598:	4613      	mov	r3, r2
 800359a:	005b      	lsls	r3, r3, #1
 800359c:	4413      	add	r3, r2
 800359e:	009b      	lsls	r3, r3, #2
 80035a0:	60bb      	str	r3, [r7, #8]
      while(wait_loop_index != 0UL)
 80035a2:	e002      	b.n	80035aa <ADC_Enable+0x82>
      {
        wait_loop_index--;
 80035a4:	68bb      	ldr	r3, [r7, #8]
 80035a6:	3b01      	subs	r3, #1
 80035a8:	60bb      	str	r3, [r7, #8]
      while(wait_loop_index != 0UL)
 80035aa:	68bb      	ldr	r3, [r7, #8]
 80035ac:	2b00      	cmp	r3, #0
 80035ae:	d1f9      	bne.n	80035a4 <ADC_Enable+0x7c>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 80035b0:	f7fe ffa0 	bl	80024f4 <HAL_GetTick>
 80035b4:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80035b6:	e028      	b.n	800360a <ADC_Enable+0xe2>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	4618      	mov	r0, r3
 80035be:	f7ff f969 	bl	8002894 <LL_ADC_IsEnabled>
 80035c2:	4603      	mov	r3, r0
 80035c4:	2b00      	cmp	r3, #0
 80035c6:	d104      	bne.n	80035d2 <ADC_Enable+0xaa>
      {
        LL_ADC_Enable(hadc->Instance);
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	4618      	mov	r0, r3
 80035ce:	f7ff f939 	bl	8002844 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80035d2:	f7fe ff8f 	bl	80024f4 <HAL_GetTick>
 80035d6:	4602      	mov	r2, r0
 80035d8:	68fb      	ldr	r3, [r7, #12]
 80035da:	1ad3      	subs	r3, r2, r3
 80035dc:	2b02      	cmp	r3, #2
 80035de:	d914      	bls.n	800360a <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	f003 0301 	and.w	r3, r3, #1
 80035ea:	2b01      	cmp	r3, #1
 80035ec:	d00d      	beq.n	800360a <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80035f2:	f043 0210 	orr.w	r2, r3, #16
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80035fe:	f043 0201 	orr.w	r2, r3, #1
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	65da      	str	r2, [r3, #92]	; 0x5c

          return HAL_ERROR;
 8003606:	2301      	movs	r3, #1
 8003608:	e007      	b.n	800361a <ADC_Enable+0xf2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	f003 0301 	and.w	r3, r3, #1
 8003614:	2b01      	cmp	r3, #1
 8003616:	d1cf      	bne.n	80035b8 <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8003618:	2300      	movs	r3, #0
}
 800361a:	4618      	mov	r0, r3
 800361c:	3710      	adds	r7, #16
 800361e:	46bd      	mov	sp, r7
 8003620:	bd80      	pop	{r7, pc}
 8003622:	bf00      	nop
 8003624:	8000003f 	.word	0x8000003f
 8003628:	50040300 	.word	0x50040300
 800362c:	20000008 	.word	0x20000008
 8003630:	053e2d63 	.word	0x053e2d63

08003634 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8003634:	b580      	push	{r7, lr}
 8003636:	b084      	sub	sp, #16
 8003638:	af00      	add	r7, sp, #0
 800363a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	4618      	mov	r0, r3
 8003642:	f7ff f93a 	bl	80028ba <LL_ADC_IsDisableOngoing>
 8003646:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	4618      	mov	r0, r3
 800364e:	f7ff f921 	bl	8002894 <LL_ADC_IsEnabled>
 8003652:	4603      	mov	r3, r0
 8003654:	2b00      	cmp	r3, #0
 8003656:	d047      	beq.n	80036e8 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 8003658:	68fb      	ldr	r3, [r7, #12]
 800365a:	2b00      	cmp	r3, #0
 800365c:	d144      	bne.n	80036e8 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	689b      	ldr	r3, [r3, #8]
 8003664:	f003 030d 	and.w	r3, r3, #13
 8003668:	2b01      	cmp	r3, #1
 800366a:	d10c      	bne.n	8003686 <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	4618      	mov	r0, r3
 8003672:	f7ff f8fb 	bl	800286c <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	2203      	movs	r2, #3
 800367c:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 800367e:	f7fe ff39 	bl	80024f4 <HAL_GetTick>
 8003682:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8003684:	e029      	b.n	80036da <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800368a:	f043 0210 	orr.w	r2, r3, #16
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	659a      	str	r2, [r3, #88]	; 0x58
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003696:	f043 0201 	orr.w	r2, r3, #1
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	65da      	str	r2, [r3, #92]	; 0x5c
      return HAL_ERROR;
 800369e:	2301      	movs	r3, #1
 80036a0:	e023      	b.n	80036ea <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80036a2:	f7fe ff27 	bl	80024f4 <HAL_GetTick>
 80036a6:	4602      	mov	r2, r0
 80036a8:	68bb      	ldr	r3, [r7, #8]
 80036aa:	1ad3      	subs	r3, r2, r3
 80036ac:	2b02      	cmp	r3, #2
 80036ae:	d914      	bls.n	80036da <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	689b      	ldr	r3, [r3, #8]
 80036b6:	f003 0301 	and.w	r3, r3, #1
 80036ba:	2b00      	cmp	r3, #0
 80036bc:	d00d      	beq.n	80036da <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80036c2:	f043 0210 	orr.w	r2, r3, #16
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80036ce:	f043 0201 	orr.w	r2, r3, #1
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	65da      	str	r2, [r3, #92]	; 0x5c

          return HAL_ERROR;
 80036d6:	2301      	movs	r3, #1
 80036d8:	e007      	b.n	80036ea <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	689b      	ldr	r3, [r3, #8]
 80036e0:	f003 0301 	and.w	r3, r3, #1
 80036e4:	2b00      	cmp	r3, #0
 80036e6:	d1dc      	bne.n	80036a2 <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80036e8:	2300      	movs	r3, #0
}
 80036ea:	4618      	mov	r0, r3
 80036ec:	3710      	adds	r7, #16
 80036ee:	46bd      	mov	sp, r7
 80036f0:	bd80      	pop	{r7, pc}

080036f2 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 80036f2:	b580      	push	{r7, lr}
 80036f4:	b084      	sub	sp, #16
 80036f6:	af00      	add	r7, sp, #0
 80036f8:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80036fe:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8003700:	68fb      	ldr	r3, [r7, #12]
 8003702:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003704:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8003708:	2b00      	cmp	r3, #0
 800370a:	d14b      	bne.n	80037a4 <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800370c:	68fb      	ldr	r3, [r7, #12]
 800370e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003710:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8003714:	68fb      	ldr	r3, [r7, #12]
 8003716:	659a      	str	r2, [r3, #88]	; 0x58

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8003718:	68fb      	ldr	r3, [r7, #12]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	f003 0308 	and.w	r3, r3, #8
 8003722:	2b00      	cmp	r3, #0
 8003724:	d021      	beq.n	800376a <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8003726:	68fb      	ldr	r3, [r7, #12]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	4618      	mov	r0, r3
 800372c:	f7fe ffae 	bl	800268c <LL_ADC_REG_IsTriggerSourceSWStart>
 8003730:	4603      	mov	r3, r0
 8003732:	2b00      	cmp	r3, #0
 8003734:	d032      	beq.n	800379c <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8003736:	68fb      	ldr	r3, [r7, #12]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	68db      	ldr	r3, [r3, #12]
 800373c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003740:	2b00      	cmp	r3, #0
 8003742:	d12b      	bne.n	800379c <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8003744:	68fb      	ldr	r3, [r7, #12]
 8003746:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003748:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800374c:	68fb      	ldr	r3, [r7, #12]
 800374e:	659a      	str	r2, [r3, #88]	; 0x58
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8003750:	68fb      	ldr	r3, [r7, #12]
 8003752:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003754:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003758:	2b00      	cmp	r3, #0
 800375a:	d11f      	bne.n	800379c <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800375c:	68fb      	ldr	r3, [r7, #12]
 800375e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003760:	f043 0201 	orr.w	r2, r3, #1
 8003764:	68fb      	ldr	r3, [r7, #12]
 8003766:	659a      	str	r2, [r3, #88]	; 0x58
 8003768:	e018      	b.n	800379c <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 800376a:	68fb      	ldr	r3, [r7, #12]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	68db      	ldr	r3, [r3, #12]
 8003770:	f003 0302 	and.w	r3, r3, #2
 8003774:	2b00      	cmp	r3, #0
 8003776:	d111      	bne.n	800379c <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8003778:	68fb      	ldr	r3, [r7, #12]
 800377a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800377c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003780:	68fb      	ldr	r3, [r7, #12]
 8003782:	659a      	str	r2, [r3, #88]	; 0x58
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8003784:	68fb      	ldr	r3, [r7, #12]
 8003786:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003788:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800378c:	2b00      	cmp	r3, #0
 800378e:	d105      	bne.n	800379c <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003790:	68fb      	ldr	r3, [r7, #12]
 8003792:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003794:	f043 0201 	orr.w	r2, r3, #1
 8003798:	68fb      	ldr	r3, [r7, #12]
 800379a:	659a      	str	r2, [r3, #88]	; 0x58

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800379c:	68f8      	ldr	r0, [r7, #12]
 800379e:	f7ff faa9 	bl	8002cf4 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 80037a2:	e00e      	b.n	80037c2 <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 80037a4:	68fb      	ldr	r3, [r7, #12]
 80037a6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80037a8:	f003 0310 	and.w	r3, r3, #16
 80037ac:	2b00      	cmp	r3, #0
 80037ae:	d003      	beq.n	80037b8 <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 80037b0:	68f8      	ldr	r0, [r7, #12]
 80037b2:	f7ff fab3 	bl	8002d1c <HAL_ADC_ErrorCallback>
}
 80037b6:	e004      	b.n	80037c2 <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 80037b8:	68fb      	ldr	r3, [r7, #12]
 80037ba:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80037bc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80037be:	6878      	ldr	r0, [r7, #4]
 80037c0:	4798      	blx	r3
}
 80037c2:	bf00      	nop
 80037c4:	3710      	adds	r7, #16
 80037c6:	46bd      	mov	sp, r7
 80037c8:	bd80      	pop	{r7, pc}

080037ca <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 80037ca:	b580      	push	{r7, lr}
 80037cc:	b084      	sub	sp, #16
 80037ce:	af00      	add	r7, sp, #0
 80037d0:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80037d6:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80037d8:	68f8      	ldr	r0, [r7, #12]
 80037da:	f7ff fa95 	bl	8002d08 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80037de:	bf00      	nop
 80037e0:	3710      	adds	r7, #16
 80037e2:	46bd      	mov	sp, r7
 80037e4:	bd80      	pop	{r7, pc}

080037e6 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 80037e6:	b580      	push	{r7, lr}
 80037e8:	b084      	sub	sp, #16
 80037ea:	af00      	add	r7, sp, #0
 80037ec:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80037f2:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 80037f4:	68fb      	ldr	r3, [r7, #12]
 80037f6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80037f8:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80037fc:	68fb      	ldr	r3, [r7, #12]
 80037fe:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8003800:	68fb      	ldr	r3, [r7, #12]
 8003802:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003804:	f043 0204 	orr.w	r2, r3, #4
 8003808:	68fb      	ldr	r3, [r7, #12]
 800380a:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 800380c:	68f8      	ldr	r0, [r7, #12]
 800380e:	f7ff fa85 	bl	8002d1c <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003812:	bf00      	nop
 8003814:	3710      	adds	r7, #16
 8003816:	46bd      	mov	sp, r7
 8003818:	bd80      	pop	{r7, pc}

0800381a <LL_ADC_StartCalibration>:
{
 800381a:	b480      	push	{r7}
 800381c:	b083      	sub	sp, #12
 800381e:	af00      	add	r7, sp, #0
 8003820:	6078      	str	r0, [r7, #4]
 8003822:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CR,
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	689b      	ldr	r3, [r3, #8]
 8003828:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 800382c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8003830:	683a      	ldr	r2, [r7, #0]
 8003832:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8003836:	4313      	orrs	r3, r2
 8003838:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	609a      	str	r2, [r3, #8]
}
 8003840:	bf00      	nop
 8003842:	370c      	adds	r7, #12
 8003844:	46bd      	mov	sp, r7
 8003846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800384a:	4770      	bx	lr

0800384c <LL_ADC_IsCalibrationOnGoing>:
{
 800384c:	b480      	push	{r7}
 800384e:	b083      	sub	sp, #12
 8003850:	af00      	add	r7, sp, #0
 8003852:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	689b      	ldr	r3, [r3, #8]
 8003858:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800385c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003860:	d101      	bne.n	8003866 <LL_ADC_IsCalibrationOnGoing+0x1a>
 8003862:	2301      	movs	r3, #1
 8003864:	e000      	b.n	8003868 <LL_ADC_IsCalibrationOnGoing+0x1c>
 8003866:	2300      	movs	r3, #0
}
 8003868:	4618      	mov	r0, r3
 800386a:	370c      	adds	r7, #12
 800386c:	46bd      	mov	sp, r7
 800386e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003872:	4770      	bx	lr

08003874 <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t SingleDiff)
{
 8003874:	b580      	push	{r7, lr}
 8003876:	b084      	sub	sp, #16
 8003878:	af00      	add	r7, sp, #0
 800387a:	6078      	str	r0, [r7, #4]
 800387c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 800387e:	2300      	movs	r3, #0
 8003880:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8003888:	2b01      	cmp	r3, #1
 800388a:	d101      	bne.n	8003890 <HAL_ADCEx_Calibration_Start+0x1c>
 800388c:	2302      	movs	r3, #2
 800388e:	e04d      	b.n	800392c <HAL_ADCEx_Calibration_Start+0xb8>
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	2201      	movs	r2, #1
 8003894:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 8003898:	6878      	ldr	r0, [r7, #4]
 800389a:	f7ff fecb 	bl	8003634 <ADC_Disable>
 800389e:	4603      	mov	r3, r0
 80038a0:	73fb      	strb	r3, [r7, #15]

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 80038a2:	7bfb      	ldrb	r3, [r7, #15]
 80038a4:	2b00      	cmp	r3, #0
 80038a6:	d136      	bne.n	8003916 <HAL_ADCEx_Calibration_Start+0xa2>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80038ac:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80038b0:	f023 0302 	bic.w	r3, r3, #2
 80038b4:	f043 0202 	orr.w	r2, r3, #2
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	659a      	str	r2, [r3, #88]	; 0x58
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Start ADC calibration in mode single-ended or differential */
    LL_ADC_StartCalibration(hadc->Instance, SingleDiff);
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	6839      	ldr	r1, [r7, #0]
 80038c2:	4618      	mov	r0, r3
 80038c4:	f7ff ffa9 	bl	800381a <LL_ADC_StartCalibration>

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 80038c8:	e014      	b.n	80038f4 <HAL_ADCEx_Calibration_Start+0x80>
    {
      wait_loop_index++;
 80038ca:	68bb      	ldr	r3, [r7, #8]
 80038cc:	3301      	adds	r3, #1
 80038ce:	60bb      	str	r3, [r7, #8]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 80038d0:	68bb      	ldr	r3, [r7, #8]
 80038d2:	f5b3 2f91 	cmp.w	r3, #296960	; 0x48800
 80038d6:	d30d      	bcc.n	80038f4 <HAL_ADCEx_Calibration_Start+0x80>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80038dc:	f023 0312 	bic.w	r3, r3, #18
 80038e0:	f043 0210 	orr.w	r2, r3, #16
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	659a      	str	r2, [r3, #88]	; 0x58
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	2200      	movs	r2, #0
 80038ec:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

        return HAL_ERROR;
 80038f0:	2301      	movs	r3, #1
 80038f2:	e01b      	b.n	800392c <HAL_ADCEx_Calibration_Start+0xb8>
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	4618      	mov	r0, r3
 80038fa:	f7ff ffa7 	bl	800384c <LL_ADC_IsCalibrationOnGoing>
 80038fe:	4603      	mov	r3, r0
 8003900:	2b00      	cmp	r3, #0
 8003902:	d1e2      	bne.n	80038ca <HAL_ADCEx_Calibration_Start+0x56>
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003908:	f023 0303 	bic.w	r3, r3, #3
 800390c:	f043 0201 	orr.w	r2, r3, #1
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	659a      	str	r2, [r3, #88]	; 0x58
 8003914:	e005      	b.n	8003922 <HAL_ADCEx_Calibration_Start+0xae>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800391a:	f043 0210 	orr.w	r2, r3, #16
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	659a      	str	r2, [r3, #88]	; 0x58
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	2200      	movs	r2, #0
 8003926:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  /* Return function status */
  return tmp_hal_status;
 800392a:	7bfb      	ldrb	r3, [r7, #15]
}
 800392c:	4618      	mov	r0, r3
 800392e:	3710      	adds	r7, #16
 8003930:	46bd      	mov	sp, r7
 8003932:	bd80      	pop	{r7, pc}

08003934 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003934:	b480      	push	{r7}
 8003936:	b085      	sub	sp, #20
 8003938:	af00      	add	r7, sp, #0
 800393a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	f003 0307 	and.w	r3, r3, #7
 8003942:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003944:	4b0c      	ldr	r3, [pc, #48]	; (8003978 <__NVIC_SetPriorityGrouping+0x44>)
 8003946:	68db      	ldr	r3, [r3, #12]
 8003948:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800394a:	68ba      	ldr	r2, [r7, #8]
 800394c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003950:	4013      	ands	r3, r2
 8003952:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003954:	68fb      	ldr	r3, [r7, #12]
 8003956:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003958:	68bb      	ldr	r3, [r7, #8]
 800395a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800395c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003960:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003964:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003966:	4a04      	ldr	r2, [pc, #16]	; (8003978 <__NVIC_SetPriorityGrouping+0x44>)
 8003968:	68bb      	ldr	r3, [r7, #8]
 800396a:	60d3      	str	r3, [r2, #12]
}
 800396c:	bf00      	nop
 800396e:	3714      	adds	r7, #20
 8003970:	46bd      	mov	sp, r7
 8003972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003976:	4770      	bx	lr
 8003978:	e000ed00 	.word	0xe000ed00

0800397c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800397c:	b480      	push	{r7}
 800397e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003980:	4b04      	ldr	r3, [pc, #16]	; (8003994 <__NVIC_GetPriorityGrouping+0x18>)
 8003982:	68db      	ldr	r3, [r3, #12]
 8003984:	0a1b      	lsrs	r3, r3, #8
 8003986:	f003 0307 	and.w	r3, r3, #7
}
 800398a:	4618      	mov	r0, r3
 800398c:	46bd      	mov	sp, r7
 800398e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003992:	4770      	bx	lr
 8003994:	e000ed00 	.word	0xe000ed00

08003998 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003998:	b480      	push	{r7}
 800399a:	b083      	sub	sp, #12
 800399c:	af00      	add	r7, sp, #0
 800399e:	4603      	mov	r3, r0
 80039a0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80039a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80039a6:	2b00      	cmp	r3, #0
 80039a8:	db0b      	blt.n	80039c2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80039aa:	79fb      	ldrb	r3, [r7, #7]
 80039ac:	f003 021f 	and.w	r2, r3, #31
 80039b0:	4907      	ldr	r1, [pc, #28]	; (80039d0 <__NVIC_EnableIRQ+0x38>)
 80039b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80039b6:	095b      	lsrs	r3, r3, #5
 80039b8:	2001      	movs	r0, #1
 80039ba:	fa00 f202 	lsl.w	r2, r0, r2
 80039be:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80039c2:	bf00      	nop
 80039c4:	370c      	adds	r7, #12
 80039c6:	46bd      	mov	sp, r7
 80039c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039cc:	4770      	bx	lr
 80039ce:	bf00      	nop
 80039d0:	e000e100 	.word	0xe000e100

080039d4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80039d4:	b480      	push	{r7}
 80039d6:	b083      	sub	sp, #12
 80039d8:	af00      	add	r7, sp, #0
 80039da:	4603      	mov	r3, r0
 80039dc:	6039      	str	r1, [r7, #0]
 80039de:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80039e0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80039e4:	2b00      	cmp	r3, #0
 80039e6:	db0a      	blt.n	80039fe <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80039e8:	683b      	ldr	r3, [r7, #0]
 80039ea:	b2da      	uxtb	r2, r3
 80039ec:	490c      	ldr	r1, [pc, #48]	; (8003a20 <__NVIC_SetPriority+0x4c>)
 80039ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80039f2:	0112      	lsls	r2, r2, #4
 80039f4:	b2d2      	uxtb	r2, r2
 80039f6:	440b      	add	r3, r1
 80039f8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80039fc:	e00a      	b.n	8003a14 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80039fe:	683b      	ldr	r3, [r7, #0]
 8003a00:	b2da      	uxtb	r2, r3
 8003a02:	4908      	ldr	r1, [pc, #32]	; (8003a24 <__NVIC_SetPriority+0x50>)
 8003a04:	79fb      	ldrb	r3, [r7, #7]
 8003a06:	f003 030f 	and.w	r3, r3, #15
 8003a0a:	3b04      	subs	r3, #4
 8003a0c:	0112      	lsls	r2, r2, #4
 8003a0e:	b2d2      	uxtb	r2, r2
 8003a10:	440b      	add	r3, r1
 8003a12:	761a      	strb	r2, [r3, #24]
}
 8003a14:	bf00      	nop
 8003a16:	370c      	adds	r7, #12
 8003a18:	46bd      	mov	sp, r7
 8003a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a1e:	4770      	bx	lr
 8003a20:	e000e100 	.word	0xe000e100
 8003a24:	e000ed00 	.word	0xe000ed00

08003a28 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003a28:	b480      	push	{r7}
 8003a2a:	b089      	sub	sp, #36	; 0x24
 8003a2c:	af00      	add	r7, sp, #0
 8003a2e:	60f8      	str	r0, [r7, #12]
 8003a30:	60b9      	str	r1, [r7, #8]
 8003a32:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003a34:	68fb      	ldr	r3, [r7, #12]
 8003a36:	f003 0307 	and.w	r3, r3, #7
 8003a3a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003a3c:	69fb      	ldr	r3, [r7, #28]
 8003a3e:	f1c3 0307 	rsb	r3, r3, #7
 8003a42:	2b04      	cmp	r3, #4
 8003a44:	bf28      	it	cs
 8003a46:	2304      	movcs	r3, #4
 8003a48:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003a4a:	69fb      	ldr	r3, [r7, #28]
 8003a4c:	3304      	adds	r3, #4
 8003a4e:	2b06      	cmp	r3, #6
 8003a50:	d902      	bls.n	8003a58 <NVIC_EncodePriority+0x30>
 8003a52:	69fb      	ldr	r3, [r7, #28]
 8003a54:	3b03      	subs	r3, #3
 8003a56:	e000      	b.n	8003a5a <NVIC_EncodePriority+0x32>
 8003a58:	2300      	movs	r3, #0
 8003a5a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003a5c:	f04f 32ff 	mov.w	r2, #4294967295
 8003a60:	69bb      	ldr	r3, [r7, #24]
 8003a62:	fa02 f303 	lsl.w	r3, r2, r3
 8003a66:	43da      	mvns	r2, r3
 8003a68:	68bb      	ldr	r3, [r7, #8]
 8003a6a:	401a      	ands	r2, r3
 8003a6c:	697b      	ldr	r3, [r7, #20]
 8003a6e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003a70:	f04f 31ff 	mov.w	r1, #4294967295
 8003a74:	697b      	ldr	r3, [r7, #20]
 8003a76:	fa01 f303 	lsl.w	r3, r1, r3
 8003a7a:	43d9      	mvns	r1, r3
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003a80:	4313      	orrs	r3, r2
         );
}
 8003a82:	4618      	mov	r0, r3
 8003a84:	3724      	adds	r7, #36	; 0x24
 8003a86:	46bd      	mov	sp, r7
 8003a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a8c:	4770      	bx	lr
	...

08003a90 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003a90:	b580      	push	{r7, lr}
 8003a92:	b082      	sub	sp, #8
 8003a94:	af00      	add	r7, sp, #0
 8003a96:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	3b01      	subs	r3, #1
 8003a9c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003aa0:	d301      	bcc.n	8003aa6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003aa2:	2301      	movs	r3, #1
 8003aa4:	e00f      	b.n	8003ac6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003aa6:	4a0a      	ldr	r2, [pc, #40]	; (8003ad0 <SysTick_Config+0x40>)
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	3b01      	subs	r3, #1
 8003aac:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003aae:	210f      	movs	r1, #15
 8003ab0:	f04f 30ff 	mov.w	r0, #4294967295
 8003ab4:	f7ff ff8e 	bl	80039d4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003ab8:	4b05      	ldr	r3, [pc, #20]	; (8003ad0 <SysTick_Config+0x40>)
 8003aba:	2200      	movs	r2, #0
 8003abc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003abe:	4b04      	ldr	r3, [pc, #16]	; (8003ad0 <SysTick_Config+0x40>)
 8003ac0:	2207      	movs	r2, #7
 8003ac2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003ac4:	2300      	movs	r3, #0
}
 8003ac6:	4618      	mov	r0, r3
 8003ac8:	3708      	adds	r7, #8
 8003aca:	46bd      	mov	sp, r7
 8003acc:	bd80      	pop	{r7, pc}
 8003ace:	bf00      	nop
 8003ad0:	e000e010 	.word	0xe000e010

08003ad4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003ad4:	b580      	push	{r7, lr}
 8003ad6:	b082      	sub	sp, #8
 8003ad8:	af00      	add	r7, sp, #0
 8003ada:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003adc:	6878      	ldr	r0, [r7, #4]
 8003ade:	f7ff ff29 	bl	8003934 <__NVIC_SetPriorityGrouping>
}
 8003ae2:	bf00      	nop
 8003ae4:	3708      	adds	r7, #8
 8003ae6:	46bd      	mov	sp, r7
 8003ae8:	bd80      	pop	{r7, pc}

08003aea <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003aea:	b580      	push	{r7, lr}
 8003aec:	b086      	sub	sp, #24
 8003aee:	af00      	add	r7, sp, #0
 8003af0:	4603      	mov	r3, r0
 8003af2:	60b9      	str	r1, [r7, #8]
 8003af4:	607a      	str	r2, [r7, #4]
 8003af6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8003af8:	2300      	movs	r3, #0
 8003afa:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003afc:	f7ff ff3e 	bl	800397c <__NVIC_GetPriorityGrouping>
 8003b00:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003b02:	687a      	ldr	r2, [r7, #4]
 8003b04:	68b9      	ldr	r1, [r7, #8]
 8003b06:	6978      	ldr	r0, [r7, #20]
 8003b08:	f7ff ff8e 	bl	8003a28 <NVIC_EncodePriority>
 8003b0c:	4602      	mov	r2, r0
 8003b0e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003b12:	4611      	mov	r1, r2
 8003b14:	4618      	mov	r0, r3
 8003b16:	f7ff ff5d 	bl	80039d4 <__NVIC_SetPriority>
}
 8003b1a:	bf00      	nop
 8003b1c:	3718      	adds	r7, #24
 8003b1e:	46bd      	mov	sp, r7
 8003b20:	bd80      	pop	{r7, pc}

08003b22 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003b22:	b580      	push	{r7, lr}
 8003b24:	b082      	sub	sp, #8
 8003b26:	af00      	add	r7, sp, #0
 8003b28:	4603      	mov	r3, r0
 8003b2a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003b2c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003b30:	4618      	mov	r0, r3
 8003b32:	f7ff ff31 	bl	8003998 <__NVIC_EnableIRQ>
}
 8003b36:	bf00      	nop
 8003b38:	3708      	adds	r7, #8
 8003b3a:	46bd      	mov	sp, r7
 8003b3c:	bd80      	pop	{r7, pc}

08003b3e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003b3e:	b580      	push	{r7, lr}
 8003b40:	b082      	sub	sp, #8
 8003b42:	af00      	add	r7, sp, #0
 8003b44:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003b46:	6878      	ldr	r0, [r7, #4]
 8003b48:	f7ff ffa2 	bl	8003a90 <SysTick_Config>
 8003b4c:	4603      	mov	r3, r0
}
 8003b4e:	4618      	mov	r0, r3
 8003b50:	3708      	adds	r7, #8
 8003b52:	46bd      	mov	sp, r7
 8003b54:	bd80      	pop	{r7, pc}
	...

08003b58 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003b58:	b480      	push	{r7}
 8003b5a:	b085      	sub	sp, #20
 8003b5c:	af00      	add	r7, sp, #0
 8003b5e:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	2b00      	cmp	r3, #0
 8003b64:	d101      	bne.n	8003b6a <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8003b66:	2301      	movs	r3, #1
 8003b68:	e098      	b.n	8003c9c <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	461a      	mov	r2, r3
 8003b70:	4b4d      	ldr	r3, [pc, #308]	; (8003ca8 <HAL_DMA_Init+0x150>)
 8003b72:	429a      	cmp	r2, r3
 8003b74:	d80f      	bhi.n	8003b96 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	461a      	mov	r2, r3
 8003b7c:	4b4b      	ldr	r3, [pc, #300]	; (8003cac <HAL_DMA_Init+0x154>)
 8003b7e:	4413      	add	r3, r2
 8003b80:	4a4b      	ldr	r2, [pc, #300]	; (8003cb0 <HAL_DMA_Init+0x158>)
 8003b82:	fba2 2303 	umull	r2, r3, r2, r3
 8003b86:	091b      	lsrs	r3, r3, #4
 8003b88:	009a      	lsls	r2, r3, #2
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	4a48      	ldr	r2, [pc, #288]	; (8003cb4 <HAL_DMA_Init+0x15c>)
 8003b92:	641a      	str	r2, [r3, #64]	; 0x40
 8003b94:	e00e      	b.n	8003bb4 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	461a      	mov	r2, r3
 8003b9c:	4b46      	ldr	r3, [pc, #280]	; (8003cb8 <HAL_DMA_Init+0x160>)
 8003b9e:	4413      	add	r3, r2
 8003ba0:	4a43      	ldr	r2, [pc, #268]	; (8003cb0 <HAL_DMA_Init+0x158>)
 8003ba2:	fba2 2303 	umull	r2, r3, r2, r3
 8003ba6:	091b      	lsrs	r3, r3, #4
 8003ba8:	009a      	lsls	r2, r3, #2
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	4a42      	ldr	r2, [pc, #264]	; (8003cbc <HAL_DMA_Init+0x164>)
 8003bb2:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	2202      	movs	r2, #2
 8003bb8:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8003bc4:	68fb      	ldr	r3, [r7, #12]
 8003bc6:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8003bca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003bce:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8003bd8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	691b      	ldr	r3, [r3, #16]
 8003bde:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003be4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	699b      	ldr	r3, [r3, #24]
 8003bea:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003bf0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	6a1b      	ldr	r3, [r3, #32]
 8003bf6:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8003bf8:	68fa      	ldr	r2, [r7, #12]
 8003bfa:	4313      	orrs	r3, r2
 8003bfc:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	68fa      	ldr	r2, [r7, #12]
 8003c04:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	689b      	ldr	r3, [r3, #8]
 8003c0a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003c0e:	d039      	beq.n	8003c84 <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c14:	4a27      	ldr	r2, [pc, #156]	; (8003cb4 <HAL_DMA_Init+0x15c>)
 8003c16:	4293      	cmp	r3, r2
 8003c18:	d11a      	bne.n	8003c50 <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8003c1a:	4b29      	ldr	r3, [pc, #164]	; (8003cc0 <HAL_DMA_Init+0x168>)
 8003c1c:	681a      	ldr	r2, [r3, #0]
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c22:	f003 031c 	and.w	r3, r3, #28
 8003c26:	210f      	movs	r1, #15
 8003c28:	fa01 f303 	lsl.w	r3, r1, r3
 8003c2c:	43db      	mvns	r3, r3
 8003c2e:	4924      	ldr	r1, [pc, #144]	; (8003cc0 <HAL_DMA_Init+0x168>)
 8003c30:	4013      	ands	r3, r2
 8003c32:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8003c34:	4b22      	ldr	r3, [pc, #136]	; (8003cc0 <HAL_DMA_Init+0x168>)
 8003c36:	681a      	ldr	r2, [r3, #0]
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	6859      	ldr	r1, [r3, #4]
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c40:	f003 031c 	and.w	r3, r3, #28
 8003c44:	fa01 f303 	lsl.w	r3, r1, r3
 8003c48:	491d      	ldr	r1, [pc, #116]	; (8003cc0 <HAL_DMA_Init+0x168>)
 8003c4a:	4313      	orrs	r3, r2
 8003c4c:	600b      	str	r3, [r1, #0]
 8003c4e:	e019      	b.n	8003c84 <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8003c50:	4b1c      	ldr	r3, [pc, #112]	; (8003cc4 <HAL_DMA_Init+0x16c>)
 8003c52:	681a      	ldr	r2, [r3, #0]
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c58:	f003 031c 	and.w	r3, r3, #28
 8003c5c:	210f      	movs	r1, #15
 8003c5e:	fa01 f303 	lsl.w	r3, r1, r3
 8003c62:	43db      	mvns	r3, r3
 8003c64:	4917      	ldr	r1, [pc, #92]	; (8003cc4 <HAL_DMA_Init+0x16c>)
 8003c66:	4013      	ands	r3, r2
 8003c68:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8003c6a:	4b16      	ldr	r3, [pc, #88]	; (8003cc4 <HAL_DMA_Init+0x16c>)
 8003c6c:	681a      	ldr	r2, [r3, #0]
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	6859      	ldr	r1, [r3, #4]
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c76:	f003 031c 	and.w	r3, r3, #28
 8003c7a:	fa01 f303 	lsl.w	r3, r1, r3
 8003c7e:	4911      	ldr	r1, [pc, #68]	; (8003cc4 <HAL_DMA_Init+0x16c>)
 8003c80:	4313      	orrs	r3, r2
 8003c82:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
       /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
       /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	2200      	movs	r2, #0
 8003c88:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	2201      	movs	r2, #1
 8003c8e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	2200      	movs	r2, #0
 8003c96:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8003c9a:	2300      	movs	r3, #0
}
 8003c9c:	4618      	mov	r0, r3
 8003c9e:	3714      	adds	r7, #20
 8003ca0:	46bd      	mov	sp, r7
 8003ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ca6:	4770      	bx	lr
 8003ca8:	40020407 	.word	0x40020407
 8003cac:	bffdfff8 	.word	0xbffdfff8
 8003cb0:	cccccccd 	.word	0xcccccccd
 8003cb4:	40020000 	.word	0x40020000
 8003cb8:	bffdfbf8 	.word	0xbffdfbf8
 8003cbc:	40020400 	.word	0x40020400
 8003cc0:	400200a8 	.word	0x400200a8
 8003cc4:	400204a8 	.word	0x400204a8

08003cc8 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003cc8:	b580      	push	{r7, lr}
 8003cca:	b086      	sub	sp, #24
 8003ccc:	af00      	add	r7, sp, #0
 8003cce:	60f8      	str	r0, [r7, #12]
 8003cd0:	60b9      	str	r1, [r7, #8]
 8003cd2:	607a      	str	r2, [r7, #4]
 8003cd4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003cd6:	2300      	movs	r3, #0
 8003cd8:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8003cda:	68fb      	ldr	r3, [r7, #12]
 8003cdc:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003ce0:	2b01      	cmp	r3, #1
 8003ce2:	d101      	bne.n	8003ce8 <HAL_DMA_Start_IT+0x20>
 8003ce4:	2302      	movs	r3, #2
 8003ce6:	e04b      	b.n	8003d80 <HAL_DMA_Start_IT+0xb8>
 8003ce8:	68fb      	ldr	r3, [r7, #12]
 8003cea:	2201      	movs	r2, #1
 8003cec:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if(HAL_DMA_STATE_READY == hdma->State)
 8003cf0:	68fb      	ldr	r3, [r7, #12]
 8003cf2:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8003cf6:	b2db      	uxtb	r3, r3
 8003cf8:	2b01      	cmp	r3, #1
 8003cfa:	d13a      	bne.n	8003d72 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003cfc:	68fb      	ldr	r3, [r7, #12]
 8003cfe:	2202      	movs	r2, #2
 8003d00:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003d04:	68fb      	ldr	r3, [r7, #12]
 8003d06:	2200      	movs	r2, #0
 8003d08:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8003d0a:	68fb      	ldr	r3, [r7, #12]
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	681a      	ldr	r2, [r3, #0]
 8003d10:	68fb      	ldr	r3, [r7, #12]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	f022 0201 	bic.w	r2, r2, #1
 8003d18:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003d1a:	683b      	ldr	r3, [r7, #0]
 8003d1c:	687a      	ldr	r2, [r7, #4]
 8003d1e:	68b9      	ldr	r1, [r7, #8]
 8003d20:	68f8      	ldr	r0, [r7, #12]
 8003d22:	f000 f8e0 	bl	8003ee6 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback )
 8003d26:	68fb      	ldr	r3, [r7, #12]
 8003d28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d2a:	2b00      	cmp	r3, #0
 8003d2c:	d008      	beq.n	8003d40 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003d2e:	68fb      	ldr	r3, [r7, #12]
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	681a      	ldr	r2, [r3, #0]
 8003d34:	68fb      	ldr	r3, [r7, #12]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	f042 020e 	orr.w	r2, r2, #14
 8003d3c:	601a      	str	r2, [r3, #0]
 8003d3e:	e00f      	b.n	8003d60 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003d40:	68fb      	ldr	r3, [r7, #12]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	681a      	ldr	r2, [r3, #0]
 8003d46:	68fb      	ldr	r3, [r7, #12]
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	f022 0204 	bic.w	r2, r2, #4
 8003d4e:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8003d50:	68fb      	ldr	r3, [r7, #12]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	681a      	ldr	r2, [r3, #0]
 8003d56:	68fb      	ldr	r3, [r7, #12]
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	f042 020a 	orr.w	r2, r2, #10
 8003d5e:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003d60:	68fb      	ldr	r3, [r7, #12]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	681a      	ldr	r2, [r3, #0]
 8003d66:	68fb      	ldr	r3, [r7, #12]
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	f042 0201 	orr.w	r2, r2, #1
 8003d6e:	601a      	str	r2, [r3, #0]
 8003d70:	e005      	b.n	8003d7e <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003d72:	68fb      	ldr	r3, [r7, #12]
 8003d74:	2200      	movs	r2, #0
 8003d76:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8003d7a:	2302      	movs	r3, #2
 8003d7c:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8003d7e:	7dfb      	ldrb	r3, [r7, #23]
}
 8003d80:	4618      	mov	r0, r3
 8003d82:	3718      	adds	r7, #24
 8003d84:	46bd      	mov	sp, r7
 8003d86:	bd80      	pop	{r7, pc}

08003d88 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003d88:	b580      	push	{r7, lr}
 8003d8a:	b084      	sub	sp, #16
 8003d8c:	af00      	add	r7, sp, #0
 8003d8e:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003da4:	f003 031c 	and.w	r3, r3, #28
 8003da8:	2204      	movs	r2, #4
 8003daa:	409a      	lsls	r2, r3
 8003dac:	68fb      	ldr	r3, [r7, #12]
 8003dae:	4013      	ands	r3, r2
 8003db0:	2b00      	cmp	r3, #0
 8003db2:	d026      	beq.n	8003e02 <HAL_DMA_IRQHandler+0x7a>
 8003db4:	68bb      	ldr	r3, [r7, #8]
 8003db6:	f003 0304 	and.w	r3, r3, #4
 8003dba:	2b00      	cmp	r3, #0
 8003dbc:	d021      	beq.n	8003e02 <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	f003 0320 	and.w	r3, r3, #32
 8003dc8:	2b00      	cmp	r3, #0
 8003dca:	d107      	bne.n	8003ddc <HAL_DMA_IRQHandler+0x54>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	681a      	ldr	r2, [r3, #0]
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	f022 0204 	bic.w	r2, r2, #4
 8003dda:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003de0:	f003 021c 	and.w	r2, r3, #28
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003de8:	2104      	movs	r1, #4
 8003dea:	fa01 f202 	lsl.w	r2, r1, r2
 8003dee:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if(hdma->XferHalfCpltCallback != NULL)
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003df4:	2b00      	cmp	r3, #0
 8003df6:	d071      	beq.n	8003edc <HAL_DMA_IRQHandler+0x154>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003dfc:	6878      	ldr	r0, [r7, #4]
 8003dfe:	4798      	blx	r3
      if(hdma->XferHalfCpltCallback != NULL)
 8003e00:	e06c      	b.n	8003edc <HAL_DMA_IRQHandler+0x154>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e06:	f003 031c 	and.w	r3, r3, #28
 8003e0a:	2202      	movs	r2, #2
 8003e0c:	409a      	lsls	r2, r3
 8003e0e:	68fb      	ldr	r3, [r7, #12]
 8003e10:	4013      	ands	r3, r2
 8003e12:	2b00      	cmp	r3, #0
 8003e14:	d02e      	beq.n	8003e74 <HAL_DMA_IRQHandler+0xec>
 8003e16:	68bb      	ldr	r3, [r7, #8]
 8003e18:	f003 0302 	and.w	r3, r3, #2
 8003e1c:	2b00      	cmp	r3, #0
 8003e1e:	d029      	beq.n	8003e74 <HAL_DMA_IRQHandler+0xec>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	f003 0320 	and.w	r3, r3, #32
 8003e2a:	2b00      	cmp	r3, #0
 8003e2c:	d10b      	bne.n	8003e46 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	681a      	ldr	r2, [r3, #0]
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	f022 020a 	bic.w	r2, r2, #10
 8003e3c:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	2201      	movs	r2, #1
 8003e42:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e4a:	f003 021c 	and.w	r2, r3, #28
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e52:	2102      	movs	r1, #2
 8003e54:	fa01 f202 	lsl.w	r2, r1, r2
 8003e58:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	2200      	movs	r2, #0
 8003e5e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if(hdma->XferCpltCallback != NULL)
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e66:	2b00      	cmp	r3, #0
 8003e68:	d038      	beq.n	8003edc <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e6e:	6878      	ldr	r0, [r7, #4]
 8003e70:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8003e72:	e033      	b.n	8003edc <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e78:	f003 031c 	and.w	r3, r3, #28
 8003e7c:	2208      	movs	r2, #8
 8003e7e:	409a      	lsls	r2, r3
 8003e80:	68fb      	ldr	r3, [r7, #12]
 8003e82:	4013      	ands	r3, r2
 8003e84:	2b00      	cmp	r3, #0
 8003e86:	d02a      	beq.n	8003ede <HAL_DMA_IRQHandler+0x156>
 8003e88:	68bb      	ldr	r3, [r7, #8]
 8003e8a:	f003 0308 	and.w	r3, r3, #8
 8003e8e:	2b00      	cmp	r3, #0
 8003e90:	d025      	beq.n	8003ede <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	681a      	ldr	r2, [r3, #0]
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	f022 020e 	bic.w	r2, r2, #14
 8003ea0:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ea6:	f003 021c 	and.w	r2, r3, #28
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003eae:	2101      	movs	r1, #1
 8003eb0:	fa01 f202 	lsl.w	r2, r1, r2
 8003eb4:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	2201      	movs	r2, #1
 8003eba:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	2201      	movs	r2, #1
 8003ec0:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	2200      	movs	r2, #0
 8003ec8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003ed0:	2b00      	cmp	r3, #0
 8003ed2:	d004      	beq.n	8003ede <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003ed8:	6878      	ldr	r0, [r7, #4]
 8003eda:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8003edc:	bf00      	nop
 8003ede:	bf00      	nop
}
 8003ee0:	3710      	adds	r7, #16
 8003ee2:	46bd      	mov	sp, r7
 8003ee4:	bd80      	pop	{r7, pc}

08003ee6 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003ee6:	b480      	push	{r7}
 8003ee8:	b085      	sub	sp, #20
 8003eea:	af00      	add	r7, sp, #0
 8003eec:	60f8      	str	r0, [r7, #12]
 8003eee:	60b9      	str	r1, [r7, #8]
 8003ef0:	607a      	str	r2, [r7, #4]
 8003ef2:	603b      	str	r3, [r7, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8003ef4:	68fb      	ldr	r3, [r7, #12]
 8003ef6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ef8:	f003 021c 	and.w	r2, r3, #28
 8003efc:	68fb      	ldr	r3, [r7, #12]
 8003efe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f00:	2101      	movs	r1, #1
 8003f02:	fa01 f202 	lsl.w	r2, r1, r2
 8003f06:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8003f08:	68fb      	ldr	r3, [r7, #12]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	683a      	ldr	r2, [r7, #0]
 8003f0e:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003f10:	68fb      	ldr	r3, [r7, #12]
 8003f12:	689b      	ldr	r3, [r3, #8]
 8003f14:	2b10      	cmp	r3, #16
 8003f16:	d108      	bne.n	8003f2a <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8003f18:	68fb      	ldr	r3, [r7, #12]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	687a      	ldr	r2, [r7, #4]
 8003f1e:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8003f20:	68fb      	ldr	r3, [r7, #12]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	68ba      	ldr	r2, [r7, #8]
 8003f26:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8003f28:	e007      	b.n	8003f3a <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 8003f2a:	68fb      	ldr	r3, [r7, #12]
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	68ba      	ldr	r2, [r7, #8]
 8003f30:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8003f32:	68fb      	ldr	r3, [r7, #12]
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	687a      	ldr	r2, [r7, #4]
 8003f38:	60da      	str	r2, [r3, #12]
}
 8003f3a:	bf00      	nop
 8003f3c:	3714      	adds	r7, #20
 8003f3e:	46bd      	mov	sp, r7
 8003f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f44:	4770      	bx	lr
	...

08003f48 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003f48:	b480      	push	{r7}
 8003f4a:	b087      	sub	sp, #28
 8003f4c:	af00      	add	r7, sp, #0
 8003f4e:	6078      	str	r0, [r7, #4]
 8003f50:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003f52:	2300      	movs	r3, #0
 8003f54:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003f56:	e154      	b.n	8004202 <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8003f58:	683b      	ldr	r3, [r7, #0]
 8003f5a:	681a      	ldr	r2, [r3, #0]
 8003f5c:	2101      	movs	r1, #1
 8003f5e:	697b      	ldr	r3, [r7, #20]
 8003f60:	fa01 f303 	lsl.w	r3, r1, r3
 8003f64:	4013      	ands	r3, r2
 8003f66:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003f68:	68fb      	ldr	r3, [r7, #12]
 8003f6a:	2b00      	cmp	r3, #0
 8003f6c:	f000 8146 	beq.w	80041fc <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003f70:	683b      	ldr	r3, [r7, #0]
 8003f72:	685b      	ldr	r3, [r3, #4]
 8003f74:	f003 0303 	and.w	r3, r3, #3
 8003f78:	2b01      	cmp	r3, #1
 8003f7a:	d005      	beq.n	8003f88 <HAL_GPIO_Init+0x40>
 8003f7c:	683b      	ldr	r3, [r7, #0]
 8003f7e:	685b      	ldr	r3, [r3, #4]
 8003f80:	f003 0303 	and.w	r3, r3, #3
 8003f84:	2b02      	cmp	r3, #2
 8003f86:	d130      	bne.n	8003fea <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	689b      	ldr	r3, [r3, #8]
 8003f8c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8003f8e:	697b      	ldr	r3, [r7, #20]
 8003f90:	005b      	lsls	r3, r3, #1
 8003f92:	2203      	movs	r2, #3
 8003f94:	fa02 f303 	lsl.w	r3, r2, r3
 8003f98:	43db      	mvns	r3, r3
 8003f9a:	693a      	ldr	r2, [r7, #16]
 8003f9c:	4013      	ands	r3, r2
 8003f9e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8003fa0:	683b      	ldr	r3, [r7, #0]
 8003fa2:	68da      	ldr	r2, [r3, #12]
 8003fa4:	697b      	ldr	r3, [r7, #20]
 8003fa6:	005b      	lsls	r3, r3, #1
 8003fa8:	fa02 f303 	lsl.w	r3, r2, r3
 8003fac:	693a      	ldr	r2, [r7, #16]
 8003fae:	4313      	orrs	r3, r2
 8003fb0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	693a      	ldr	r2, [r7, #16]
 8003fb6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	685b      	ldr	r3, [r3, #4]
 8003fbc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003fbe:	2201      	movs	r2, #1
 8003fc0:	697b      	ldr	r3, [r7, #20]
 8003fc2:	fa02 f303 	lsl.w	r3, r2, r3
 8003fc6:	43db      	mvns	r3, r3
 8003fc8:	693a      	ldr	r2, [r7, #16]
 8003fca:	4013      	ands	r3, r2
 8003fcc:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003fce:	683b      	ldr	r3, [r7, #0]
 8003fd0:	685b      	ldr	r3, [r3, #4]
 8003fd2:	091b      	lsrs	r3, r3, #4
 8003fd4:	f003 0201 	and.w	r2, r3, #1
 8003fd8:	697b      	ldr	r3, [r7, #20]
 8003fda:	fa02 f303 	lsl.w	r3, r2, r3
 8003fde:	693a      	ldr	r2, [r7, #16]
 8003fe0:	4313      	orrs	r3, r2
 8003fe2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	693a      	ldr	r2, [r7, #16]
 8003fe8:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003fea:	683b      	ldr	r3, [r7, #0]
 8003fec:	685b      	ldr	r3, [r3, #4]
 8003fee:	f003 0303 	and.w	r3, r3, #3
 8003ff2:	2b03      	cmp	r3, #3
 8003ff4:	d017      	beq.n	8004026 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	68db      	ldr	r3, [r3, #12]
 8003ffa:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003ffc:	697b      	ldr	r3, [r7, #20]
 8003ffe:	005b      	lsls	r3, r3, #1
 8004000:	2203      	movs	r2, #3
 8004002:	fa02 f303 	lsl.w	r3, r2, r3
 8004006:	43db      	mvns	r3, r3
 8004008:	693a      	ldr	r2, [r7, #16]
 800400a:	4013      	ands	r3, r2
 800400c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800400e:	683b      	ldr	r3, [r7, #0]
 8004010:	689a      	ldr	r2, [r3, #8]
 8004012:	697b      	ldr	r3, [r7, #20]
 8004014:	005b      	lsls	r3, r3, #1
 8004016:	fa02 f303 	lsl.w	r3, r2, r3
 800401a:	693a      	ldr	r2, [r7, #16]
 800401c:	4313      	orrs	r3, r2
 800401e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	693a      	ldr	r2, [r7, #16]
 8004024:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004026:	683b      	ldr	r3, [r7, #0]
 8004028:	685b      	ldr	r3, [r3, #4]
 800402a:	f003 0303 	and.w	r3, r3, #3
 800402e:	2b02      	cmp	r3, #2
 8004030:	d123      	bne.n	800407a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8004032:	697b      	ldr	r3, [r7, #20]
 8004034:	08da      	lsrs	r2, r3, #3
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	3208      	adds	r2, #8
 800403a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800403e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8004040:	697b      	ldr	r3, [r7, #20]
 8004042:	f003 0307 	and.w	r3, r3, #7
 8004046:	009b      	lsls	r3, r3, #2
 8004048:	220f      	movs	r2, #15
 800404a:	fa02 f303 	lsl.w	r3, r2, r3
 800404e:	43db      	mvns	r3, r3
 8004050:	693a      	ldr	r2, [r7, #16]
 8004052:	4013      	ands	r3, r2
 8004054:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8004056:	683b      	ldr	r3, [r7, #0]
 8004058:	691a      	ldr	r2, [r3, #16]
 800405a:	697b      	ldr	r3, [r7, #20]
 800405c:	f003 0307 	and.w	r3, r3, #7
 8004060:	009b      	lsls	r3, r3, #2
 8004062:	fa02 f303 	lsl.w	r3, r2, r3
 8004066:	693a      	ldr	r2, [r7, #16]
 8004068:	4313      	orrs	r3, r2
 800406a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800406c:	697b      	ldr	r3, [r7, #20]
 800406e:	08da      	lsrs	r2, r3, #3
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	3208      	adds	r2, #8
 8004074:	6939      	ldr	r1, [r7, #16]
 8004076:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8004080:	697b      	ldr	r3, [r7, #20]
 8004082:	005b      	lsls	r3, r3, #1
 8004084:	2203      	movs	r2, #3
 8004086:	fa02 f303 	lsl.w	r3, r2, r3
 800408a:	43db      	mvns	r3, r3
 800408c:	693a      	ldr	r2, [r7, #16]
 800408e:	4013      	ands	r3, r2
 8004090:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8004092:	683b      	ldr	r3, [r7, #0]
 8004094:	685b      	ldr	r3, [r3, #4]
 8004096:	f003 0203 	and.w	r2, r3, #3
 800409a:	697b      	ldr	r3, [r7, #20]
 800409c:	005b      	lsls	r3, r3, #1
 800409e:	fa02 f303 	lsl.w	r3, r2, r3
 80040a2:	693a      	ldr	r2, [r7, #16]
 80040a4:	4313      	orrs	r3, r2
 80040a6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	693a      	ldr	r2, [r7, #16]
 80040ac:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80040ae:	683b      	ldr	r3, [r7, #0]
 80040b0:	685b      	ldr	r3, [r3, #4]
 80040b2:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80040b6:	2b00      	cmp	r3, #0
 80040b8:	f000 80a0 	beq.w	80041fc <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80040bc:	4b58      	ldr	r3, [pc, #352]	; (8004220 <HAL_GPIO_Init+0x2d8>)
 80040be:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80040c0:	4a57      	ldr	r2, [pc, #348]	; (8004220 <HAL_GPIO_Init+0x2d8>)
 80040c2:	f043 0301 	orr.w	r3, r3, #1
 80040c6:	6613      	str	r3, [r2, #96]	; 0x60
 80040c8:	4b55      	ldr	r3, [pc, #340]	; (8004220 <HAL_GPIO_Init+0x2d8>)
 80040ca:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80040cc:	f003 0301 	and.w	r3, r3, #1
 80040d0:	60bb      	str	r3, [r7, #8]
 80040d2:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80040d4:	4a53      	ldr	r2, [pc, #332]	; (8004224 <HAL_GPIO_Init+0x2dc>)
 80040d6:	697b      	ldr	r3, [r7, #20]
 80040d8:	089b      	lsrs	r3, r3, #2
 80040da:	3302      	adds	r3, #2
 80040dc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80040e0:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80040e2:	697b      	ldr	r3, [r7, #20]
 80040e4:	f003 0303 	and.w	r3, r3, #3
 80040e8:	009b      	lsls	r3, r3, #2
 80040ea:	220f      	movs	r2, #15
 80040ec:	fa02 f303 	lsl.w	r3, r2, r3
 80040f0:	43db      	mvns	r3, r3
 80040f2:	693a      	ldr	r2, [r7, #16]
 80040f4:	4013      	ands	r3, r2
 80040f6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80040fe:	d019      	beq.n	8004134 <HAL_GPIO_Init+0x1ec>
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	4a49      	ldr	r2, [pc, #292]	; (8004228 <HAL_GPIO_Init+0x2e0>)
 8004104:	4293      	cmp	r3, r2
 8004106:	d013      	beq.n	8004130 <HAL_GPIO_Init+0x1e8>
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	4a48      	ldr	r2, [pc, #288]	; (800422c <HAL_GPIO_Init+0x2e4>)
 800410c:	4293      	cmp	r3, r2
 800410e:	d00d      	beq.n	800412c <HAL_GPIO_Init+0x1e4>
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	4a47      	ldr	r2, [pc, #284]	; (8004230 <HAL_GPIO_Init+0x2e8>)
 8004114:	4293      	cmp	r3, r2
 8004116:	d007      	beq.n	8004128 <HAL_GPIO_Init+0x1e0>
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	4a46      	ldr	r2, [pc, #280]	; (8004234 <HAL_GPIO_Init+0x2ec>)
 800411c:	4293      	cmp	r3, r2
 800411e:	d101      	bne.n	8004124 <HAL_GPIO_Init+0x1dc>
 8004120:	2304      	movs	r3, #4
 8004122:	e008      	b.n	8004136 <HAL_GPIO_Init+0x1ee>
 8004124:	2307      	movs	r3, #7
 8004126:	e006      	b.n	8004136 <HAL_GPIO_Init+0x1ee>
 8004128:	2303      	movs	r3, #3
 800412a:	e004      	b.n	8004136 <HAL_GPIO_Init+0x1ee>
 800412c:	2302      	movs	r3, #2
 800412e:	e002      	b.n	8004136 <HAL_GPIO_Init+0x1ee>
 8004130:	2301      	movs	r3, #1
 8004132:	e000      	b.n	8004136 <HAL_GPIO_Init+0x1ee>
 8004134:	2300      	movs	r3, #0
 8004136:	697a      	ldr	r2, [r7, #20]
 8004138:	f002 0203 	and.w	r2, r2, #3
 800413c:	0092      	lsls	r2, r2, #2
 800413e:	4093      	lsls	r3, r2
 8004140:	693a      	ldr	r2, [r7, #16]
 8004142:	4313      	orrs	r3, r2
 8004144:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8004146:	4937      	ldr	r1, [pc, #220]	; (8004224 <HAL_GPIO_Init+0x2dc>)
 8004148:	697b      	ldr	r3, [r7, #20]
 800414a:	089b      	lsrs	r3, r3, #2
 800414c:	3302      	adds	r3, #2
 800414e:	693a      	ldr	r2, [r7, #16]
 8004150:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8004154:	4b38      	ldr	r3, [pc, #224]	; (8004238 <HAL_GPIO_Init+0x2f0>)
 8004156:	689b      	ldr	r3, [r3, #8]
 8004158:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800415a:	68fb      	ldr	r3, [r7, #12]
 800415c:	43db      	mvns	r3, r3
 800415e:	693a      	ldr	r2, [r7, #16]
 8004160:	4013      	ands	r3, r2
 8004162:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8004164:	683b      	ldr	r3, [r7, #0]
 8004166:	685b      	ldr	r3, [r3, #4]
 8004168:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800416c:	2b00      	cmp	r3, #0
 800416e:	d003      	beq.n	8004178 <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 8004170:	693a      	ldr	r2, [r7, #16]
 8004172:	68fb      	ldr	r3, [r7, #12]
 8004174:	4313      	orrs	r3, r2
 8004176:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8004178:	4a2f      	ldr	r2, [pc, #188]	; (8004238 <HAL_GPIO_Init+0x2f0>)
 800417a:	693b      	ldr	r3, [r7, #16]
 800417c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800417e:	4b2e      	ldr	r3, [pc, #184]	; (8004238 <HAL_GPIO_Init+0x2f0>)
 8004180:	68db      	ldr	r3, [r3, #12]
 8004182:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004184:	68fb      	ldr	r3, [r7, #12]
 8004186:	43db      	mvns	r3, r3
 8004188:	693a      	ldr	r2, [r7, #16]
 800418a:	4013      	ands	r3, r2
 800418c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800418e:	683b      	ldr	r3, [r7, #0]
 8004190:	685b      	ldr	r3, [r3, #4]
 8004192:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004196:	2b00      	cmp	r3, #0
 8004198:	d003      	beq.n	80041a2 <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 800419a:	693a      	ldr	r2, [r7, #16]
 800419c:	68fb      	ldr	r3, [r7, #12]
 800419e:	4313      	orrs	r3, r2
 80041a0:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80041a2:	4a25      	ldr	r2, [pc, #148]	; (8004238 <HAL_GPIO_Init+0x2f0>)
 80041a4:	693b      	ldr	r3, [r7, #16]
 80041a6:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80041a8:	4b23      	ldr	r3, [pc, #140]	; (8004238 <HAL_GPIO_Init+0x2f0>)
 80041aa:	685b      	ldr	r3, [r3, #4]
 80041ac:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80041ae:	68fb      	ldr	r3, [r7, #12]
 80041b0:	43db      	mvns	r3, r3
 80041b2:	693a      	ldr	r2, [r7, #16]
 80041b4:	4013      	ands	r3, r2
 80041b6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80041b8:	683b      	ldr	r3, [r7, #0]
 80041ba:	685b      	ldr	r3, [r3, #4]
 80041bc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80041c0:	2b00      	cmp	r3, #0
 80041c2:	d003      	beq.n	80041cc <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 80041c4:	693a      	ldr	r2, [r7, #16]
 80041c6:	68fb      	ldr	r3, [r7, #12]
 80041c8:	4313      	orrs	r3, r2
 80041ca:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80041cc:	4a1a      	ldr	r2, [pc, #104]	; (8004238 <HAL_GPIO_Init+0x2f0>)
 80041ce:	693b      	ldr	r3, [r7, #16]
 80041d0:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 80041d2:	4b19      	ldr	r3, [pc, #100]	; (8004238 <HAL_GPIO_Init+0x2f0>)
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80041d8:	68fb      	ldr	r3, [r7, #12]
 80041da:	43db      	mvns	r3, r3
 80041dc:	693a      	ldr	r2, [r7, #16]
 80041de:	4013      	ands	r3, r2
 80041e0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80041e2:	683b      	ldr	r3, [r7, #0]
 80041e4:	685b      	ldr	r3, [r3, #4]
 80041e6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80041ea:	2b00      	cmp	r3, #0
 80041ec:	d003      	beq.n	80041f6 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 80041ee:	693a      	ldr	r2, [r7, #16]
 80041f0:	68fb      	ldr	r3, [r7, #12]
 80041f2:	4313      	orrs	r3, r2
 80041f4:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80041f6:	4a10      	ldr	r2, [pc, #64]	; (8004238 <HAL_GPIO_Init+0x2f0>)
 80041f8:	693b      	ldr	r3, [r7, #16]
 80041fa:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80041fc:	697b      	ldr	r3, [r7, #20]
 80041fe:	3301      	adds	r3, #1
 8004200:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004202:	683b      	ldr	r3, [r7, #0]
 8004204:	681a      	ldr	r2, [r3, #0]
 8004206:	697b      	ldr	r3, [r7, #20]
 8004208:	fa22 f303 	lsr.w	r3, r2, r3
 800420c:	2b00      	cmp	r3, #0
 800420e:	f47f aea3 	bne.w	8003f58 <HAL_GPIO_Init+0x10>
  }
}
 8004212:	bf00      	nop
 8004214:	bf00      	nop
 8004216:	371c      	adds	r7, #28
 8004218:	46bd      	mov	sp, r7
 800421a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800421e:	4770      	bx	lr
 8004220:	40021000 	.word	0x40021000
 8004224:	40010000 	.word	0x40010000
 8004228:	48000400 	.word	0x48000400
 800422c:	48000800 	.word	0x48000800
 8004230:	48000c00 	.word	0x48000c00
 8004234:	48001000 	.word	0x48001000
 8004238:	40010400 	.word	0x40010400

0800423c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800423c:	b480      	push	{r7}
 800423e:	b083      	sub	sp, #12
 8004240:	af00      	add	r7, sp, #0
 8004242:	6078      	str	r0, [r7, #4]
 8004244:	460b      	mov	r3, r1
 8004246:	807b      	strh	r3, [r7, #2]
 8004248:	4613      	mov	r3, r2
 800424a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800424c:	787b      	ldrb	r3, [r7, #1]
 800424e:	2b00      	cmp	r3, #0
 8004250:	d003      	beq.n	800425a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8004252:	887a      	ldrh	r2, [r7, #2]
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8004258:	e002      	b.n	8004260 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800425a:	887a      	ldrh	r2, [r7, #2]
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8004260:	bf00      	nop
 8004262:	370c      	adds	r7, #12
 8004264:	46bd      	mov	sp, r7
 8004266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800426a:	4770      	bx	lr

0800426c <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 800426c:	b480      	push	{r7}
 800426e:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8004270:	4b04      	ldr	r3, [pc, #16]	; (8004284 <HAL_PWREx_GetVoltageRange+0x18>)
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8004278:	4618      	mov	r0, r3
 800427a:	46bd      	mov	sp, r7
 800427c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004280:	4770      	bx	lr
 8004282:	bf00      	nop
 8004284:	40007000 	.word	0x40007000

08004288 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8004288:	b480      	push	{r7}
 800428a:	b085      	sub	sp, #20
 800428c:	af00      	add	r7, sp, #0
 800428e:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004296:	d130      	bne.n	80042fa <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8004298:	4b23      	ldr	r3, [pc, #140]	; (8004328 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80042a0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80042a4:	d038      	beq.n	8004318 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80042a6:	4b20      	ldr	r3, [pc, #128]	; (8004328 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80042ae:	4a1e      	ldr	r2, [pc, #120]	; (8004328 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80042b0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80042b4:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80042b6:	4b1d      	ldr	r3, [pc, #116]	; (800432c <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	2232      	movs	r2, #50	; 0x32
 80042bc:	fb02 f303 	mul.w	r3, r2, r3
 80042c0:	4a1b      	ldr	r2, [pc, #108]	; (8004330 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80042c2:	fba2 2303 	umull	r2, r3, r2, r3
 80042c6:	0c9b      	lsrs	r3, r3, #18
 80042c8:	3301      	adds	r3, #1
 80042ca:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80042cc:	e002      	b.n	80042d4 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 80042ce:	68fb      	ldr	r3, [r7, #12]
 80042d0:	3b01      	subs	r3, #1
 80042d2:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80042d4:	4b14      	ldr	r3, [pc, #80]	; (8004328 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80042d6:	695b      	ldr	r3, [r3, #20]
 80042d8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80042dc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80042e0:	d102      	bne.n	80042e8 <HAL_PWREx_ControlVoltageScaling+0x60>
 80042e2:	68fb      	ldr	r3, [r7, #12]
 80042e4:	2b00      	cmp	r3, #0
 80042e6:	d1f2      	bne.n	80042ce <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80042e8:	4b0f      	ldr	r3, [pc, #60]	; (8004328 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80042ea:	695b      	ldr	r3, [r3, #20]
 80042ec:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80042f0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80042f4:	d110      	bne.n	8004318 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80042f6:	2303      	movs	r3, #3
 80042f8:	e00f      	b.n	800431a <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80042fa:	4b0b      	ldr	r3, [pc, #44]	; (8004328 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8004302:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004306:	d007      	beq.n	8004318 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8004308:	4b07      	ldr	r3, [pc, #28]	; (8004328 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8004310:	4a05      	ldr	r2, [pc, #20]	; (8004328 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004312:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004316:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8004318:	2300      	movs	r3, #0
}
 800431a:	4618      	mov	r0, r3
 800431c:	3714      	adds	r7, #20
 800431e:	46bd      	mov	sp, r7
 8004320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004324:	4770      	bx	lr
 8004326:	bf00      	nop
 8004328:	40007000 	.word	0x40007000
 800432c:	20000008 	.word	0x20000008
 8004330:	431bde83 	.word	0x431bde83

08004334 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004334:	b580      	push	{r7, lr}
 8004336:	b088      	sub	sp, #32
 8004338:	af00      	add	r7, sp, #0
 800433a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	2b00      	cmp	r3, #0
 8004340:	d102      	bne.n	8004348 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8004342:	2301      	movs	r3, #1
 8004344:	f000 bc02 	b.w	8004b4c <HAL_RCC_OscConfig+0x818>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004348:	4b96      	ldr	r3, [pc, #600]	; (80045a4 <HAL_RCC_OscConfig+0x270>)
 800434a:	689b      	ldr	r3, [r3, #8]
 800434c:	f003 030c 	and.w	r3, r3, #12
 8004350:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004352:	4b94      	ldr	r3, [pc, #592]	; (80045a4 <HAL_RCC_OscConfig+0x270>)
 8004354:	68db      	ldr	r3, [r3, #12]
 8004356:	f003 0303 	and.w	r3, r3, #3
 800435a:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	f003 0310 	and.w	r3, r3, #16
 8004364:	2b00      	cmp	r3, #0
 8004366:	f000 80e4 	beq.w	8004532 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800436a:	69bb      	ldr	r3, [r7, #24]
 800436c:	2b00      	cmp	r3, #0
 800436e:	d007      	beq.n	8004380 <HAL_RCC_OscConfig+0x4c>
 8004370:	69bb      	ldr	r3, [r7, #24]
 8004372:	2b0c      	cmp	r3, #12
 8004374:	f040 808b 	bne.w	800448e <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8004378:	697b      	ldr	r3, [r7, #20]
 800437a:	2b01      	cmp	r3, #1
 800437c:	f040 8087 	bne.w	800448e <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8004380:	4b88      	ldr	r3, [pc, #544]	; (80045a4 <HAL_RCC_OscConfig+0x270>)
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	f003 0302 	and.w	r3, r3, #2
 8004388:	2b00      	cmp	r3, #0
 800438a:	d005      	beq.n	8004398 <HAL_RCC_OscConfig+0x64>
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	699b      	ldr	r3, [r3, #24]
 8004390:	2b00      	cmp	r3, #0
 8004392:	d101      	bne.n	8004398 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8004394:	2301      	movs	r3, #1
 8004396:	e3d9      	b.n	8004b4c <HAL_RCC_OscConfig+0x818>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	6a1a      	ldr	r2, [r3, #32]
 800439c:	4b81      	ldr	r3, [pc, #516]	; (80045a4 <HAL_RCC_OscConfig+0x270>)
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	f003 0308 	and.w	r3, r3, #8
 80043a4:	2b00      	cmp	r3, #0
 80043a6:	d004      	beq.n	80043b2 <HAL_RCC_OscConfig+0x7e>
 80043a8:	4b7e      	ldr	r3, [pc, #504]	; (80045a4 <HAL_RCC_OscConfig+0x270>)
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80043b0:	e005      	b.n	80043be <HAL_RCC_OscConfig+0x8a>
 80043b2:	4b7c      	ldr	r3, [pc, #496]	; (80045a4 <HAL_RCC_OscConfig+0x270>)
 80043b4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80043b8:	091b      	lsrs	r3, r3, #4
 80043ba:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80043be:	4293      	cmp	r3, r2
 80043c0:	d223      	bcs.n	800440a <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	6a1b      	ldr	r3, [r3, #32]
 80043c6:	4618      	mov	r0, r3
 80043c8:	f000 fd8c 	bl	8004ee4 <RCC_SetFlashLatencyFromMSIRange>
 80043cc:	4603      	mov	r3, r0
 80043ce:	2b00      	cmp	r3, #0
 80043d0:	d001      	beq.n	80043d6 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 80043d2:	2301      	movs	r3, #1
 80043d4:	e3ba      	b.n	8004b4c <HAL_RCC_OscConfig+0x818>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80043d6:	4b73      	ldr	r3, [pc, #460]	; (80045a4 <HAL_RCC_OscConfig+0x270>)
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	4a72      	ldr	r2, [pc, #456]	; (80045a4 <HAL_RCC_OscConfig+0x270>)
 80043dc:	f043 0308 	orr.w	r3, r3, #8
 80043e0:	6013      	str	r3, [r2, #0]
 80043e2:	4b70      	ldr	r3, [pc, #448]	; (80045a4 <HAL_RCC_OscConfig+0x270>)
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	6a1b      	ldr	r3, [r3, #32]
 80043ee:	496d      	ldr	r1, [pc, #436]	; (80045a4 <HAL_RCC_OscConfig+0x270>)
 80043f0:	4313      	orrs	r3, r2
 80043f2:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80043f4:	4b6b      	ldr	r3, [pc, #428]	; (80045a4 <HAL_RCC_OscConfig+0x270>)
 80043f6:	685b      	ldr	r3, [r3, #4]
 80043f8:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	69db      	ldr	r3, [r3, #28]
 8004400:	021b      	lsls	r3, r3, #8
 8004402:	4968      	ldr	r1, [pc, #416]	; (80045a4 <HAL_RCC_OscConfig+0x270>)
 8004404:	4313      	orrs	r3, r2
 8004406:	604b      	str	r3, [r1, #4]
 8004408:	e025      	b.n	8004456 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800440a:	4b66      	ldr	r3, [pc, #408]	; (80045a4 <HAL_RCC_OscConfig+0x270>)
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	4a65      	ldr	r2, [pc, #404]	; (80045a4 <HAL_RCC_OscConfig+0x270>)
 8004410:	f043 0308 	orr.w	r3, r3, #8
 8004414:	6013      	str	r3, [r2, #0]
 8004416:	4b63      	ldr	r3, [pc, #396]	; (80045a4 <HAL_RCC_OscConfig+0x270>)
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	6a1b      	ldr	r3, [r3, #32]
 8004422:	4960      	ldr	r1, [pc, #384]	; (80045a4 <HAL_RCC_OscConfig+0x270>)
 8004424:	4313      	orrs	r3, r2
 8004426:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004428:	4b5e      	ldr	r3, [pc, #376]	; (80045a4 <HAL_RCC_OscConfig+0x270>)
 800442a:	685b      	ldr	r3, [r3, #4]
 800442c:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	69db      	ldr	r3, [r3, #28]
 8004434:	021b      	lsls	r3, r3, #8
 8004436:	495b      	ldr	r1, [pc, #364]	; (80045a4 <HAL_RCC_OscConfig+0x270>)
 8004438:	4313      	orrs	r3, r2
 800443a:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 800443c:	69bb      	ldr	r3, [r7, #24]
 800443e:	2b00      	cmp	r3, #0
 8004440:	d109      	bne.n	8004456 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	6a1b      	ldr	r3, [r3, #32]
 8004446:	4618      	mov	r0, r3
 8004448:	f000 fd4c 	bl	8004ee4 <RCC_SetFlashLatencyFromMSIRange>
 800444c:	4603      	mov	r3, r0
 800444e:	2b00      	cmp	r3, #0
 8004450:	d001      	beq.n	8004456 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8004452:	2301      	movs	r3, #1
 8004454:	e37a      	b.n	8004b4c <HAL_RCC_OscConfig+0x818>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004456:	f000 fc81 	bl	8004d5c <HAL_RCC_GetSysClockFreq>
 800445a:	4602      	mov	r2, r0
 800445c:	4b51      	ldr	r3, [pc, #324]	; (80045a4 <HAL_RCC_OscConfig+0x270>)
 800445e:	689b      	ldr	r3, [r3, #8]
 8004460:	091b      	lsrs	r3, r3, #4
 8004462:	f003 030f 	and.w	r3, r3, #15
 8004466:	4950      	ldr	r1, [pc, #320]	; (80045a8 <HAL_RCC_OscConfig+0x274>)
 8004468:	5ccb      	ldrb	r3, [r1, r3]
 800446a:	f003 031f 	and.w	r3, r3, #31
 800446e:	fa22 f303 	lsr.w	r3, r2, r3
 8004472:	4a4e      	ldr	r2, [pc, #312]	; (80045ac <HAL_RCC_OscConfig+0x278>)
 8004474:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8004476:	4b4e      	ldr	r3, [pc, #312]	; (80045b0 <HAL_RCC_OscConfig+0x27c>)
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	4618      	mov	r0, r3
 800447c:	f7fd ffea 	bl	8002454 <HAL_InitTick>
 8004480:	4603      	mov	r3, r0
 8004482:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8004484:	7bfb      	ldrb	r3, [r7, #15]
 8004486:	2b00      	cmp	r3, #0
 8004488:	d052      	beq.n	8004530 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 800448a:	7bfb      	ldrb	r3, [r7, #15]
 800448c:	e35e      	b.n	8004b4c <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	699b      	ldr	r3, [r3, #24]
 8004492:	2b00      	cmp	r3, #0
 8004494:	d032      	beq.n	80044fc <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8004496:	4b43      	ldr	r3, [pc, #268]	; (80045a4 <HAL_RCC_OscConfig+0x270>)
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	4a42      	ldr	r2, [pc, #264]	; (80045a4 <HAL_RCC_OscConfig+0x270>)
 800449c:	f043 0301 	orr.w	r3, r3, #1
 80044a0:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80044a2:	f7fe f827 	bl	80024f4 <HAL_GetTick>
 80044a6:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80044a8:	e008      	b.n	80044bc <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80044aa:	f7fe f823 	bl	80024f4 <HAL_GetTick>
 80044ae:	4602      	mov	r2, r0
 80044b0:	693b      	ldr	r3, [r7, #16]
 80044b2:	1ad3      	subs	r3, r2, r3
 80044b4:	2b02      	cmp	r3, #2
 80044b6:	d901      	bls.n	80044bc <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 80044b8:	2303      	movs	r3, #3
 80044ba:	e347      	b.n	8004b4c <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80044bc:	4b39      	ldr	r3, [pc, #228]	; (80045a4 <HAL_RCC_OscConfig+0x270>)
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	f003 0302 	and.w	r3, r3, #2
 80044c4:	2b00      	cmp	r3, #0
 80044c6:	d0f0      	beq.n	80044aa <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80044c8:	4b36      	ldr	r3, [pc, #216]	; (80045a4 <HAL_RCC_OscConfig+0x270>)
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	4a35      	ldr	r2, [pc, #212]	; (80045a4 <HAL_RCC_OscConfig+0x270>)
 80044ce:	f043 0308 	orr.w	r3, r3, #8
 80044d2:	6013      	str	r3, [r2, #0]
 80044d4:	4b33      	ldr	r3, [pc, #204]	; (80045a4 <HAL_RCC_OscConfig+0x270>)
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	6a1b      	ldr	r3, [r3, #32]
 80044e0:	4930      	ldr	r1, [pc, #192]	; (80045a4 <HAL_RCC_OscConfig+0x270>)
 80044e2:	4313      	orrs	r3, r2
 80044e4:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80044e6:	4b2f      	ldr	r3, [pc, #188]	; (80045a4 <HAL_RCC_OscConfig+0x270>)
 80044e8:	685b      	ldr	r3, [r3, #4]
 80044ea:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	69db      	ldr	r3, [r3, #28]
 80044f2:	021b      	lsls	r3, r3, #8
 80044f4:	492b      	ldr	r1, [pc, #172]	; (80045a4 <HAL_RCC_OscConfig+0x270>)
 80044f6:	4313      	orrs	r3, r2
 80044f8:	604b      	str	r3, [r1, #4]
 80044fa:	e01a      	b.n	8004532 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80044fc:	4b29      	ldr	r3, [pc, #164]	; (80045a4 <HAL_RCC_OscConfig+0x270>)
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	4a28      	ldr	r2, [pc, #160]	; (80045a4 <HAL_RCC_OscConfig+0x270>)
 8004502:	f023 0301 	bic.w	r3, r3, #1
 8004506:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8004508:	f7fd fff4 	bl	80024f4 <HAL_GetTick>
 800450c:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800450e:	e008      	b.n	8004522 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004510:	f7fd fff0 	bl	80024f4 <HAL_GetTick>
 8004514:	4602      	mov	r2, r0
 8004516:	693b      	ldr	r3, [r7, #16]
 8004518:	1ad3      	subs	r3, r2, r3
 800451a:	2b02      	cmp	r3, #2
 800451c:	d901      	bls.n	8004522 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 800451e:	2303      	movs	r3, #3
 8004520:	e314      	b.n	8004b4c <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8004522:	4b20      	ldr	r3, [pc, #128]	; (80045a4 <HAL_RCC_OscConfig+0x270>)
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	f003 0302 	and.w	r3, r3, #2
 800452a:	2b00      	cmp	r3, #0
 800452c:	d1f0      	bne.n	8004510 <HAL_RCC_OscConfig+0x1dc>
 800452e:	e000      	b.n	8004532 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8004530:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	f003 0301 	and.w	r3, r3, #1
 800453a:	2b00      	cmp	r3, #0
 800453c:	d073      	beq.n	8004626 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 800453e:	69bb      	ldr	r3, [r7, #24]
 8004540:	2b08      	cmp	r3, #8
 8004542:	d005      	beq.n	8004550 <HAL_RCC_OscConfig+0x21c>
 8004544:	69bb      	ldr	r3, [r7, #24]
 8004546:	2b0c      	cmp	r3, #12
 8004548:	d10e      	bne.n	8004568 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 800454a:	697b      	ldr	r3, [r7, #20]
 800454c:	2b03      	cmp	r3, #3
 800454e:	d10b      	bne.n	8004568 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004550:	4b14      	ldr	r3, [pc, #80]	; (80045a4 <HAL_RCC_OscConfig+0x270>)
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004558:	2b00      	cmp	r3, #0
 800455a:	d063      	beq.n	8004624 <HAL_RCC_OscConfig+0x2f0>
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	685b      	ldr	r3, [r3, #4]
 8004560:	2b00      	cmp	r3, #0
 8004562:	d15f      	bne.n	8004624 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8004564:	2301      	movs	r3, #1
 8004566:	e2f1      	b.n	8004b4c <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	685b      	ldr	r3, [r3, #4]
 800456c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004570:	d106      	bne.n	8004580 <HAL_RCC_OscConfig+0x24c>
 8004572:	4b0c      	ldr	r3, [pc, #48]	; (80045a4 <HAL_RCC_OscConfig+0x270>)
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	4a0b      	ldr	r2, [pc, #44]	; (80045a4 <HAL_RCC_OscConfig+0x270>)
 8004578:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800457c:	6013      	str	r3, [r2, #0]
 800457e:	e025      	b.n	80045cc <HAL_RCC_OscConfig+0x298>
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	685b      	ldr	r3, [r3, #4]
 8004584:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004588:	d114      	bne.n	80045b4 <HAL_RCC_OscConfig+0x280>
 800458a:	4b06      	ldr	r3, [pc, #24]	; (80045a4 <HAL_RCC_OscConfig+0x270>)
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	4a05      	ldr	r2, [pc, #20]	; (80045a4 <HAL_RCC_OscConfig+0x270>)
 8004590:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004594:	6013      	str	r3, [r2, #0]
 8004596:	4b03      	ldr	r3, [pc, #12]	; (80045a4 <HAL_RCC_OscConfig+0x270>)
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	4a02      	ldr	r2, [pc, #8]	; (80045a4 <HAL_RCC_OscConfig+0x270>)
 800459c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80045a0:	6013      	str	r3, [r2, #0]
 80045a2:	e013      	b.n	80045cc <HAL_RCC_OscConfig+0x298>
 80045a4:	40021000 	.word	0x40021000
 80045a8:	0800c6c4 	.word	0x0800c6c4
 80045ac:	20000008 	.word	0x20000008
 80045b0:	2000000c 	.word	0x2000000c
 80045b4:	4ba0      	ldr	r3, [pc, #640]	; (8004838 <HAL_RCC_OscConfig+0x504>)
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	4a9f      	ldr	r2, [pc, #636]	; (8004838 <HAL_RCC_OscConfig+0x504>)
 80045ba:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80045be:	6013      	str	r3, [r2, #0]
 80045c0:	4b9d      	ldr	r3, [pc, #628]	; (8004838 <HAL_RCC_OscConfig+0x504>)
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	4a9c      	ldr	r2, [pc, #624]	; (8004838 <HAL_RCC_OscConfig+0x504>)
 80045c6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80045ca:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	685b      	ldr	r3, [r3, #4]
 80045d0:	2b00      	cmp	r3, #0
 80045d2:	d013      	beq.n	80045fc <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80045d4:	f7fd ff8e 	bl	80024f4 <HAL_GetTick>
 80045d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80045da:	e008      	b.n	80045ee <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80045dc:	f7fd ff8a 	bl	80024f4 <HAL_GetTick>
 80045e0:	4602      	mov	r2, r0
 80045e2:	693b      	ldr	r3, [r7, #16]
 80045e4:	1ad3      	subs	r3, r2, r3
 80045e6:	2b64      	cmp	r3, #100	; 0x64
 80045e8:	d901      	bls.n	80045ee <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80045ea:	2303      	movs	r3, #3
 80045ec:	e2ae      	b.n	8004b4c <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80045ee:	4b92      	ldr	r3, [pc, #584]	; (8004838 <HAL_RCC_OscConfig+0x504>)
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80045f6:	2b00      	cmp	r3, #0
 80045f8:	d0f0      	beq.n	80045dc <HAL_RCC_OscConfig+0x2a8>
 80045fa:	e014      	b.n	8004626 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80045fc:	f7fd ff7a 	bl	80024f4 <HAL_GetTick>
 8004600:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004602:	e008      	b.n	8004616 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004604:	f7fd ff76 	bl	80024f4 <HAL_GetTick>
 8004608:	4602      	mov	r2, r0
 800460a:	693b      	ldr	r3, [r7, #16]
 800460c:	1ad3      	subs	r3, r2, r3
 800460e:	2b64      	cmp	r3, #100	; 0x64
 8004610:	d901      	bls.n	8004616 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8004612:	2303      	movs	r3, #3
 8004614:	e29a      	b.n	8004b4c <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004616:	4b88      	ldr	r3, [pc, #544]	; (8004838 <HAL_RCC_OscConfig+0x504>)
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800461e:	2b00      	cmp	r3, #0
 8004620:	d1f0      	bne.n	8004604 <HAL_RCC_OscConfig+0x2d0>
 8004622:	e000      	b.n	8004626 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004624:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	f003 0302 	and.w	r3, r3, #2
 800462e:	2b00      	cmp	r3, #0
 8004630:	d060      	beq.n	80046f4 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8004632:	69bb      	ldr	r3, [r7, #24]
 8004634:	2b04      	cmp	r3, #4
 8004636:	d005      	beq.n	8004644 <HAL_RCC_OscConfig+0x310>
 8004638:	69bb      	ldr	r3, [r7, #24]
 800463a:	2b0c      	cmp	r3, #12
 800463c:	d119      	bne.n	8004672 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800463e:	697b      	ldr	r3, [r7, #20]
 8004640:	2b02      	cmp	r3, #2
 8004642:	d116      	bne.n	8004672 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004644:	4b7c      	ldr	r3, [pc, #496]	; (8004838 <HAL_RCC_OscConfig+0x504>)
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800464c:	2b00      	cmp	r3, #0
 800464e:	d005      	beq.n	800465c <HAL_RCC_OscConfig+0x328>
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	68db      	ldr	r3, [r3, #12]
 8004654:	2b00      	cmp	r3, #0
 8004656:	d101      	bne.n	800465c <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8004658:	2301      	movs	r3, #1
 800465a:	e277      	b.n	8004b4c <HAL_RCC_OscConfig+0x818>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800465c:	4b76      	ldr	r3, [pc, #472]	; (8004838 <HAL_RCC_OscConfig+0x504>)
 800465e:	685b      	ldr	r3, [r3, #4]
 8004660:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	691b      	ldr	r3, [r3, #16]
 8004668:	061b      	lsls	r3, r3, #24
 800466a:	4973      	ldr	r1, [pc, #460]	; (8004838 <HAL_RCC_OscConfig+0x504>)
 800466c:	4313      	orrs	r3, r2
 800466e:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004670:	e040      	b.n	80046f4 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	68db      	ldr	r3, [r3, #12]
 8004676:	2b00      	cmp	r3, #0
 8004678:	d023      	beq.n	80046c2 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800467a:	4b6f      	ldr	r3, [pc, #444]	; (8004838 <HAL_RCC_OscConfig+0x504>)
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	4a6e      	ldr	r2, [pc, #440]	; (8004838 <HAL_RCC_OscConfig+0x504>)
 8004680:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004684:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004686:	f7fd ff35 	bl	80024f4 <HAL_GetTick>
 800468a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800468c:	e008      	b.n	80046a0 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800468e:	f7fd ff31 	bl	80024f4 <HAL_GetTick>
 8004692:	4602      	mov	r2, r0
 8004694:	693b      	ldr	r3, [r7, #16]
 8004696:	1ad3      	subs	r3, r2, r3
 8004698:	2b02      	cmp	r3, #2
 800469a:	d901      	bls.n	80046a0 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 800469c:	2303      	movs	r3, #3
 800469e:	e255      	b.n	8004b4c <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80046a0:	4b65      	ldr	r3, [pc, #404]	; (8004838 <HAL_RCC_OscConfig+0x504>)
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80046a8:	2b00      	cmp	r3, #0
 80046aa:	d0f0      	beq.n	800468e <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80046ac:	4b62      	ldr	r3, [pc, #392]	; (8004838 <HAL_RCC_OscConfig+0x504>)
 80046ae:	685b      	ldr	r3, [r3, #4]
 80046b0:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	691b      	ldr	r3, [r3, #16]
 80046b8:	061b      	lsls	r3, r3, #24
 80046ba:	495f      	ldr	r1, [pc, #380]	; (8004838 <HAL_RCC_OscConfig+0x504>)
 80046bc:	4313      	orrs	r3, r2
 80046be:	604b      	str	r3, [r1, #4]
 80046c0:	e018      	b.n	80046f4 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80046c2:	4b5d      	ldr	r3, [pc, #372]	; (8004838 <HAL_RCC_OscConfig+0x504>)
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	4a5c      	ldr	r2, [pc, #368]	; (8004838 <HAL_RCC_OscConfig+0x504>)
 80046c8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80046cc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80046ce:	f7fd ff11 	bl	80024f4 <HAL_GetTick>
 80046d2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80046d4:	e008      	b.n	80046e8 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80046d6:	f7fd ff0d 	bl	80024f4 <HAL_GetTick>
 80046da:	4602      	mov	r2, r0
 80046dc:	693b      	ldr	r3, [r7, #16]
 80046de:	1ad3      	subs	r3, r2, r3
 80046e0:	2b02      	cmp	r3, #2
 80046e2:	d901      	bls.n	80046e8 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80046e4:	2303      	movs	r3, #3
 80046e6:	e231      	b.n	8004b4c <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80046e8:	4b53      	ldr	r3, [pc, #332]	; (8004838 <HAL_RCC_OscConfig+0x504>)
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80046f0:	2b00      	cmp	r3, #0
 80046f2:	d1f0      	bne.n	80046d6 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	f003 0308 	and.w	r3, r3, #8
 80046fc:	2b00      	cmp	r3, #0
 80046fe:	d03c      	beq.n	800477a <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	695b      	ldr	r3, [r3, #20]
 8004704:	2b00      	cmp	r3, #0
 8004706:	d01c      	beq.n	8004742 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004708:	4b4b      	ldr	r3, [pc, #300]	; (8004838 <HAL_RCC_OscConfig+0x504>)
 800470a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800470e:	4a4a      	ldr	r2, [pc, #296]	; (8004838 <HAL_RCC_OscConfig+0x504>)
 8004710:	f043 0301 	orr.w	r3, r3, #1
 8004714:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004718:	f7fd feec 	bl	80024f4 <HAL_GetTick>
 800471c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800471e:	e008      	b.n	8004732 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004720:	f7fd fee8 	bl	80024f4 <HAL_GetTick>
 8004724:	4602      	mov	r2, r0
 8004726:	693b      	ldr	r3, [r7, #16]
 8004728:	1ad3      	subs	r3, r2, r3
 800472a:	2b02      	cmp	r3, #2
 800472c:	d901      	bls.n	8004732 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800472e:	2303      	movs	r3, #3
 8004730:	e20c      	b.n	8004b4c <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004732:	4b41      	ldr	r3, [pc, #260]	; (8004838 <HAL_RCC_OscConfig+0x504>)
 8004734:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004738:	f003 0302 	and.w	r3, r3, #2
 800473c:	2b00      	cmp	r3, #0
 800473e:	d0ef      	beq.n	8004720 <HAL_RCC_OscConfig+0x3ec>
 8004740:	e01b      	b.n	800477a <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004742:	4b3d      	ldr	r3, [pc, #244]	; (8004838 <HAL_RCC_OscConfig+0x504>)
 8004744:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004748:	4a3b      	ldr	r2, [pc, #236]	; (8004838 <HAL_RCC_OscConfig+0x504>)
 800474a:	f023 0301 	bic.w	r3, r3, #1
 800474e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004752:	f7fd fecf 	bl	80024f4 <HAL_GetTick>
 8004756:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004758:	e008      	b.n	800476c <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800475a:	f7fd fecb 	bl	80024f4 <HAL_GetTick>
 800475e:	4602      	mov	r2, r0
 8004760:	693b      	ldr	r3, [r7, #16]
 8004762:	1ad3      	subs	r3, r2, r3
 8004764:	2b02      	cmp	r3, #2
 8004766:	d901      	bls.n	800476c <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8004768:	2303      	movs	r3, #3
 800476a:	e1ef      	b.n	8004b4c <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800476c:	4b32      	ldr	r3, [pc, #200]	; (8004838 <HAL_RCC_OscConfig+0x504>)
 800476e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004772:	f003 0302 	and.w	r3, r3, #2
 8004776:	2b00      	cmp	r3, #0
 8004778:	d1ef      	bne.n	800475a <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	f003 0304 	and.w	r3, r3, #4
 8004782:	2b00      	cmp	r3, #0
 8004784:	f000 80a6 	beq.w	80048d4 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004788:	2300      	movs	r3, #0
 800478a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 800478c:	4b2a      	ldr	r3, [pc, #168]	; (8004838 <HAL_RCC_OscConfig+0x504>)
 800478e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004790:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004794:	2b00      	cmp	r3, #0
 8004796:	d10d      	bne.n	80047b4 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004798:	4b27      	ldr	r3, [pc, #156]	; (8004838 <HAL_RCC_OscConfig+0x504>)
 800479a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800479c:	4a26      	ldr	r2, [pc, #152]	; (8004838 <HAL_RCC_OscConfig+0x504>)
 800479e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80047a2:	6593      	str	r3, [r2, #88]	; 0x58
 80047a4:	4b24      	ldr	r3, [pc, #144]	; (8004838 <HAL_RCC_OscConfig+0x504>)
 80047a6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80047a8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80047ac:	60bb      	str	r3, [r7, #8]
 80047ae:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80047b0:	2301      	movs	r3, #1
 80047b2:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80047b4:	4b21      	ldr	r3, [pc, #132]	; (800483c <HAL_RCC_OscConfig+0x508>)
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80047bc:	2b00      	cmp	r3, #0
 80047be:	d118      	bne.n	80047f2 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80047c0:	4b1e      	ldr	r3, [pc, #120]	; (800483c <HAL_RCC_OscConfig+0x508>)
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	4a1d      	ldr	r2, [pc, #116]	; (800483c <HAL_RCC_OscConfig+0x508>)
 80047c6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80047ca:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80047cc:	f7fd fe92 	bl	80024f4 <HAL_GetTick>
 80047d0:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80047d2:	e008      	b.n	80047e6 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80047d4:	f7fd fe8e 	bl	80024f4 <HAL_GetTick>
 80047d8:	4602      	mov	r2, r0
 80047da:	693b      	ldr	r3, [r7, #16]
 80047dc:	1ad3      	subs	r3, r2, r3
 80047de:	2b02      	cmp	r3, #2
 80047e0:	d901      	bls.n	80047e6 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80047e2:	2303      	movs	r3, #3
 80047e4:	e1b2      	b.n	8004b4c <HAL_RCC_OscConfig+0x818>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80047e6:	4b15      	ldr	r3, [pc, #84]	; (800483c <HAL_RCC_OscConfig+0x508>)
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80047ee:	2b00      	cmp	r3, #0
 80047f0:	d0f0      	beq.n	80047d4 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	689b      	ldr	r3, [r3, #8]
 80047f6:	2b01      	cmp	r3, #1
 80047f8:	d108      	bne.n	800480c <HAL_RCC_OscConfig+0x4d8>
 80047fa:	4b0f      	ldr	r3, [pc, #60]	; (8004838 <HAL_RCC_OscConfig+0x504>)
 80047fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004800:	4a0d      	ldr	r2, [pc, #52]	; (8004838 <HAL_RCC_OscConfig+0x504>)
 8004802:	f043 0301 	orr.w	r3, r3, #1
 8004806:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800480a:	e029      	b.n	8004860 <HAL_RCC_OscConfig+0x52c>
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	689b      	ldr	r3, [r3, #8]
 8004810:	2b05      	cmp	r3, #5
 8004812:	d115      	bne.n	8004840 <HAL_RCC_OscConfig+0x50c>
 8004814:	4b08      	ldr	r3, [pc, #32]	; (8004838 <HAL_RCC_OscConfig+0x504>)
 8004816:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800481a:	4a07      	ldr	r2, [pc, #28]	; (8004838 <HAL_RCC_OscConfig+0x504>)
 800481c:	f043 0304 	orr.w	r3, r3, #4
 8004820:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004824:	4b04      	ldr	r3, [pc, #16]	; (8004838 <HAL_RCC_OscConfig+0x504>)
 8004826:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800482a:	4a03      	ldr	r2, [pc, #12]	; (8004838 <HAL_RCC_OscConfig+0x504>)
 800482c:	f043 0301 	orr.w	r3, r3, #1
 8004830:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004834:	e014      	b.n	8004860 <HAL_RCC_OscConfig+0x52c>
 8004836:	bf00      	nop
 8004838:	40021000 	.word	0x40021000
 800483c:	40007000 	.word	0x40007000
 8004840:	4b9a      	ldr	r3, [pc, #616]	; (8004aac <HAL_RCC_OscConfig+0x778>)
 8004842:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004846:	4a99      	ldr	r2, [pc, #612]	; (8004aac <HAL_RCC_OscConfig+0x778>)
 8004848:	f023 0301 	bic.w	r3, r3, #1
 800484c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004850:	4b96      	ldr	r3, [pc, #600]	; (8004aac <HAL_RCC_OscConfig+0x778>)
 8004852:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004856:	4a95      	ldr	r2, [pc, #596]	; (8004aac <HAL_RCC_OscConfig+0x778>)
 8004858:	f023 0304 	bic.w	r3, r3, #4
 800485c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	689b      	ldr	r3, [r3, #8]
 8004864:	2b00      	cmp	r3, #0
 8004866:	d016      	beq.n	8004896 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004868:	f7fd fe44 	bl	80024f4 <HAL_GetTick>
 800486c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800486e:	e00a      	b.n	8004886 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004870:	f7fd fe40 	bl	80024f4 <HAL_GetTick>
 8004874:	4602      	mov	r2, r0
 8004876:	693b      	ldr	r3, [r7, #16]
 8004878:	1ad3      	subs	r3, r2, r3
 800487a:	f241 3288 	movw	r2, #5000	; 0x1388
 800487e:	4293      	cmp	r3, r2
 8004880:	d901      	bls.n	8004886 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8004882:	2303      	movs	r3, #3
 8004884:	e162      	b.n	8004b4c <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004886:	4b89      	ldr	r3, [pc, #548]	; (8004aac <HAL_RCC_OscConfig+0x778>)
 8004888:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800488c:	f003 0302 	and.w	r3, r3, #2
 8004890:	2b00      	cmp	r3, #0
 8004892:	d0ed      	beq.n	8004870 <HAL_RCC_OscConfig+0x53c>
 8004894:	e015      	b.n	80048c2 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004896:	f7fd fe2d 	bl	80024f4 <HAL_GetTick>
 800489a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800489c:	e00a      	b.n	80048b4 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800489e:	f7fd fe29 	bl	80024f4 <HAL_GetTick>
 80048a2:	4602      	mov	r2, r0
 80048a4:	693b      	ldr	r3, [r7, #16]
 80048a6:	1ad3      	subs	r3, r2, r3
 80048a8:	f241 3288 	movw	r2, #5000	; 0x1388
 80048ac:	4293      	cmp	r3, r2
 80048ae:	d901      	bls.n	80048b4 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80048b0:	2303      	movs	r3, #3
 80048b2:	e14b      	b.n	8004b4c <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80048b4:	4b7d      	ldr	r3, [pc, #500]	; (8004aac <HAL_RCC_OscConfig+0x778>)
 80048b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80048ba:	f003 0302 	and.w	r3, r3, #2
 80048be:	2b00      	cmp	r3, #0
 80048c0:	d1ed      	bne.n	800489e <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80048c2:	7ffb      	ldrb	r3, [r7, #31]
 80048c4:	2b01      	cmp	r3, #1
 80048c6:	d105      	bne.n	80048d4 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80048c8:	4b78      	ldr	r3, [pc, #480]	; (8004aac <HAL_RCC_OscConfig+0x778>)
 80048ca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80048cc:	4a77      	ldr	r2, [pc, #476]	; (8004aac <HAL_RCC_OscConfig+0x778>)
 80048ce:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80048d2:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	f003 0320 	and.w	r3, r3, #32
 80048dc:	2b00      	cmp	r3, #0
 80048de:	d03c      	beq.n	800495a <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048e4:	2b00      	cmp	r3, #0
 80048e6:	d01c      	beq.n	8004922 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80048e8:	4b70      	ldr	r3, [pc, #448]	; (8004aac <HAL_RCC_OscConfig+0x778>)
 80048ea:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80048ee:	4a6f      	ldr	r2, [pc, #444]	; (8004aac <HAL_RCC_OscConfig+0x778>)
 80048f0:	f043 0301 	orr.w	r3, r3, #1
 80048f4:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80048f8:	f7fd fdfc 	bl	80024f4 <HAL_GetTick>
 80048fc:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80048fe:	e008      	b.n	8004912 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004900:	f7fd fdf8 	bl	80024f4 <HAL_GetTick>
 8004904:	4602      	mov	r2, r0
 8004906:	693b      	ldr	r3, [r7, #16]
 8004908:	1ad3      	subs	r3, r2, r3
 800490a:	2b02      	cmp	r3, #2
 800490c:	d901      	bls.n	8004912 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 800490e:	2303      	movs	r3, #3
 8004910:	e11c      	b.n	8004b4c <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8004912:	4b66      	ldr	r3, [pc, #408]	; (8004aac <HAL_RCC_OscConfig+0x778>)
 8004914:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004918:	f003 0302 	and.w	r3, r3, #2
 800491c:	2b00      	cmp	r3, #0
 800491e:	d0ef      	beq.n	8004900 <HAL_RCC_OscConfig+0x5cc>
 8004920:	e01b      	b.n	800495a <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8004922:	4b62      	ldr	r3, [pc, #392]	; (8004aac <HAL_RCC_OscConfig+0x778>)
 8004924:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004928:	4a60      	ldr	r2, [pc, #384]	; (8004aac <HAL_RCC_OscConfig+0x778>)
 800492a:	f023 0301 	bic.w	r3, r3, #1
 800492e:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004932:	f7fd fddf 	bl	80024f4 <HAL_GetTick>
 8004936:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004938:	e008      	b.n	800494c <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800493a:	f7fd fddb 	bl	80024f4 <HAL_GetTick>
 800493e:	4602      	mov	r2, r0
 8004940:	693b      	ldr	r3, [r7, #16]
 8004942:	1ad3      	subs	r3, r2, r3
 8004944:	2b02      	cmp	r3, #2
 8004946:	d901      	bls.n	800494c <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8004948:	2303      	movs	r3, #3
 800494a:	e0ff      	b.n	8004b4c <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800494c:	4b57      	ldr	r3, [pc, #348]	; (8004aac <HAL_RCC_OscConfig+0x778>)
 800494e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004952:	f003 0302 	and.w	r3, r3, #2
 8004956:	2b00      	cmp	r3, #0
 8004958:	d1ef      	bne.n	800493a <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800495e:	2b00      	cmp	r3, #0
 8004960:	f000 80f3 	beq.w	8004b4a <HAL_RCC_OscConfig+0x816>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004968:	2b02      	cmp	r3, #2
 800496a:	f040 80c9 	bne.w	8004b00 <HAL_RCC_OscConfig+0x7cc>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 800496e:	4b4f      	ldr	r3, [pc, #316]	; (8004aac <HAL_RCC_OscConfig+0x778>)
 8004970:	68db      	ldr	r3, [r3, #12]
 8004972:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004974:	697b      	ldr	r3, [r7, #20]
 8004976:	f003 0203 	and.w	r2, r3, #3
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800497e:	429a      	cmp	r2, r3
 8004980:	d12c      	bne.n	80049dc <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004982:	697b      	ldr	r3, [r7, #20]
 8004984:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800498c:	3b01      	subs	r3, #1
 800498e:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004990:	429a      	cmp	r2, r3
 8004992:	d123      	bne.n	80049dc <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004994:	697b      	ldr	r3, [r7, #20]
 8004996:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800499e:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80049a0:	429a      	cmp	r2, r3
 80049a2:	d11b      	bne.n	80049dc <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80049a4:	697b      	ldr	r3, [r7, #20]
 80049a6:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80049ae:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80049b0:	429a      	cmp	r2, r3
 80049b2:	d113      	bne.n	80049dc <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80049b4:	697b      	ldr	r3, [r7, #20]
 80049b6:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80049be:	085b      	lsrs	r3, r3, #1
 80049c0:	3b01      	subs	r3, #1
 80049c2:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80049c4:	429a      	cmp	r2, r3
 80049c6:	d109      	bne.n	80049dc <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80049c8:	697b      	ldr	r3, [r7, #20]
 80049ca:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049d2:	085b      	lsrs	r3, r3, #1
 80049d4:	3b01      	subs	r3, #1
 80049d6:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80049d8:	429a      	cmp	r2, r3
 80049da:	d06b      	beq.n	8004ab4 <HAL_RCC_OscConfig+0x780>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80049dc:	69bb      	ldr	r3, [r7, #24]
 80049de:	2b0c      	cmp	r3, #12
 80049e0:	d062      	beq.n	8004aa8 <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80049e2:	4b32      	ldr	r3, [pc, #200]	; (8004aac <HAL_RCC_OscConfig+0x778>)
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80049ea:	2b00      	cmp	r3, #0
 80049ec:	d001      	beq.n	80049f2 <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 80049ee:	2301      	movs	r3, #1
 80049f0:	e0ac      	b.n	8004b4c <HAL_RCC_OscConfig+0x818>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80049f2:	4b2e      	ldr	r3, [pc, #184]	; (8004aac <HAL_RCC_OscConfig+0x778>)
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	4a2d      	ldr	r2, [pc, #180]	; (8004aac <HAL_RCC_OscConfig+0x778>)
 80049f8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80049fc:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80049fe:	f7fd fd79 	bl	80024f4 <HAL_GetTick>
 8004a02:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004a04:	e008      	b.n	8004a18 <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004a06:	f7fd fd75 	bl	80024f4 <HAL_GetTick>
 8004a0a:	4602      	mov	r2, r0
 8004a0c:	693b      	ldr	r3, [r7, #16]
 8004a0e:	1ad3      	subs	r3, r2, r3
 8004a10:	2b02      	cmp	r3, #2
 8004a12:	d901      	bls.n	8004a18 <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 8004a14:	2303      	movs	r3, #3
 8004a16:	e099      	b.n	8004b4c <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004a18:	4b24      	ldr	r3, [pc, #144]	; (8004aac <HAL_RCC_OscConfig+0x778>)
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004a20:	2b00      	cmp	r3, #0
 8004a22:	d1f0      	bne.n	8004a06 <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004a24:	4b21      	ldr	r3, [pc, #132]	; (8004aac <HAL_RCC_OscConfig+0x778>)
 8004a26:	68da      	ldr	r2, [r3, #12]
 8004a28:	4b21      	ldr	r3, [pc, #132]	; (8004ab0 <HAL_RCC_OscConfig+0x77c>)
 8004a2a:	4013      	ands	r3, r2
 8004a2c:	687a      	ldr	r2, [r7, #4]
 8004a2e:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8004a30:	687a      	ldr	r2, [r7, #4]
 8004a32:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8004a34:	3a01      	subs	r2, #1
 8004a36:	0112      	lsls	r2, r2, #4
 8004a38:	4311      	orrs	r1, r2
 8004a3a:	687a      	ldr	r2, [r7, #4]
 8004a3c:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8004a3e:	0212      	lsls	r2, r2, #8
 8004a40:	4311      	orrs	r1, r2
 8004a42:	687a      	ldr	r2, [r7, #4]
 8004a44:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8004a46:	0852      	lsrs	r2, r2, #1
 8004a48:	3a01      	subs	r2, #1
 8004a4a:	0552      	lsls	r2, r2, #21
 8004a4c:	4311      	orrs	r1, r2
 8004a4e:	687a      	ldr	r2, [r7, #4]
 8004a50:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8004a52:	0852      	lsrs	r2, r2, #1
 8004a54:	3a01      	subs	r2, #1
 8004a56:	0652      	lsls	r2, r2, #25
 8004a58:	4311      	orrs	r1, r2
 8004a5a:	687a      	ldr	r2, [r7, #4]
 8004a5c:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004a5e:	06d2      	lsls	r2, r2, #27
 8004a60:	430a      	orrs	r2, r1
 8004a62:	4912      	ldr	r1, [pc, #72]	; (8004aac <HAL_RCC_OscConfig+0x778>)
 8004a64:	4313      	orrs	r3, r2
 8004a66:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8004a68:	4b10      	ldr	r3, [pc, #64]	; (8004aac <HAL_RCC_OscConfig+0x778>)
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	4a0f      	ldr	r2, [pc, #60]	; (8004aac <HAL_RCC_OscConfig+0x778>)
 8004a6e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004a72:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004a74:	4b0d      	ldr	r3, [pc, #52]	; (8004aac <HAL_RCC_OscConfig+0x778>)
 8004a76:	68db      	ldr	r3, [r3, #12]
 8004a78:	4a0c      	ldr	r2, [pc, #48]	; (8004aac <HAL_RCC_OscConfig+0x778>)
 8004a7a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004a7e:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004a80:	f7fd fd38 	bl	80024f4 <HAL_GetTick>
 8004a84:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004a86:	e008      	b.n	8004a9a <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004a88:	f7fd fd34 	bl	80024f4 <HAL_GetTick>
 8004a8c:	4602      	mov	r2, r0
 8004a8e:	693b      	ldr	r3, [r7, #16]
 8004a90:	1ad3      	subs	r3, r2, r3
 8004a92:	2b02      	cmp	r3, #2
 8004a94:	d901      	bls.n	8004a9a <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 8004a96:	2303      	movs	r3, #3
 8004a98:	e058      	b.n	8004b4c <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004a9a:	4b04      	ldr	r3, [pc, #16]	; (8004aac <HAL_RCC_OscConfig+0x778>)
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004aa2:	2b00      	cmp	r3, #0
 8004aa4:	d0f0      	beq.n	8004a88 <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004aa6:	e050      	b.n	8004b4a <HAL_RCC_OscConfig+0x816>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8004aa8:	2301      	movs	r3, #1
 8004aaa:	e04f      	b.n	8004b4c <HAL_RCC_OscConfig+0x818>
 8004aac:	40021000 	.word	0x40021000
 8004ab0:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004ab4:	4b27      	ldr	r3, [pc, #156]	; (8004b54 <HAL_RCC_OscConfig+0x820>)
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004abc:	2b00      	cmp	r3, #0
 8004abe:	d144      	bne.n	8004b4a <HAL_RCC_OscConfig+0x816>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8004ac0:	4b24      	ldr	r3, [pc, #144]	; (8004b54 <HAL_RCC_OscConfig+0x820>)
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	4a23      	ldr	r2, [pc, #140]	; (8004b54 <HAL_RCC_OscConfig+0x820>)
 8004ac6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004aca:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004acc:	4b21      	ldr	r3, [pc, #132]	; (8004b54 <HAL_RCC_OscConfig+0x820>)
 8004ace:	68db      	ldr	r3, [r3, #12]
 8004ad0:	4a20      	ldr	r2, [pc, #128]	; (8004b54 <HAL_RCC_OscConfig+0x820>)
 8004ad2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004ad6:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8004ad8:	f7fd fd0c 	bl	80024f4 <HAL_GetTick>
 8004adc:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004ade:	e008      	b.n	8004af2 <HAL_RCC_OscConfig+0x7be>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004ae0:	f7fd fd08 	bl	80024f4 <HAL_GetTick>
 8004ae4:	4602      	mov	r2, r0
 8004ae6:	693b      	ldr	r3, [r7, #16]
 8004ae8:	1ad3      	subs	r3, r2, r3
 8004aea:	2b02      	cmp	r3, #2
 8004aec:	d901      	bls.n	8004af2 <HAL_RCC_OscConfig+0x7be>
            {
              return HAL_TIMEOUT;
 8004aee:	2303      	movs	r3, #3
 8004af0:	e02c      	b.n	8004b4c <HAL_RCC_OscConfig+0x818>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004af2:	4b18      	ldr	r3, [pc, #96]	; (8004b54 <HAL_RCC_OscConfig+0x820>)
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004afa:	2b00      	cmp	r3, #0
 8004afc:	d0f0      	beq.n	8004ae0 <HAL_RCC_OscConfig+0x7ac>
 8004afe:	e024      	b.n	8004b4a <HAL_RCC_OscConfig+0x816>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004b00:	69bb      	ldr	r3, [r7, #24]
 8004b02:	2b0c      	cmp	r3, #12
 8004b04:	d01f      	beq.n	8004b46 <HAL_RCC_OscConfig+0x812>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004b06:	4b13      	ldr	r3, [pc, #76]	; (8004b54 <HAL_RCC_OscConfig+0x820>)
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	4a12      	ldr	r2, [pc, #72]	; (8004b54 <HAL_RCC_OscConfig+0x820>)
 8004b0c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004b10:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004b12:	f7fd fcef 	bl	80024f4 <HAL_GetTick>
 8004b16:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004b18:	e008      	b.n	8004b2c <HAL_RCC_OscConfig+0x7f8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004b1a:	f7fd fceb 	bl	80024f4 <HAL_GetTick>
 8004b1e:	4602      	mov	r2, r0
 8004b20:	693b      	ldr	r3, [r7, #16]
 8004b22:	1ad3      	subs	r3, r2, r3
 8004b24:	2b02      	cmp	r3, #2
 8004b26:	d901      	bls.n	8004b2c <HAL_RCC_OscConfig+0x7f8>
          {
            return HAL_TIMEOUT;
 8004b28:	2303      	movs	r3, #3
 8004b2a:	e00f      	b.n	8004b4c <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004b2c:	4b09      	ldr	r3, [pc, #36]	; (8004b54 <HAL_RCC_OscConfig+0x820>)
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004b34:	2b00      	cmp	r3, #0
 8004b36:	d1f0      	bne.n	8004b1a <HAL_RCC_OscConfig+0x7e6>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 8004b38:	4b06      	ldr	r3, [pc, #24]	; (8004b54 <HAL_RCC_OscConfig+0x820>)
 8004b3a:	68da      	ldr	r2, [r3, #12]
 8004b3c:	4905      	ldr	r1, [pc, #20]	; (8004b54 <HAL_RCC_OscConfig+0x820>)
 8004b3e:	4b06      	ldr	r3, [pc, #24]	; (8004b58 <HAL_RCC_OscConfig+0x824>)
 8004b40:	4013      	ands	r3, r2
 8004b42:	60cb      	str	r3, [r1, #12]
 8004b44:	e001      	b.n	8004b4a <HAL_RCC_OscConfig+0x816>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8004b46:	2301      	movs	r3, #1
 8004b48:	e000      	b.n	8004b4c <HAL_RCC_OscConfig+0x818>
      }
    }
  }
  return HAL_OK;
 8004b4a:	2300      	movs	r3, #0
}
 8004b4c:	4618      	mov	r0, r3
 8004b4e:	3720      	adds	r7, #32
 8004b50:	46bd      	mov	sp, r7
 8004b52:	bd80      	pop	{r7, pc}
 8004b54:	40021000 	.word	0x40021000
 8004b58:	feeefffc 	.word	0xfeeefffc

08004b5c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004b5c:	b580      	push	{r7, lr}
 8004b5e:	b084      	sub	sp, #16
 8004b60:	af00      	add	r7, sp, #0
 8004b62:	6078      	str	r0, [r7, #4]
 8004b64:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	2b00      	cmp	r3, #0
 8004b6a:	d101      	bne.n	8004b70 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004b6c:	2301      	movs	r3, #1
 8004b6e:	e0e7      	b.n	8004d40 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004b70:	4b75      	ldr	r3, [pc, #468]	; (8004d48 <HAL_RCC_ClockConfig+0x1ec>)
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	f003 0307 	and.w	r3, r3, #7
 8004b78:	683a      	ldr	r2, [r7, #0]
 8004b7a:	429a      	cmp	r2, r3
 8004b7c:	d910      	bls.n	8004ba0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004b7e:	4b72      	ldr	r3, [pc, #456]	; (8004d48 <HAL_RCC_ClockConfig+0x1ec>)
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	f023 0207 	bic.w	r2, r3, #7
 8004b86:	4970      	ldr	r1, [pc, #448]	; (8004d48 <HAL_RCC_ClockConfig+0x1ec>)
 8004b88:	683b      	ldr	r3, [r7, #0]
 8004b8a:	4313      	orrs	r3, r2
 8004b8c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004b8e:	4b6e      	ldr	r3, [pc, #440]	; (8004d48 <HAL_RCC_ClockConfig+0x1ec>)
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	f003 0307 	and.w	r3, r3, #7
 8004b96:	683a      	ldr	r2, [r7, #0]
 8004b98:	429a      	cmp	r2, r3
 8004b9a:	d001      	beq.n	8004ba0 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8004b9c:	2301      	movs	r3, #1
 8004b9e:	e0cf      	b.n	8004d40 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	f003 0302 	and.w	r3, r3, #2
 8004ba8:	2b00      	cmp	r3, #0
 8004baa:	d010      	beq.n	8004bce <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	689a      	ldr	r2, [r3, #8]
 8004bb0:	4b66      	ldr	r3, [pc, #408]	; (8004d4c <HAL_RCC_ClockConfig+0x1f0>)
 8004bb2:	689b      	ldr	r3, [r3, #8]
 8004bb4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004bb8:	429a      	cmp	r2, r3
 8004bba:	d908      	bls.n	8004bce <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004bbc:	4b63      	ldr	r3, [pc, #396]	; (8004d4c <HAL_RCC_ClockConfig+0x1f0>)
 8004bbe:	689b      	ldr	r3, [r3, #8]
 8004bc0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	689b      	ldr	r3, [r3, #8]
 8004bc8:	4960      	ldr	r1, [pc, #384]	; (8004d4c <HAL_RCC_ClockConfig+0x1f0>)
 8004bca:	4313      	orrs	r3, r2
 8004bcc:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	f003 0301 	and.w	r3, r3, #1
 8004bd6:	2b00      	cmp	r3, #0
 8004bd8:	d04c      	beq.n	8004c74 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	685b      	ldr	r3, [r3, #4]
 8004bde:	2b03      	cmp	r3, #3
 8004be0:	d107      	bne.n	8004bf2 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004be2:	4b5a      	ldr	r3, [pc, #360]	; (8004d4c <HAL_RCC_ClockConfig+0x1f0>)
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004bea:	2b00      	cmp	r3, #0
 8004bec:	d121      	bne.n	8004c32 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8004bee:	2301      	movs	r3, #1
 8004bf0:	e0a6      	b.n	8004d40 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	685b      	ldr	r3, [r3, #4]
 8004bf6:	2b02      	cmp	r3, #2
 8004bf8:	d107      	bne.n	8004c0a <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004bfa:	4b54      	ldr	r3, [pc, #336]	; (8004d4c <HAL_RCC_ClockConfig+0x1f0>)
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004c02:	2b00      	cmp	r3, #0
 8004c04:	d115      	bne.n	8004c32 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8004c06:	2301      	movs	r3, #1
 8004c08:	e09a      	b.n	8004d40 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	685b      	ldr	r3, [r3, #4]
 8004c0e:	2b00      	cmp	r3, #0
 8004c10:	d107      	bne.n	8004c22 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004c12:	4b4e      	ldr	r3, [pc, #312]	; (8004d4c <HAL_RCC_ClockConfig+0x1f0>)
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	f003 0302 	and.w	r3, r3, #2
 8004c1a:	2b00      	cmp	r3, #0
 8004c1c:	d109      	bne.n	8004c32 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8004c1e:	2301      	movs	r3, #1
 8004c20:	e08e      	b.n	8004d40 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004c22:	4b4a      	ldr	r3, [pc, #296]	; (8004d4c <HAL_RCC_ClockConfig+0x1f0>)
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004c2a:	2b00      	cmp	r3, #0
 8004c2c:	d101      	bne.n	8004c32 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8004c2e:	2301      	movs	r3, #1
 8004c30:	e086      	b.n	8004d40 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004c32:	4b46      	ldr	r3, [pc, #280]	; (8004d4c <HAL_RCC_ClockConfig+0x1f0>)
 8004c34:	689b      	ldr	r3, [r3, #8]
 8004c36:	f023 0203 	bic.w	r2, r3, #3
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	685b      	ldr	r3, [r3, #4]
 8004c3e:	4943      	ldr	r1, [pc, #268]	; (8004d4c <HAL_RCC_ClockConfig+0x1f0>)
 8004c40:	4313      	orrs	r3, r2
 8004c42:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004c44:	f7fd fc56 	bl	80024f4 <HAL_GetTick>
 8004c48:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004c4a:	e00a      	b.n	8004c62 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004c4c:	f7fd fc52 	bl	80024f4 <HAL_GetTick>
 8004c50:	4602      	mov	r2, r0
 8004c52:	68fb      	ldr	r3, [r7, #12]
 8004c54:	1ad3      	subs	r3, r2, r3
 8004c56:	f241 3288 	movw	r2, #5000	; 0x1388
 8004c5a:	4293      	cmp	r3, r2
 8004c5c:	d901      	bls.n	8004c62 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8004c5e:	2303      	movs	r3, #3
 8004c60:	e06e      	b.n	8004d40 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004c62:	4b3a      	ldr	r3, [pc, #232]	; (8004d4c <HAL_RCC_ClockConfig+0x1f0>)
 8004c64:	689b      	ldr	r3, [r3, #8]
 8004c66:	f003 020c 	and.w	r2, r3, #12
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	685b      	ldr	r3, [r3, #4]
 8004c6e:	009b      	lsls	r3, r3, #2
 8004c70:	429a      	cmp	r2, r3
 8004c72:	d1eb      	bne.n	8004c4c <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	f003 0302 	and.w	r3, r3, #2
 8004c7c:	2b00      	cmp	r3, #0
 8004c7e:	d010      	beq.n	8004ca2 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	689a      	ldr	r2, [r3, #8]
 8004c84:	4b31      	ldr	r3, [pc, #196]	; (8004d4c <HAL_RCC_ClockConfig+0x1f0>)
 8004c86:	689b      	ldr	r3, [r3, #8]
 8004c88:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004c8c:	429a      	cmp	r2, r3
 8004c8e:	d208      	bcs.n	8004ca2 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004c90:	4b2e      	ldr	r3, [pc, #184]	; (8004d4c <HAL_RCC_ClockConfig+0x1f0>)
 8004c92:	689b      	ldr	r3, [r3, #8]
 8004c94:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	689b      	ldr	r3, [r3, #8]
 8004c9c:	492b      	ldr	r1, [pc, #172]	; (8004d4c <HAL_RCC_ClockConfig+0x1f0>)
 8004c9e:	4313      	orrs	r3, r2
 8004ca0:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004ca2:	4b29      	ldr	r3, [pc, #164]	; (8004d48 <HAL_RCC_ClockConfig+0x1ec>)
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	f003 0307 	and.w	r3, r3, #7
 8004caa:	683a      	ldr	r2, [r7, #0]
 8004cac:	429a      	cmp	r2, r3
 8004cae:	d210      	bcs.n	8004cd2 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004cb0:	4b25      	ldr	r3, [pc, #148]	; (8004d48 <HAL_RCC_ClockConfig+0x1ec>)
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	f023 0207 	bic.w	r2, r3, #7
 8004cb8:	4923      	ldr	r1, [pc, #140]	; (8004d48 <HAL_RCC_ClockConfig+0x1ec>)
 8004cba:	683b      	ldr	r3, [r7, #0]
 8004cbc:	4313      	orrs	r3, r2
 8004cbe:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004cc0:	4b21      	ldr	r3, [pc, #132]	; (8004d48 <HAL_RCC_ClockConfig+0x1ec>)
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	f003 0307 	and.w	r3, r3, #7
 8004cc8:	683a      	ldr	r2, [r7, #0]
 8004cca:	429a      	cmp	r2, r3
 8004ccc:	d001      	beq.n	8004cd2 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8004cce:	2301      	movs	r3, #1
 8004cd0:	e036      	b.n	8004d40 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	f003 0304 	and.w	r3, r3, #4
 8004cda:	2b00      	cmp	r3, #0
 8004cdc:	d008      	beq.n	8004cf0 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004cde:	4b1b      	ldr	r3, [pc, #108]	; (8004d4c <HAL_RCC_ClockConfig+0x1f0>)
 8004ce0:	689b      	ldr	r3, [r3, #8]
 8004ce2:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	68db      	ldr	r3, [r3, #12]
 8004cea:	4918      	ldr	r1, [pc, #96]	; (8004d4c <HAL_RCC_ClockConfig+0x1f0>)
 8004cec:	4313      	orrs	r3, r2
 8004cee:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	f003 0308 	and.w	r3, r3, #8
 8004cf8:	2b00      	cmp	r3, #0
 8004cfa:	d009      	beq.n	8004d10 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004cfc:	4b13      	ldr	r3, [pc, #76]	; (8004d4c <HAL_RCC_ClockConfig+0x1f0>)
 8004cfe:	689b      	ldr	r3, [r3, #8]
 8004d00:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	691b      	ldr	r3, [r3, #16]
 8004d08:	00db      	lsls	r3, r3, #3
 8004d0a:	4910      	ldr	r1, [pc, #64]	; (8004d4c <HAL_RCC_ClockConfig+0x1f0>)
 8004d0c:	4313      	orrs	r3, r2
 8004d0e:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004d10:	f000 f824 	bl	8004d5c <HAL_RCC_GetSysClockFreq>
 8004d14:	4602      	mov	r2, r0
 8004d16:	4b0d      	ldr	r3, [pc, #52]	; (8004d4c <HAL_RCC_ClockConfig+0x1f0>)
 8004d18:	689b      	ldr	r3, [r3, #8]
 8004d1a:	091b      	lsrs	r3, r3, #4
 8004d1c:	f003 030f 	and.w	r3, r3, #15
 8004d20:	490b      	ldr	r1, [pc, #44]	; (8004d50 <HAL_RCC_ClockConfig+0x1f4>)
 8004d22:	5ccb      	ldrb	r3, [r1, r3]
 8004d24:	f003 031f 	and.w	r3, r3, #31
 8004d28:	fa22 f303 	lsr.w	r3, r2, r3
 8004d2c:	4a09      	ldr	r2, [pc, #36]	; (8004d54 <HAL_RCC_ClockConfig+0x1f8>)
 8004d2e:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8004d30:	4b09      	ldr	r3, [pc, #36]	; (8004d58 <HAL_RCC_ClockConfig+0x1fc>)
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	4618      	mov	r0, r3
 8004d36:	f7fd fb8d 	bl	8002454 <HAL_InitTick>
 8004d3a:	4603      	mov	r3, r0
 8004d3c:	72fb      	strb	r3, [r7, #11]

  return status;
 8004d3e:	7afb      	ldrb	r3, [r7, #11]
}
 8004d40:	4618      	mov	r0, r3
 8004d42:	3710      	adds	r7, #16
 8004d44:	46bd      	mov	sp, r7
 8004d46:	bd80      	pop	{r7, pc}
 8004d48:	40022000 	.word	0x40022000
 8004d4c:	40021000 	.word	0x40021000
 8004d50:	0800c6c4 	.word	0x0800c6c4
 8004d54:	20000008 	.word	0x20000008
 8004d58:	2000000c 	.word	0x2000000c

08004d5c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004d5c:	b480      	push	{r7}
 8004d5e:	b089      	sub	sp, #36	; 0x24
 8004d60:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8004d62:	2300      	movs	r3, #0
 8004d64:	61fb      	str	r3, [r7, #28]
 8004d66:	2300      	movs	r3, #0
 8004d68:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004d6a:	4b3e      	ldr	r3, [pc, #248]	; (8004e64 <HAL_RCC_GetSysClockFreq+0x108>)
 8004d6c:	689b      	ldr	r3, [r3, #8]
 8004d6e:	f003 030c 	and.w	r3, r3, #12
 8004d72:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004d74:	4b3b      	ldr	r3, [pc, #236]	; (8004e64 <HAL_RCC_GetSysClockFreq+0x108>)
 8004d76:	68db      	ldr	r3, [r3, #12]
 8004d78:	f003 0303 	and.w	r3, r3, #3
 8004d7c:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8004d7e:	693b      	ldr	r3, [r7, #16]
 8004d80:	2b00      	cmp	r3, #0
 8004d82:	d005      	beq.n	8004d90 <HAL_RCC_GetSysClockFreq+0x34>
 8004d84:	693b      	ldr	r3, [r7, #16]
 8004d86:	2b0c      	cmp	r3, #12
 8004d88:	d121      	bne.n	8004dce <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8004d8a:	68fb      	ldr	r3, [r7, #12]
 8004d8c:	2b01      	cmp	r3, #1
 8004d8e:	d11e      	bne.n	8004dce <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8004d90:	4b34      	ldr	r3, [pc, #208]	; (8004e64 <HAL_RCC_GetSysClockFreq+0x108>)
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	f003 0308 	and.w	r3, r3, #8
 8004d98:	2b00      	cmp	r3, #0
 8004d9a:	d107      	bne.n	8004dac <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8004d9c:	4b31      	ldr	r3, [pc, #196]	; (8004e64 <HAL_RCC_GetSysClockFreq+0x108>)
 8004d9e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004da2:	0a1b      	lsrs	r3, r3, #8
 8004da4:	f003 030f 	and.w	r3, r3, #15
 8004da8:	61fb      	str	r3, [r7, #28]
 8004daa:	e005      	b.n	8004db8 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8004dac:	4b2d      	ldr	r3, [pc, #180]	; (8004e64 <HAL_RCC_GetSysClockFreq+0x108>)
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	091b      	lsrs	r3, r3, #4
 8004db2:	f003 030f 	and.w	r3, r3, #15
 8004db6:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8004db8:	4a2b      	ldr	r2, [pc, #172]	; (8004e68 <HAL_RCC_GetSysClockFreq+0x10c>)
 8004dba:	69fb      	ldr	r3, [r7, #28]
 8004dbc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004dc0:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004dc2:	693b      	ldr	r3, [r7, #16]
 8004dc4:	2b00      	cmp	r3, #0
 8004dc6:	d10d      	bne.n	8004de4 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8004dc8:	69fb      	ldr	r3, [r7, #28]
 8004dca:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004dcc:	e00a      	b.n	8004de4 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8004dce:	693b      	ldr	r3, [r7, #16]
 8004dd0:	2b04      	cmp	r3, #4
 8004dd2:	d102      	bne.n	8004dda <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8004dd4:	4b25      	ldr	r3, [pc, #148]	; (8004e6c <HAL_RCC_GetSysClockFreq+0x110>)
 8004dd6:	61bb      	str	r3, [r7, #24]
 8004dd8:	e004      	b.n	8004de4 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8004dda:	693b      	ldr	r3, [r7, #16]
 8004ddc:	2b08      	cmp	r3, #8
 8004dde:	d101      	bne.n	8004de4 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8004de0:	4b23      	ldr	r3, [pc, #140]	; (8004e70 <HAL_RCC_GetSysClockFreq+0x114>)
 8004de2:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8004de4:	693b      	ldr	r3, [r7, #16]
 8004de6:	2b0c      	cmp	r3, #12
 8004de8:	d134      	bne.n	8004e54 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004dea:	4b1e      	ldr	r3, [pc, #120]	; (8004e64 <HAL_RCC_GetSysClockFreq+0x108>)
 8004dec:	68db      	ldr	r3, [r3, #12]
 8004dee:	f003 0303 	and.w	r3, r3, #3
 8004df2:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8004df4:	68bb      	ldr	r3, [r7, #8]
 8004df6:	2b02      	cmp	r3, #2
 8004df8:	d003      	beq.n	8004e02 <HAL_RCC_GetSysClockFreq+0xa6>
 8004dfa:	68bb      	ldr	r3, [r7, #8]
 8004dfc:	2b03      	cmp	r3, #3
 8004dfe:	d003      	beq.n	8004e08 <HAL_RCC_GetSysClockFreq+0xac>
 8004e00:	e005      	b.n	8004e0e <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8004e02:	4b1a      	ldr	r3, [pc, #104]	; (8004e6c <HAL_RCC_GetSysClockFreq+0x110>)
 8004e04:	617b      	str	r3, [r7, #20]
      break;
 8004e06:	e005      	b.n	8004e14 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8004e08:	4b19      	ldr	r3, [pc, #100]	; (8004e70 <HAL_RCC_GetSysClockFreq+0x114>)
 8004e0a:	617b      	str	r3, [r7, #20]
      break;
 8004e0c:	e002      	b.n	8004e14 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8004e0e:	69fb      	ldr	r3, [r7, #28]
 8004e10:	617b      	str	r3, [r7, #20]
      break;
 8004e12:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004e14:	4b13      	ldr	r3, [pc, #76]	; (8004e64 <HAL_RCC_GetSysClockFreq+0x108>)
 8004e16:	68db      	ldr	r3, [r3, #12]
 8004e18:	091b      	lsrs	r3, r3, #4
 8004e1a:	f003 0307 	and.w	r3, r3, #7
 8004e1e:	3301      	adds	r3, #1
 8004e20:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8004e22:	4b10      	ldr	r3, [pc, #64]	; (8004e64 <HAL_RCC_GetSysClockFreq+0x108>)
 8004e24:	68db      	ldr	r3, [r3, #12]
 8004e26:	0a1b      	lsrs	r3, r3, #8
 8004e28:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004e2c:	697a      	ldr	r2, [r7, #20]
 8004e2e:	fb03 f202 	mul.w	r2, r3, r2
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	fbb2 f3f3 	udiv	r3, r2, r3
 8004e38:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004e3a:	4b0a      	ldr	r3, [pc, #40]	; (8004e64 <HAL_RCC_GetSysClockFreq+0x108>)
 8004e3c:	68db      	ldr	r3, [r3, #12]
 8004e3e:	0e5b      	lsrs	r3, r3, #25
 8004e40:	f003 0303 	and.w	r3, r3, #3
 8004e44:	3301      	adds	r3, #1
 8004e46:	005b      	lsls	r3, r3, #1
 8004e48:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8004e4a:	697a      	ldr	r2, [r7, #20]
 8004e4c:	683b      	ldr	r3, [r7, #0]
 8004e4e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004e52:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8004e54:	69bb      	ldr	r3, [r7, #24]
}
 8004e56:	4618      	mov	r0, r3
 8004e58:	3724      	adds	r7, #36	; 0x24
 8004e5a:	46bd      	mov	sp, r7
 8004e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e60:	4770      	bx	lr
 8004e62:	bf00      	nop
 8004e64:	40021000 	.word	0x40021000
 8004e68:	0800c6dc 	.word	0x0800c6dc
 8004e6c:	00f42400 	.word	0x00f42400
 8004e70:	007a1200 	.word	0x007a1200

08004e74 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004e74:	b480      	push	{r7}
 8004e76:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004e78:	4b03      	ldr	r3, [pc, #12]	; (8004e88 <HAL_RCC_GetHCLKFreq+0x14>)
 8004e7a:	681b      	ldr	r3, [r3, #0]
}
 8004e7c:	4618      	mov	r0, r3
 8004e7e:	46bd      	mov	sp, r7
 8004e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e84:	4770      	bx	lr
 8004e86:	bf00      	nop
 8004e88:	20000008 	.word	0x20000008

08004e8c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004e8c:	b580      	push	{r7, lr}
 8004e8e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8004e90:	f7ff fff0 	bl	8004e74 <HAL_RCC_GetHCLKFreq>
 8004e94:	4602      	mov	r2, r0
 8004e96:	4b06      	ldr	r3, [pc, #24]	; (8004eb0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004e98:	689b      	ldr	r3, [r3, #8]
 8004e9a:	0a1b      	lsrs	r3, r3, #8
 8004e9c:	f003 0307 	and.w	r3, r3, #7
 8004ea0:	4904      	ldr	r1, [pc, #16]	; (8004eb4 <HAL_RCC_GetPCLK1Freq+0x28>)
 8004ea2:	5ccb      	ldrb	r3, [r1, r3]
 8004ea4:	f003 031f 	and.w	r3, r3, #31
 8004ea8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004eac:	4618      	mov	r0, r3
 8004eae:	bd80      	pop	{r7, pc}
 8004eb0:	40021000 	.word	0x40021000
 8004eb4:	0800c6d4 	.word	0x0800c6d4

08004eb8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004eb8:	b580      	push	{r7, lr}
 8004eba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8004ebc:	f7ff ffda 	bl	8004e74 <HAL_RCC_GetHCLKFreq>
 8004ec0:	4602      	mov	r2, r0
 8004ec2:	4b06      	ldr	r3, [pc, #24]	; (8004edc <HAL_RCC_GetPCLK2Freq+0x24>)
 8004ec4:	689b      	ldr	r3, [r3, #8]
 8004ec6:	0adb      	lsrs	r3, r3, #11
 8004ec8:	f003 0307 	and.w	r3, r3, #7
 8004ecc:	4904      	ldr	r1, [pc, #16]	; (8004ee0 <HAL_RCC_GetPCLK2Freq+0x28>)
 8004ece:	5ccb      	ldrb	r3, [r1, r3]
 8004ed0:	f003 031f 	and.w	r3, r3, #31
 8004ed4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004ed8:	4618      	mov	r0, r3
 8004eda:	bd80      	pop	{r7, pc}
 8004edc:	40021000 	.word	0x40021000
 8004ee0:	0800c6d4 	.word	0x0800c6d4

08004ee4 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8004ee4:	b580      	push	{r7, lr}
 8004ee6:	b086      	sub	sp, #24
 8004ee8:	af00      	add	r7, sp, #0
 8004eea:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8004eec:	2300      	movs	r3, #0
 8004eee:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8004ef0:	4b2a      	ldr	r3, [pc, #168]	; (8004f9c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004ef2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004ef4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004ef8:	2b00      	cmp	r3, #0
 8004efa:	d003      	beq.n	8004f04 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8004efc:	f7ff f9b6 	bl	800426c <HAL_PWREx_GetVoltageRange>
 8004f00:	6178      	str	r0, [r7, #20]
 8004f02:	e014      	b.n	8004f2e <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8004f04:	4b25      	ldr	r3, [pc, #148]	; (8004f9c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004f06:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004f08:	4a24      	ldr	r2, [pc, #144]	; (8004f9c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004f0a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004f0e:	6593      	str	r3, [r2, #88]	; 0x58
 8004f10:	4b22      	ldr	r3, [pc, #136]	; (8004f9c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004f12:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004f14:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004f18:	60fb      	str	r3, [r7, #12]
 8004f1a:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8004f1c:	f7ff f9a6 	bl	800426c <HAL_PWREx_GetVoltageRange>
 8004f20:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8004f22:	4b1e      	ldr	r3, [pc, #120]	; (8004f9c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004f24:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004f26:	4a1d      	ldr	r2, [pc, #116]	; (8004f9c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004f28:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004f2c:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004f2e:	697b      	ldr	r3, [r7, #20]
 8004f30:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004f34:	d10b      	bne.n	8004f4e <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	2b80      	cmp	r3, #128	; 0x80
 8004f3a:	d919      	bls.n	8004f70 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	2ba0      	cmp	r3, #160	; 0xa0
 8004f40:	d902      	bls.n	8004f48 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8004f42:	2302      	movs	r3, #2
 8004f44:	613b      	str	r3, [r7, #16]
 8004f46:	e013      	b.n	8004f70 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004f48:	2301      	movs	r3, #1
 8004f4a:	613b      	str	r3, [r7, #16]
 8004f4c:	e010      	b.n	8004f70 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	2b80      	cmp	r3, #128	; 0x80
 8004f52:	d902      	bls.n	8004f5a <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8004f54:	2303      	movs	r3, #3
 8004f56:	613b      	str	r3, [r7, #16]
 8004f58:	e00a      	b.n	8004f70 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	2b80      	cmp	r3, #128	; 0x80
 8004f5e:	d102      	bne.n	8004f66 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8004f60:	2302      	movs	r3, #2
 8004f62:	613b      	str	r3, [r7, #16]
 8004f64:	e004      	b.n	8004f70 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	2b70      	cmp	r3, #112	; 0x70
 8004f6a:	d101      	bne.n	8004f70 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004f6c:	2301      	movs	r3, #1
 8004f6e:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8004f70:	4b0b      	ldr	r3, [pc, #44]	; (8004fa0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	f023 0207 	bic.w	r2, r3, #7
 8004f78:	4909      	ldr	r1, [pc, #36]	; (8004fa0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004f7a:	693b      	ldr	r3, [r7, #16]
 8004f7c:	4313      	orrs	r3, r2
 8004f7e:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8004f80:	4b07      	ldr	r3, [pc, #28]	; (8004fa0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	f003 0307 	and.w	r3, r3, #7
 8004f88:	693a      	ldr	r2, [r7, #16]
 8004f8a:	429a      	cmp	r2, r3
 8004f8c:	d001      	beq.n	8004f92 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8004f8e:	2301      	movs	r3, #1
 8004f90:	e000      	b.n	8004f94 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8004f92:	2300      	movs	r3, #0
}
 8004f94:	4618      	mov	r0, r3
 8004f96:	3718      	adds	r7, #24
 8004f98:	46bd      	mov	sp, r7
 8004f9a:	bd80      	pop	{r7, pc}
 8004f9c:	40021000 	.word	0x40021000
 8004fa0:	40022000 	.word	0x40022000

08004fa4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004fa4:	b580      	push	{r7, lr}
 8004fa6:	b086      	sub	sp, #24
 8004fa8:	af00      	add	r7, sp, #0
 8004faa:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004fac:	2300      	movs	r3, #0
 8004fae:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004fb0:	2300      	movs	r3, #0
 8004fb2:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004fbc:	2b00      	cmp	r3, #0
 8004fbe:	d031      	beq.n	8005024 <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004fc4:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8004fc8:	d01a      	beq.n	8005000 <HAL_RCCEx_PeriphCLKConfig+0x5c>
 8004fca:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8004fce:	d814      	bhi.n	8004ffa <HAL_RCCEx_PeriphCLKConfig+0x56>
 8004fd0:	2b00      	cmp	r3, #0
 8004fd2:	d009      	beq.n	8004fe8 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8004fd4:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004fd8:	d10f      	bne.n	8004ffa <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 8004fda:	4b5d      	ldr	r3, [pc, #372]	; (8005150 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004fdc:	68db      	ldr	r3, [r3, #12]
 8004fde:	4a5c      	ldr	r2, [pc, #368]	; (8005150 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004fe0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004fe4:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004fe6:	e00c      	b.n	8005002 <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	3304      	adds	r3, #4
 8004fec:	2100      	movs	r1, #0
 8004fee:	4618      	mov	r0, r3
 8004ff0:	f000 fa44 	bl	800547c <RCCEx_PLLSAI1_Config>
 8004ff4:	4603      	mov	r3, r0
 8004ff6:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004ff8:	e003      	b.n	8005002 <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004ffa:	2301      	movs	r3, #1
 8004ffc:	74fb      	strb	r3, [r7, #19]
      break;
 8004ffe:	e000      	b.n	8005002 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 8005000:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005002:	7cfb      	ldrb	r3, [r7, #19]
 8005004:	2b00      	cmp	r3, #0
 8005006:	d10b      	bne.n	8005020 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005008:	4b51      	ldr	r3, [pc, #324]	; (8005150 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800500a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800500e:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005016:	494e      	ldr	r1, [pc, #312]	; (8005150 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8005018:	4313      	orrs	r3, r2
 800501a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800501e:	e001      	b.n	8005024 <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005020:	7cfb      	ldrb	r3, [r7, #19]
 8005022:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800502c:	2b00      	cmp	r3, #0
 800502e:	f000 809e 	beq.w	800516e <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005032:	2300      	movs	r3, #0
 8005034:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8005036:	4b46      	ldr	r3, [pc, #280]	; (8005150 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8005038:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800503a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800503e:	2b00      	cmp	r3, #0
 8005040:	d101      	bne.n	8005046 <HAL_RCCEx_PeriphCLKConfig+0xa2>
 8005042:	2301      	movs	r3, #1
 8005044:	e000      	b.n	8005048 <HAL_RCCEx_PeriphCLKConfig+0xa4>
 8005046:	2300      	movs	r3, #0
 8005048:	2b00      	cmp	r3, #0
 800504a:	d00d      	beq.n	8005068 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800504c:	4b40      	ldr	r3, [pc, #256]	; (8005150 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800504e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005050:	4a3f      	ldr	r2, [pc, #252]	; (8005150 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8005052:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005056:	6593      	str	r3, [r2, #88]	; 0x58
 8005058:	4b3d      	ldr	r3, [pc, #244]	; (8005150 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800505a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800505c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005060:	60bb      	str	r3, [r7, #8]
 8005062:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005064:	2301      	movs	r3, #1
 8005066:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005068:	4b3a      	ldr	r3, [pc, #232]	; (8005154 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	4a39      	ldr	r2, [pc, #228]	; (8005154 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 800506e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005072:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005074:	f7fd fa3e 	bl	80024f4 <HAL_GetTick>
 8005078:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800507a:	e009      	b.n	8005090 <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800507c:	f7fd fa3a 	bl	80024f4 <HAL_GetTick>
 8005080:	4602      	mov	r2, r0
 8005082:	68fb      	ldr	r3, [r7, #12]
 8005084:	1ad3      	subs	r3, r2, r3
 8005086:	2b02      	cmp	r3, #2
 8005088:	d902      	bls.n	8005090 <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 800508a:	2303      	movs	r3, #3
 800508c:	74fb      	strb	r3, [r7, #19]
        break;
 800508e:	e005      	b.n	800509c <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8005090:	4b30      	ldr	r3, [pc, #192]	; (8005154 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005098:	2b00      	cmp	r3, #0
 800509a:	d0ef      	beq.n	800507c <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 800509c:	7cfb      	ldrb	r3, [r7, #19]
 800509e:	2b00      	cmp	r3, #0
 80050a0:	d15a      	bne.n	8005158 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80050a2:	4b2b      	ldr	r3, [pc, #172]	; (8005150 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80050a4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80050a8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80050ac:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80050ae:	697b      	ldr	r3, [r7, #20]
 80050b0:	2b00      	cmp	r3, #0
 80050b2:	d01e      	beq.n	80050f2 <HAL_RCCEx_PeriphCLKConfig+0x14e>
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80050b8:	697a      	ldr	r2, [r7, #20]
 80050ba:	429a      	cmp	r2, r3
 80050bc:	d019      	beq.n	80050f2 <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80050be:	4b24      	ldr	r3, [pc, #144]	; (8005150 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80050c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80050c4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80050c8:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80050ca:	4b21      	ldr	r3, [pc, #132]	; (8005150 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80050cc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80050d0:	4a1f      	ldr	r2, [pc, #124]	; (8005150 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80050d2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80050d6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80050da:	4b1d      	ldr	r3, [pc, #116]	; (8005150 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80050dc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80050e0:	4a1b      	ldr	r2, [pc, #108]	; (8005150 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80050e2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80050e6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80050ea:	4a19      	ldr	r2, [pc, #100]	; (8005150 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80050ec:	697b      	ldr	r3, [r7, #20]
 80050ee:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80050f2:	697b      	ldr	r3, [r7, #20]
 80050f4:	f003 0301 	and.w	r3, r3, #1
 80050f8:	2b00      	cmp	r3, #0
 80050fa:	d016      	beq.n	800512a <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80050fc:	f7fd f9fa 	bl	80024f4 <HAL_GetTick>
 8005100:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005102:	e00b      	b.n	800511c <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005104:	f7fd f9f6 	bl	80024f4 <HAL_GetTick>
 8005108:	4602      	mov	r2, r0
 800510a:	68fb      	ldr	r3, [r7, #12]
 800510c:	1ad3      	subs	r3, r2, r3
 800510e:	f241 3288 	movw	r2, #5000	; 0x1388
 8005112:	4293      	cmp	r3, r2
 8005114:	d902      	bls.n	800511c <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 8005116:	2303      	movs	r3, #3
 8005118:	74fb      	strb	r3, [r7, #19]
            break;
 800511a:	e006      	b.n	800512a <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800511c:	4b0c      	ldr	r3, [pc, #48]	; (8005150 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800511e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005122:	f003 0302 	and.w	r3, r3, #2
 8005126:	2b00      	cmp	r3, #0
 8005128:	d0ec      	beq.n	8005104 <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 800512a:	7cfb      	ldrb	r3, [r7, #19]
 800512c:	2b00      	cmp	r3, #0
 800512e:	d10b      	bne.n	8005148 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005130:	4b07      	ldr	r3, [pc, #28]	; (8005150 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8005132:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005136:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800513e:	4904      	ldr	r1, [pc, #16]	; (8005150 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8005140:	4313      	orrs	r3, r2
 8005142:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8005146:	e009      	b.n	800515c <HAL_RCCEx_PeriphCLKConfig+0x1b8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8005148:	7cfb      	ldrb	r3, [r7, #19]
 800514a:	74bb      	strb	r3, [r7, #18]
 800514c:	e006      	b.n	800515c <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 800514e:	bf00      	nop
 8005150:	40021000 	.word	0x40021000
 8005154:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005158:	7cfb      	ldrb	r3, [r7, #19]
 800515a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800515c:	7c7b      	ldrb	r3, [r7, #17]
 800515e:	2b01      	cmp	r3, #1
 8005160:	d105      	bne.n	800516e <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005162:	4b9e      	ldr	r3, [pc, #632]	; (80053dc <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8005164:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005166:	4a9d      	ldr	r2, [pc, #628]	; (80053dc <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8005168:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800516c:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	f003 0301 	and.w	r3, r3, #1
 8005176:	2b00      	cmp	r3, #0
 8005178:	d00a      	beq.n	8005190 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800517a:	4b98      	ldr	r3, [pc, #608]	; (80053dc <HAL_RCCEx_PeriphCLKConfig+0x438>)
 800517c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005180:	f023 0203 	bic.w	r2, r3, #3
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	6a1b      	ldr	r3, [r3, #32]
 8005188:	4994      	ldr	r1, [pc, #592]	; (80053dc <HAL_RCCEx_PeriphCLKConfig+0x438>)
 800518a:	4313      	orrs	r3, r2
 800518c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	681b      	ldr	r3, [r3, #0]
 8005194:	f003 0302 	and.w	r3, r3, #2
 8005198:	2b00      	cmp	r3, #0
 800519a:	d00a      	beq.n	80051b2 <HAL_RCCEx_PeriphCLKConfig+0x20e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800519c:	4b8f      	ldr	r3, [pc, #572]	; (80053dc <HAL_RCCEx_PeriphCLKConfig+0x438>)
 800519e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80051a2:	f023 020c 	bic.w	r2, r3, #12
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051aa:	498c      	ldr	r1, [pc, #560]	; (80053dc <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80051ac:	4313      	orrs	r3, r2
 80051ae:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	f003 0304 	and.w	r3, r3, #4
 80051ba:	2b00      	cmp	r3, #0
 80051bc:	d00a      	beq.n	80051d4 <HAL_RCCEx_PeriphCLKConfig+0x230>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80051be:	4b87      	ldr	r3, [pc, #540]	; (80053dc <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80051c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80051c4:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80051cc:	4983      	ldr	r1, [pc, #524]	; (80053dc <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80051ce:	4313      	orrs	r3, r2
 80051d0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	f003 0308 	and.w	r3, r3, #8
 80051dc:	2b00      	cmp	r3, #0
 80051de:	d00a      	beq.n	80051f6 <HAL_RCCEx_PeriphCLKConfig+0x252>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80051e0:	4b7e      	ldr	r3, [pc, #504]	; (80053dc <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80051e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80051e6:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80051ee:	497b      	ldr	r1, [pc, #492]	; (80053dc <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80051f0:	4313      	orrs	r3, r2
 80051f2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	681b      	ldr	r3, [r3, #0]
 80051fa:	f003 0320 	and.w	r3, r3, #32
 80051fe:	2b00      	cmp	r3, #0
 8005200:	d00a      	beq.n	8005218 <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8005202:	4b76      	ldr	r3, [pc, #472]	; (80053dc <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8005204:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005208:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005210:	4972      	ldr	r1, [pc, #456]	; (80053dc <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8005212:	4313      	orrs	r3, r2
 8005214:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005220:	2b00      	cmp	r3, #0
 8005222:	d00a      	beq.n	800523a <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005224:	4b6d      	ldr	r3, [pc, #436]	; (80053dc <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8005226:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800522a:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005232:	496a      	ldr	r1, [pc, #424]	; (80053dc <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8005234:	4313      	orrs	r3, r2
 8005236:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	681b      	ldr	r3, [r3, #0]
 800523e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005242:	2b00      	cmp	r3, #0
 8005244:	d00a      	beq.n	800525c <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8005246:	4b65      	ldr	r3, [pc, #404]	; (80053dc <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8005248:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800524c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005254:	4961      	ldr	r1, [pc, #388]	; (80053dc <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8005256:	4313      	orrs	r3, r2
 8005258:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005264:	2b00      	cmp	r3, #0
 8005266:	d00a      	beq.n	800527e <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005268:	4b5c      	ldr	r3, [pc, #368]	; (80053dc <HAL_RCCEx_PeriphCLKConfig+0x438>)
 800526a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800526e:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005276:	4959      	ldr	r1, [pc, #356]	; (80053dc <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8005278:	4313      	orrs	r3, r2
 800527a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005286:	2b00      	cmp	r3, #0
 8005288:	d00a      	beq.n	80052a0 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800528a:	4b54      	ldr	r3, [pc, #336]	; (80053dc <HAL_RCCEx_PeriphCLKConfig+0x438>)
 800528c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005290:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005298:	4950      	ldr	r1, [pc, #320]	; (80053dc <HAL_RCCEx_PeriphCLKConfig+0x438>)
 800529a:	4313      	orrs	r3, r2
 800529c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80052a8:	2b00      	cmp	r3, #0
 80052aa:	d00a      	beq.n	80052c2 <HAL_RCCEx_PeriphCLKConfig+0x31e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80052ac:	4b4b      	ldr	r3, [pc, #300]	; (80053dc <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80052ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80052b2:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80052ba:	4948      	ldr	r1, [pc, #288]	; (80053dc <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80052bc:	4313      	orrs	r3, r2
 80052be:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	681b      	ldr	r3, [r3, #0]
 80052c6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80052ca:	2b00      	cmp	r3, #0
 80052cc:	d00a      	beq.n	80052e4 <HAL_RCCEx_PeriphCLKConfig+0x340>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80052ce:	4b43      	ldr	r3, [pc, #268]	; (80053dc <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80052d0:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80052d4:	f023 0203 	bic.w	r2, r3, #3
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052dc:	493f      	ldr	r1, [pc, #252]	; (80053dc <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80052de:	4313      	orrs	r3, r2
 80052e0:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80052ec:	2b00      	cmp	r3, #0
 80052ee:	d028      	beq.n	8005342 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80052f0:	4b3a      	ldr	r3, [pc, #232]	; (80053dc <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80052f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80052f6:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80052fe:	4937      	ldr	r1, [pc, #220]	; (80053dc <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8005300:	4313      	orrs	r3, r2
 8005302:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800530a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800530e:	d106      	bne.n	800531e <HAL_RCCEx_PeriphCLKConfig+0x37a>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005310:	4b32      	ldr	r3, [pc, #200]	; (80053dc <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8005312:	68db      	ldr	r3, [r3, #12]
 8005314:	4a31      	ldr	r2, [pc, #196]	; (80053dc <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8005316:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800531a:	60d3      	str	r3, [r2, #12]
 800531c:	e011      	b.n	8005342 <HAL_RCCEx_PeriphCLKConfig+0x39e>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005322:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005326:	d10c      	bne.n	8005342 <HAL_RCCEx_PeriphCLKConfig+0x39e>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	3304      	adds	r3, #4
 800532c:	2101      	movs	r1, #1
 800532e:	4618      	mov	r0, r3
 8005330:	f000 f8a4 	bl	800547c <RCCEx_PLLSAI1_Config>
 8005334:	4603      	mov	r3, r0
 8005336:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8005338:	7cfb      	ldrb	r3, [r7, #19]
 800533a:	2b00      	cmp	r3, #0
 800533c:	d001      	beq.n	8005342 <HAL_RCCEx_PeriphCLKConfig+0x39e>
        {
          /* set overall return value */
          status = ret;
 800533e:	7cfb      	ldrb	r3, [r7, #19]
 8005340:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	681b      	ldr	r3, [r3, #0]
 8005346:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800534a:	2b00      	cmp	r3, #0
 800534c:	d028      	beq.n	80053a0 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800534e:	4b23      	ldr	r3, [pc, #140]	; (80053dc <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8005350:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005354:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800535c:	491f      	ldr	r1, [pc, #124]	; (80053dc <HAL_RCCEx_PeriphCLKConfig+0x438>)
 800535e:	4313      	orrs	r3, r2
 8005360:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005368:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800536c:	d106      	bne.n	800537c <HAL_RCCEx_PeriphCLKConfig+0x3d8>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800536e:	4b1b      	ldr	r3, [pc, #108]	; (80053dc <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8005370:	68db      	ldr	r3, [r3, #12]
 8005372:	4a1a      	ldr	r2, [pc, #104]	; (80053dc <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8005374:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005378:	60d3      	str	r3, [r2, #12]
 800537a:	e011      	b.n	80053a0 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005380:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005384:	d10c      	bne.n	80053a0 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	3304      	adds	r3, #4
 800538a:	2101      	movs	r1, #1
 800538c:	4618      	mov	r0, r3
 800538e:	f000 f875 	bl	800547c <RCCEx_PLLSAI1_Config>
 8005392:	4603      	mov	r3, r0
 8005394:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005396:	7cfb      	ldrb	r3, [r7, #19]
 8005398:	2b00      	cmp	r3, #0
 800539a:	d001      	beq.n	80053a0 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
      {
        /* set overall return value */
        status = ret;
 800539c:	7cfb      	ldrb	r3, [r7, #19]
 800539e:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80053a8:	2b00      	cmp	r3, #0
 80053aa:	d02b      	beq.n	8005404 <HAL_RCCEx_PeriphCLKConfig+0x460>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80053ac:	4b0b      	ldr	r3, [pc, #44]	; (80053dc <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80053ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80053b2:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80053ba:	4908      	ldr	r1, [pc, #32]	; (80053dc <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80053bc:	4313      	orrs	r3, r2
 80053be:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80053c6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80053ca:	d109      	bne.n	80053e0 <HAL_RCCEx_PeriphCLKConfig+0x43c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80053cc:	4b03      	ldr	r3, [pc, #12]	; (80053dc <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80053ce:	68db      	ldr	r3, [r3, #12]
 80053d0:	4a02      	ldr	r2, [pc, #8]	; (80053dc <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80053d2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80053d6:	60d3      	str	r3, [r2, #12]
 80053d8:	e014      	b.n	8005404 <HAL_RCCEx_PeriphCLKConfig+0x460>
 80053da:	bf00      	nop
 80053dc:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80053e4:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80053e8:	d10c      	bne.n	8005404 <HAL_RCCEx_PeriphCLKConfig+0x460>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	3304      	adds	r3, #4
 80053ee:	2101      	movs	r1, #1
 80053f0:	4618      	mov	r0, r3
 80053f2:	f000 f843 	bl	800547c <RCCEx_PLLSAI1_Config>
 80053f6:	4603      	mov	r3, r0
 80053f8:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80053fa:	7cfb      	ldrb	r3, [r7, #19]
 80053fc:	2b00      	cmp	r3, #0
 80053fe:	d001      	beq.n	8005404 <HAL_RCCEx_PeriphCLKConfig+0x460>
      {
        /* set overall return value */
        status = ret;
 8005400:	7cfb      	ldrb	r3, [r7, #19]
 8005402:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800540c:	2b00      	cmp	r3, #0
 800540e:	d01c      	beq.n	800544a <HAL_RCCEx_PeriphCLKConfig+0x4a6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8005410:	4b19      	ldr	r3, [pc, #100]	; (8005478 <HAL_RCCEx_PeriphCLKConfig+0x4d4>)
 8005412:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005416:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800541e:	4916      	ldr	r1, [pc, #88]	; (8005478 <HAL_RCCEx_PeriphCLKConfig+0x4d4>)
 8005420:	4313      	orrs	r3, r2
 8005422:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800542a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800542e:	d10c      	bne.n	800544a <HAL_RCCEx_PeriphCLKConfig+0x4a6>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	3304      	adds	r3, #4
 8005434:	2102      	movs	r1, #2
 8005436:	4618      	mov	r0, r3
 8005438:	f000 f820 	bl	800547c <RCCEx_PLLSAI1_Config>
 800543c:	4603      	mov	r3, r0
 800543e:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005440:	7cfb      	ldrb	r3, [r7, #19]
 8005442:	2b00      	cmp	r3, #0
 8005444:	d001      	beq.n	800544a <HAL_RCCEx_PeriphCLKConfig+0x4a6>
      {
        /* set overall return value */
        status = ret;
 8005446:	7cfb      	ldrb	r3, [r7, #19]
 8005448:	74bb      	strb	r3, [r7, #18]
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	681b      	ldr	r3, [r3, #0]
 800544e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005452:	2b00      	cmp	r3, #0
 8005454:	d00a      	beq.n	800546c <HAL_RCCEx_PeriphCLKConfig+0x4c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8005456:	4b08      	ldr	r3, [pc, #32]	; (8005478 <HAL_RCCEx_PeriphCLKConfig+0x4d4>)
 8005458:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800545c:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005464:	4904      	ldr	r1, [pc, #16]	; (8005478 <HAL_RCCEx_PeriphCLKConfig+0x4d4>)
 8005466:	4313      	orrs	r3, r2
 8005468:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 800546c:	7cbb      	ldrb	r3, [r7, #18]
}
 800546e:	4618      	mov	r0, r3
 8005470:	3718      	adds	r7, #24
 8005472:	46bd      	mov	sp, r7
 8005474:	bd80      	pop	{r7, pc}
 8005476:	bf00      	nop
 8005478:	40021000 	.word	0x40021000

0800547c <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 800547c:	b580      	push	{r7, lr}
 800547e:	b084      	sub	sp, #16
 8005480:	af00      	add	r7, sp, #0
 8005482:	6078      	str	r0, [r7, #4]
 8005484:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005486:	2300      	movs	r3, #0
 8005488:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800548a:	4b74      	ldr	r3, [pc, #464]	; (800565c <RCCEx_PLLSAI1_Config+0x1e0>)
 800548c:	68db      	ldr	r3, [r3, #12]
 800548e:	f003 0303 	and.w	r3, r3, #3
 8005492:	2b00      	cmp	r3, #0
 8005494:	d018      	beq.n	80054c8 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8005496:	4b71      	ldr	r3, [pc, #452]	; (800565c <RCCEx_PLLSAI1_Config+0x1e0>)
 8005498:	68db      	ldr	r3, [r3, #12]
 800549a:	f003 0203 	and.w	r2, r3, #3
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	681b      	ldr	r3, [r3, #0]
 80054a2:	429a      	cmp	r2, r3
 80054a4:	d10d      	bne.n	80054c2 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	681b      	ldr	r3, [r3, #0]
       ||
 80054aa:	2b00      	cmp	r3, #0
 80054ac:	d009      	beq.n	80054c2 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 80054ae:	4b6b      	ldr	r3, [pc, #428]	; (800565c <RCCEx_PLLSAI1_Config+0x1e0>)
 80054b0:	68db      	ldr	r3, [r3, #12]
 80054b2:	091b      	lsrs	r3, r3, #4
 80054b4:	f003 0307 	and.w	r3, r3, #7
 80054b8:	1c5a      	adds	r2, r3, #1
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	685b      	ldr	r3, [r3, #4]
       ||
 80054be:	429a      	cmp	r2, r3
 80054c0:	d047      	beq.n	8005552 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80054c2:	2301      	movs	r3, #1
 80054c4:	73fb      	strb	r3, [r7, #15]
 80054c6:	e044      	b.n	8005552 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	2b03      	cmp	r3, #3
 80054ce:	d018      	beq.n	8005502 <RCCEx_PLLSAI1_Config+0x86>
 80054d0:	2b03      	cmp	r3, #3
 80054d2:	d825      	bhi.n	8005520 <RCCEx_PLLSAI1_Config+0xa4>
 80054d4:	2b01      	cmp	r3, #1
 80054d6:	d002      	beq.n	80054de <RCCEx_PLLSAI1_Config+0x62>
 80054d8:	2b02      	cmp	r3, #2
 80054da:	d009      	beq.n	80054f0 <RCCEx_PLLSAI1_Config+0x74>
 80054dc:	e020      	b.n	8005520 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80054de:	4b5f      	ldr	r3, [pc, #380]	; (800565c <RCCEx_PLLSAI1_Config+0x1e0>)
 80054e0:	681b      	ldr	r3, [r3, #0]
 80054e2:	f003 0302 	and.w	r3, r3, #2
 80054e6:	2b00      	cmp	r3, #0
 80054e8:	d11d      	bne.n	8005526 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 80054ea:	2301      	movs	r3, #1
 80054ec:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80054ee:	e01a      	b.n	8005526 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80054f0:	4b5a      	ldr	r3, [pc, #360]	; (800565c <RCCEx_PLLSAI1_Config+0x1e0>)
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80054f8:	2b00      	cmp	r3, #0
 80054fa:	d116      	bne.n	800552a <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 80054fc:	2301      	movs	r3, #1
 80054fe:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005500:	e013      	b.n	800552a <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8005502:	4b56      	ldr	r3, [pc, #344]	; (800565c <RCCEx_PLLSAI1_Config+0x1e0>)
 8005504:	681b      	ldr	r3, [r3, #0]
 8005506:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800550a:	2b00      	cmp	r3, #0
 800550c:	d10f      	bne.n	800552e <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800550e:	4b53      	ldr	r3, [pc, #332]	; (800565c <RCCEx_PLLSAI1_Config+0x1e0>)
 8005510:	681b      	ldr	r3, [r3, #0]
 8005512:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005516:	2b00      	cmp	r3, #0
 8005518:	d109      	bne.n	800552e <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 800551a:	2301      	movs	r3, #1
 800551c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800551e:	e006      	b.n	800552e <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8005520:	2301      	movs	r3, #1
 8005522:	73fb      	strb	r3, [r7, #15]
      break;
 8005524:	e004      	b.n	8005530 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8005526:	bf00      	nop
 8005528:	e002      	b.n	8005530 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800552a:	bf00      	nop
 800552c:	e000      	b.n	8005530 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800552e:	bf00      	nop
    }

    if(status == HAL_OK)
 8005530:	7bfb      	ldrb	r3, [r7, #15]
 8005532:	2b00      	cmp	r3, #0
 8005534:	d10d      	bne.n	8005552 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8005536:	4b49      	ldr	r3, [pc, #292]	; (800565c <RCCEx_PLLSAI1_Config+0x1e0>)
 8005538:	68db      	ldr	r3, [r3, #12]
 800553a:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	6819      	ldr	r1, [r3, #0]
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	685b      	ldr	r3, [r3, #4]
 8005546:	3b01      	subs	r3, #1
 8005548:	011b      	lsls	r3, r3, #4
 800554a:	430b      	orrs	r3, r1
 800554c:	4943      	ldr	r1, [pc, #268]	; (800565c <RCCEx_PLLSAI1_Config+0x1e0>)
 800554e:	4313      	orrs	r3, r2
 8005550:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8005552:	7bfb      	ldrb	r3, [r7, #15]
 8005554:	2b00      	cmp	r3, #0
 8005556:	d17c      	bne.n	8005652 <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8005558:	4b40      	ldr	r3, [pc, #256]	; (800565c <RCCEx_PLLSAI1_Config+0x1e0>)
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	4a3f      	ldr	r2, [pc, #252]	; (800565c <RCCEx_PLLSAI1_Config+0x1e0>)
 800555e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8005562:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005564:	f7fc ffc6 	bl	80024f4 <HAL_GetTick>
 8005568:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800556a:	e009      	b.n	8005580 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800556c:	f7fc ffc2 	bl	80024f4 <HAL_GetTick>
 8005570:	4602      	mov	r2, r0
 8005572:	68bb      	ldr	r3, [r7, #8]
 8005574:	1ad3      	subs	r3, r2, r3
 8005576:	2b02      	cmp	r3, #2
 8005578:	d902      	bls.n	8005580 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800557a:	2303      	movs	r3, #3
 800557c:	73fb      	strb	r3, [r7, #15]
        break;
 800557e:	e005      	b.n	800558c <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8005580:	4b36      	ldr	r3, [pc, #216]	; (800565c <RCCEx_PLLSAI1_Config+0x1e0>)
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005588:	2b00      	cmp	r3, #0
 800558a:	d1ef      	bne.n	800556c <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 800558c:	7bfb      	ldrb	r3, [r7, #15]
 800558e:	2b00      	cmp	r3, #0
 8005590:	d15f      	bne.n	8005652 <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8005592:	683b      	ldr	r3, [r7, #0]
 8005594:	2b00      	cmp	r3, #0
 8005596:	d110      	bne.n	80055ba <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005598:	4b30      	ldr	r3, [pc, #192]	; (800565c <RCCEx_PLLSAI1_Config+0x1e0>)
 800559a:	691b      	ldr	r3, [r3, #16]
 800559c:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 80055a0:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80055a4:	687a      	ldr	r2, [r7, #4]
 80055a6:	6892      	ldr	r2, [r2, #8]
 80055a8:	0211      	lsls	r1, r2, #8
 80055aa:	687a      	ldr	r2, [r7, #4]
 80055ac:	68d2      	ldr	r2, [r2, #12]
 80055ae:	06d2      	lsls	r2, r2, #27
 80055b0:	430a      	orrs	r2, r1
 80055b2:	492a      	ldr	r1, [pc, #168]	; (800565c <RCCEx_PLLSAI1_Config+0x1e0>)
 80055b4:	4313      	orrs	r3, r2
 80055b6:	610b      	str	r3, [r1, #16]
 80055b8:	e027      	b.n	800560a <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80055ba:	683b      	ldr	r3, [r7, #0]
 80055bc:	2b01      	cmp	r3, #1
 80055be:	d112      	bne.n	80055e6 <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80055c0:	4b26      	ldr	r3, [pc, #152]	; (800565c <RCCEx_PLLSAI1_Config+0x1e0>)
 80055c2:	691b      	ldr	r3, [r3, #16]
 80055c4:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 80055c8:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80055cc:	687a      	ldr	r2, [r7, #4]
 80055ce:	6892      	ldr	r2, [r2, #8]
 80055d0:	0211      	lsls	r1, r2, #8
 80055d2:	687a      	ldr	r2, [r7, #4]
 80055d4:	6912      	ldr	r2, [r2, #16]
 80055d6:	0852      	lsrs	r2, r2, #1
 80055d8:	3a01      	subs	r2, #1
 80055da:	0552      	lsls	r2, r2, #21
 80055dc:	430a      	orrs	r2, r1
 80055de:	491f      	ldr	r1, [pc, #124]	; (800565c <RCCEx_PLLSAI1_Config+0x1e0>)
 80055e0:	4313      	orrs	r3, r2
 80055e2:	610b      	str	r3, [r1, #16]
 80055e4:	e011      	b.n	800560a <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80055e6:	4b1d      	ldr	r3, [pc, #116]	; (800565c <RCCEx_PLLSAI1_Config+0x1e0>)
 80055e8:	691b      	ldr	r3, [r3, #16]
 80055ea:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80055ee:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80055f2:	687a      	ldr	r2, [r7, #4]
 80055f4:	6892      	ldr	r2, [r2, #8]
 80055f6:	0211      	lsls	r1, r2, #8
 80055f8:	687a      	ldr	r2, [r7, #4]
 80055fa:	6952      	ldr	r2, [r2, #20]
 80055fc:	0852      	lsrs	r2, r2, #1
 80055fe:	3a01      	subs	r2, #1
 8005600:	0652      	lsls	r2, r2, #25
 8005602:	430a      	orrs	r2, r1
 8005604:	4915      	ldr	r1, [pc, #84]	; (800565c <RCCEx_PLLSAI1_Config+0x1e0>)
 8005606:	4313      	orrs	r3, r2
 8005608:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 800560a:	4b14      	ldr	r3, [pc, #80]	; (800565c <RCCEx_PLLSAI1_Config+0x1e0>)
 800560c:	681b      	ldr	r3, [r3, #0]
 800560e:	4a13      	ldr	r2, [pc, #76]	; (800565c <RCCEx_PLLSAI1_Config+0x1e0>)
 8005610:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8005614:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005616:	f7fc ff6d 	bl	80024f4 <HAL_GetTick>
 800561a:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800561c:	e009      	b.n	8005632 <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800561e:	f7fc ff69 	bl	80024f4 <HAL_GetTick>
 8005622:	4602      	mov	r2, r0
 8005624:	68bb      	ldr	r3, [r7, #8]
 8005626:	1ad3      	subs	r3, r2, r3
 8005628:	2b02      	cmp	r3, #2
 800562a:	d902      	bls.n	8005632 <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 800562c:	2303      	movs	r3, #3
 800562e:	73fb      	strb	r3, [r7, #15]
          break;
 8005630:	e005      	b.n	800563e <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8005632:	4b0a      	ldr	r3, [pc, #40]	; (800565c <RCCEx_PLLSAI1_Config+0x1e0>)
 8005634:	681b      	ldr	r3, [r3, #0]
 8005636:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800563a:	2b00      	cmp	r3, #0
 800563c:	d0ef      	beq.n	800561e <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 800563e:	7bfb      	ldrb	r3, [r7, #15]
 8005640:	2b00      	cmp	r3, #0
 8005642:	d106      	bne.n	8005652 <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8005644:	4b05      	ldr	r3, [pc, #20]	; (800565c <RCCEx_PLLSAI1_Config+0x1e0>)
 8005646:	691a      	ldr	r2, [r3, #16]
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	699b      	ldr	r3, [r3, #24]
 800564c:	4903      	ldr	r1, [pc, #12]	; (800565c <RCCEx_PLLSAI1_Config+0x1e0>)
 800564e:	4313      	orrs	r3, r2
 8005650:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8005652:	7bfb      	ldrb	r3, [r7, #15]
}
 8005654:	4618      	mov	r0, r3
 8005656:	3710      	adds	r7, #16
 8005658:	46bd      	mov	sp, r7
 800565a:	bd80      	pop	{r7, pc}
 800565c:	40021000 	.word	0x40021000

08005660 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005660:	b580      	push	{r7, lr}
 8005662:	b084      	sub	sp, #16
 8005664:	af00      	add	r7, sp, #0
 8005666:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	2b00      	cmp	r3, #0
 800566c:	d101      	bne.n	8005672 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800566e:	2301      	movs	r3, #1
 8005670:	e095      	b.n	800579e <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005676:	2b00      	cmp	r3, #0
 8005678:	d108      	bne.n	800568c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	685b      	ldr	r3, [r3, #4]
 800567e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005682:	d009      	beq.n	8005698 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	2200      	movs	r2, #0
 8005688:	61da      	str	r2, [r3, #28]
 800568a:	e005      	b.n	8005698 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	2200      	movs	r2, #0
 8005690:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	2200      	movs	r2, #0
 8005696:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	2200      	movs	r2, #0
 800569c:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80056a4:	b2db      	uxtb	r3, r3
 80056a6:	2b00      	cmp	r3, #0
 80056a8:	d106      	bne.n	80056b8 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	2200      	movs	r2, #0
 80056ae:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80056b2:	6878      	ldr	r0, [r7, #4]
 80056b4:	f7fc fbda 	bl	8001e6c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	2202      	movs	r2, #2
 80056bc:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	681b      	ldr	r3, [r3, #0]
 80056c4:	681a      	ldr	r2, [r3, #0]
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	681b      	ldr	r3, [r3, #0]
 80056ca:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80056ce:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	68db      	ldr	r3, [r3, #12]
 80056d4:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80056d8:	d902      	bls.n	80056e0 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80056da:	2300      	movs	r3, #0
 80056dc:	60fb      	str	r3, [r7, #12]
 80056de:	e002      	b.n	80056e6 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80056e0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80056e4:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	68db      	ldr	r3, [r3, #12]
 80056ea:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 80056ee:	d007      	beq.n	8005700 <HAL_SPI_Init+0xa0>
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	68db      	ldr	r3, [r3, #12]
 80056f4:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80056f8:	d002      	beq.n	8005700 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	2200      	movs	r2, #0
 80056fe:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	685b      	ldr	r3, [r3, #4]
 8005704:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	689b      	ldr	r3, [r3, #8]
 800570c:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8005710:	431a      	orrs	r2, r3
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	691b      	ldr	r3, [r3, #16]
 8005716:	f003 0302 	and.w	r3, r3, #2
 800571a:	431a      	orrs	r2, r3
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	695b      	ldr	r3, [r3, #20]
 8005720:	f003 0301 	and.w	r3, r3, #1
 8005724:	431a      	orrs	r2, r3
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	699b      	ldr	r3, [r3, #24]
 800572a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800572e:	431a      	orrs	r2, r3
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	69db      	ldr	r3, [r3, #28]
 8005734:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005738:	431a      	orrs	r2, r3
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	6a1b      	ldr	r3, [r3, #32]
 800573e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005742:	ea42 0103 	orr.w	r1, r2, r3
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800574a:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	681b      	ldr	r3, [r3, #0]
 8005752:	430a      	orrs	r2, r1
 8005754:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	699b      	ldr	r3, [r3, #24]
 800575a:	0c1b      	lsrs	r3, r3, #16
 800575c:	f003 0204 	and.w	r2, r3, #4
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005764:	f003 0310 	and.w	r3, r3, #16
 8005768:	431a      	orrs	r2, r3
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800576e:	f003 0308 	and.w	r3, r3, #8
 8005772:	431a      	orrs	r2, r3
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	68db      	ldr	r3, [r3, #12]
 8005778:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 800577c:	ea42 0103 	orr.w	r1, r2, r3
 8005780:	68fb      	ldr	r3, [r7, #12]
 8005782:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	681b      	ldr	r3, [r3, #0]
 800578a:	430a      	orrs	r2, r1
 800578c:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	2200      	movs	r2, #0
 8005792:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	2201      	movs	r2, #1
 8005798:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 800579c:	2300      	movs	r3, #0
}
 800579e:	4618      	mov	r0, r3
 80057a0:	3710      	adds	r7, #16
 80057a2:	46bd      	mov	sp, r7
 80057a4:	bd80      	pop	{r7, pc}

080057a6 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80057a6:	b580      	push	{r7, lr}
 80057a8:	b082      	sub	sp, #8
 80057aa:	af00      	add	r7, sp, #0
 80057ac:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	2b00      	cmp	r3, #0
 80057b2:	d101      	bne.n	80057b8 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80057b4:	2301      	movs	r3, #1
 80057b6:	e049      	b.n	800584c <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80057be:	b2db      	uxtb	r3, r3
 80057c0:	2b00      	cmp	r3, #0
 80057c2:	d106      	bne.n	80057d2 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	2200      	movs	r2, #0
 80057c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80057cc:	6878      	ldr	r0, [r7, #4]
 80057ce:	f7fc fb91 	bl	8001ef4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	2202      	movs	r2, #2
 80057d6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	681a      	ldr	r2, [r3, #0]
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	3304      	adds	r3, #4
 80057e2:	4619      	mov	r1, r3
 80057e4:	4610      	mov	r0, r2
 80057e6:	f000 ff4f 	bl	8006688 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	2201      	movs	r2, #1
 80057ee:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	2201      	movs	r2, #1
 80057f6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	2201      	movs	r2, #1
 80057fe:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	2201      	movs	r2, #1
 8005806:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	2201      	movs	r2, #1
 800580e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	2201      	movs	r2, #1
 8005816:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	2201      	movs	r2, #1
 800581e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	2201      	movs	r2, #1
 8005826:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	2201      	movs	r2, #1
 800582e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	2201      	movs	r2, #1
 8005836:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	2201      	movs	r2, #1
 800583e:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	2201      	movs	r2, #1
 8005846:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800584a:	2300      	movs	r3, #0
}
 800584c:	4618      	mov	r0, r3
 800584e:	3708      	adds	r7, #8
 8005850:	46bd      	mov	sp, r7
 8005852:	bd80      	pop	{r7, pc}

08005854 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005854:	b580      	push	{r7, lr}
 8005856:	b082      	sub	sp, #8
 8005858:	af00      	add	r7, sp, #0
 800585a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	2b00      	cmp	r3, #0
 8005860:	d101      	bne.n	8005866 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005862:	2301      	movs	r3, #1
 8005864:	e049      	b.n	80058fa <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800586c:	b2db      	uxtb	r3, r3
 800586e:	2b00      	cmp	r3, #0
 8005870:	d106      	bne.n	8005880 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	2200      	movs	r2, #0
 8005876:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800587a:	6878      	ldr	r0, [r7, #4]
 800587c:	f000 f841 	bl	8005902 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	2202      	movs	r2, #2
 8005884:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	681a      	ldr	r2, [r3, #0]
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	3304      	adds	r3, #4
 8005890:	4619      	mov	r1, r3
 8005892:	4610      	mov	r0, r2
 8005894:	f000 fef8 	bl	8006688 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	2201      	movs	r2, #1
 800589c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	2201      	movs	r2, #1
 80058a4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	2201      	movs	r2, #1
 80058ac:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	2201      	movs	r2, #1
 80058b4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	2201      	movs	r2, #1
 80058bc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	2201      	movs	r2, #1
 80058c4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	2201      	movs	r2, #1
 80058cc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	2201      	movs	r2, #1
 80058d4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	2201      	movs	r2, #1
 80058dc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	2201      	movs	r2, #1
 80058e4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	2201      	movs	r2, #1
 80058ec:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	2201      	movs	r2, #1
 80058f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80058f8:	2300      	movs	r3, #0
}
 80058fa:	4618      	mov	r0, r3
 80058fc:	3708      	adds	r7, #8
 80058fe:	46bd      	mov	sp, r7
 8005900:	bd80      	pop	{r7, pc}

08005902 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8005902:	b480      	push	{r7}
 8005904:	b083      	sub	sp, #12
 8005906:	af00      	add	r7, sp, #0
 8005908:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800590a:	bf00      	nop
 800590c:	370c      	adds	r7, #12
 800590e:	46bd      	mov	sp, r7
 8005910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005914:	4770      	bx	lr
	...

08005918 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005918:	b580      	push	{r7, lr}
 800591a:	b084      	sub	sp, #16
 800591c:	af00      	add	r7, sp, #0
 800591e:	6078      	str	r0, [r7, #4]
 8005920:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8005922:	683b      	ldr	r3, [r7, #0]
 8005924:	2b00      	cmp	r3, #0
 8005926:	d109      	bne.n	800593c <HAL_TIM_PWM_Start+0x24>
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800592e:	b2db      	uxtb	r3, r3
 8005930:	2b01      	cmp	r3, #1
 8005932:	bf14      	ite	ne
 8005934:	2301      	movne	r3, #1
 8005936:	2300      	moveq	r3, #0
 8005938:	b2db      	uxtb	r3, r3
 800593a:	e03c      	b.n	80059b6 <HAL_TIM_PWM_Start+0x9e>
 800593c:	683b      	ldr	r3, [r7, #0]
 800593e:	2b04      	cmp	r3, #4
 8005940:	d109      	bne.n	8005956 <HAL_TIM_PWM_Start+0x3e>
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8005948:	b2db      	uxtb	r3, r3
 800594a:	2b01      	cmp	r3, #1
 800594c:	bf14      	ite	ne
 800594e:	2301      	movne	r3, #1
 8005950:	2300      	moveq	r3, #0
 8005952:	b2db      	uxtb	r3, r3
 8005954:	e02f      	b.n	80059b6 <HAL_TIM_PWM_Start+0x9e>
 8005956:	683b      	ldr	r3, [r7, #0]
 8005958:	2b08      	cmp	r3, #8
 800595a:	d109      	bne.n	8005970 <HAL_TIM_PWM_Start+0x58>
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005962:	b2db      	uxtb	r3, r3
 8005964:	2b01      	cmp	r3, #1
 8005966:	bf14      	ite	ne
 8005968:	2301      	movne	r3, #1
 800596a:	2300      	moveq	r3, #0
 800596c:	b2db      	uxtb	r3, r3
 800596e:	e022      	b.n	80059b6 <HAL_TIM_PWM_Start+0x9e>
 8005970:	683b      	ldr	r3, [r7, #0]
 8005972:	2b0c      	cmp	r3, #12
 8005974:	d109      	bne.n	800598a <HAL_TIM_PWM_Start+0x72>
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800597c:	b2db      	uxtb	r3, r3
 800597e:	2b01      	cmp	r3, #1
 8005980:	bf14      	ite	ne
 8005982:	2301      	movne	r3, #1
 8005984:	2300      	moveq	r3, #0
 8005986:	b2db      	uxtb	r3, r3
 8005988:	e015      	b.n	80059b6 <HAL_TIM_PWM_Start+0x9e>
 800598a:	683b      	ldr	r3, [r7, #0]
 800598c:	2b10      	cmp	r3, #16
 800598e:	d109      	bne.n	80059a4 <HAL_TIM_PWM_Start+0x8c>
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8005996:	b2db      	uxtb	r3, r3
 8005998:	2b01      	cmp	r3, #1
 800599a:	bf14      	ite	ne
 800599c:	2301      	movne	r3, #1
 800599e:	2300      	moveq	r3, #0
 80059a0:	b2db      	uxtb	r3, r3
 80059a2:	e008      	b.n	80059b6 <HAL_TIM_PWM_Start+0x9e>
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80059aa:	b2db      	uxtb	r3, r3
 80059ac:	2b01      	cmp	r3, #1
 80059ae:	bf14      	ite	ne
 80059b0:	2301      	movne	r3, #1
 80059b2:	2300      	moveq	r3, #0
 80059b4:	b2db      	uxtb	r3, r3
 80059b6:	2b00      	cmp	r3, #0
 80059b8:	d001      	beq.n	80059be <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 80059ba:	2301      	movs	r3, #1
 80059bc:	e083      	b.n	8005ac6 <HAL_TIM_PWM_Start+0x1ae>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80059be:	683b      	ldr	r3, [r7, #0]
 80059c0:	2b00      	cmp	r3, #0
 80059c2:	d104      	bne.n	80059ce <HAL_TIM_PWM_Start+0xb6>
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	2202      	movs	r2, #2
 80059c8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80059cc:	e023      	b.n	8005a16 <HAL_TIM_PWM_Start+0xfe>
 80059ce:	683b      	ldr	r3, [r7, #0]
 80059d0:	2b04      	cmp	r3, #4
 80059d2:	d104      	bne.n	80059de <HAL_TIM_PWM_Start+0xc6>
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	2202      	movs	r2, #2
 80059d8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80059dc:	e01b      	b.n	8005a16 <HAL_TIM_PWM_Start+0xfe>
 80059de:	683b      	ldr	r3, [r7, #0]
 80059e0:	2b08      	cmp	r3, #8
 80059e2:	d104      	bne.n	80059ee <HAL_TIM_PWM_Start+0xd6>
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	2202      	movs	r2, #2
 80059e8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80059ec:	e013      	b.n	8005a16 <HAL_TIM_PWM_Start+0xfe>
 80059ee:	683b      	ldr	r3, [r7, #0]
 80059f0:	2b0c      	cmp	r3, #12
 80059f2:	d104      	bne.n	80059fe <HAL_TIM_PWM_Start+0xe6>
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	2202      	movs	r2, #2
 80059f8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80059fc:	e00b      	b.n	8005a16 <HAL_TIM_PWM_Start+0xfe>
 80059fe:	683b      	ldr	r3, [r7, #0]
 8005a00:	2b10      	cmp	r3, #16
 8005a02:	d104      	bne.n	8005a0e <HAL_TIM_PWM_Start+0xf6>
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	2202      	movs	r2, #2
 8005a08:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005a0c:	e003      	b.n	8005a16 <HAL_TIM_PWM_Start+0xfe>
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	2202      	movs	r2, #2
 8005a12:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	681b      	ldr	r3, [r3, #0]
 8005a1a:	2201      	movs	r2, #1
 8005a1c:	6839      	ldr	r1, [r7, #0]
 8005a1e:	4618      	mov	r0, r3
 8005a20:	f001 fb5e 	bl	80070e0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	681b      	ldr	r3, [r3, #0]
 8005a28:	4a29      	ldr	r2, [pc, #164]	; (8005ad0 <HAL_TIM_PWM_Start+0x1b8>)
 8005a2a:	4293      	cmp	r3, r2
 8005a2c:	d009      	beq.n	8005a42 <HAL_TIM_PWM_Start+0x12a>
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	681b      	ldr	r3, [r3, #0]
 8005a32:	4a28      	ldr	r2, [pc, #160]	; (8005ad4 <HAL_TIM_PWM_Start+0x1bc>)
 8005a34:	4293      	cmp	r3, r2
 8005a36:	d004      	beq.n	8005a42 <HAL_TIM_PWM_Start+0x12a>
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	681b      	ldr	r3, [r3, #0]
 8005a3c:	4a26      	ldr	r2, [pc, #152]	; (8005ad8 <HAL_TIM_PWM_Start+0x1c0>)
 8005a3e:	4293      	cmp	r3, r2
 8005a40:	d101      	bne.n	8005a46 <HAL_TIM_PWM_Start+0x12e>
 8005a42:	2301      	movs	r3, #1
 8005a44:	e000      	b.n	8005a48 <HAL_TIM_PWM_Start+0x130>
 8005a46:	2300      	movs	r3, #0
 8005a48:	2b00      	cmp	r3, #0
 8005a4a:	d007      	beq.n	8005a5c <HAL_TIM_PWM_Start+0x144>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	681b      	ldr	r3, [r3, #0]
 8005a50:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	681b      	ldr	r3, [r3, #0]
 8005a56:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005a5a:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	681b      	ldr	r3, [r3, #0]
 8005a60:	4a1b      	ldr	r2, [pc, #108]	; (8005ad0 <HAL_TIM_PWM_Start+0x1b8>)
 8005a62:	4293      	cmp	r3, r2
 8005a64:	d00e      	beq.n	8005a84 <HAL_TIM_PWM_Start+0x16c>
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	681b      	ldr	r3, [r3, #0]
 8005a6a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005a6e:	d009      	beq.n	8005a84 <HAL_TIM_PWM_Start+0x16c>
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	681b      	ldr	r3, [r3, #0]
 8005a74:	4a19      	ldr	r2, [pc, #100]	; (8005adc <HAL_TIM_PWM_Start+0x1c4>)
 8005a76:	4293      	cmp	r3, r2
 8005a78:	d004      	beq.n	8005a84 <HAL_TIM_PWM_Start+0x16c>
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	681b      	ldr	r3, [r3, #0]
 8005a7e:	4a15      	ldr	r2, [pc, #84]	; (8005ad4 <HAL_TIM_PWM_Start+0x1bc>)
 8005a80:	4293      	cmp	r3, r2
 8005a82:	d115      	bne.n	8005ab0 <HAL_TIM_PWM_Start+0x198>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	681b      	ldr	r3, [r3, #0]
 8005a88:	689a      	ldr	r2, [r3, #8]
 8005a8a:	4b15      	ldr	r3, [pc, #84]	; (8005ae0 <HAL_TIM_PWM_Start+0x1c8>)
 8005a8c:	4013      	ands	r3, r2
 8005a8e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005a90:	68fb      	ldr	r3, [r7, #12]
 8005a92:	2b06      	cmp	r3, #6
 8005a94:	d015      	beq.n	8005ac2 <HAL_TIM_PWM_Start+0x1aa>
 8005a96:	68fb      	ldr	r3, [r7, #12]
 8005a98:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005a9c:	d011      	beq.n	8005ac2 <HAL_TIM_PWM_Start+0x1aa>
    {
      __HAL_TIM_ENABLE(htim);
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	681b      	ldr	r3, [r3, #0]
 8005aa2:	681a      	ldr	r2, [r3, #0]
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	681b      	ldr	r3, [r3, #0]
 8005aa8:	f042 0201 	orr.w	r2, r2, #1
 8005aac:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005aae:	e008      	b.n	8005ac2 <HAL_TIM_PWM_Start+0x1aa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	681b      	ldr	r3, [r3, #0]
 8005ab4:	681a      	ldr	r2, [r3, #0]
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	681b      	ldr	r3, [r3, #0]
 8005aba:	f042 0201 	orr.w	r2, r2, #1
 8005abe:	601a      	str	r2, [r3, #0]
 8005ac0:	e000      	b.n	8005ac4 <HAL_TIM_PWM_Start+0x1ac>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005ac2:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005ac4:	2300      	movs	r3, #0
}
 8005ac6:	4618      	mov	r0, r3
 8005ac8:	3710      	adds	r7, #16
 8005aca:	46bd      	mov	sp, r7
 8005acc:	bd80      	pop	{r7, pc}
 8005ace:	bf00      	nop
 8005ad0:	40012c00 	.word	0x40012c00
 8005ad4:	40014000 	.word	0x40014000
 8005ad8:	40014400 	.word	0x40014400
 8005adc:	40000400 	.word	0x40000400
 8005ae0:	00010007 	.word	0x00010007

08005ae4 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8005ae4:	b580      	push	{r7, lr}
 8005ae6:	b082      	sub	sp, #8
 8005ae8:	af00      	add	r7, sp, #0
 8005aea:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	2b00      	cmp	r3, #0
 8005af0:	d101      	bne.n	8005af6 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8005af2:	2301      	movs	r3, #1
 8005af4:	e049      	b.n	8005b8a <HAL_TIM_IC_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005afc:	b2db      	uxtb	r3, r3
 8005afe:	2b00      	cmp	r3, #0
 8005b00:	d106      	bne.n	8005b10 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	2200      	movs	r2, #0
 8005b06:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8005b0a:	6878      	ldr	r0, [r7, #4]
 8005b0c:	f000 f841 	bl	8005b92 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	2202      	movs	r2, #2
 8005b14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	681a      	ldr	r2, [r3, #0]
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	3304      	adds	r3, #4
 8005b20:	4619      	mov	r1, r3
 8005b22:	4610      	mov	r0, r2
 8005b24:	f000 fdb0 	bl	8006688 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	2201      	movs	r2, #1
 8005b2c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	2201      	movs	r2, #1
 8005b34:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	2201      	movs	r2, #1
 8005b3c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	2201      	movs	r2, #1
 8005b44:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	2201      	movs	r2, #1
 8005b4c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	2201      	movs	r2, #1
 8005b54:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	2201      	movs	r2, #1
 8005b5c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	2201      	movs	r2, #1
 8005b64:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	2201      	movs	r2, #1
 8005b6c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	2201      	movs	r2, #1
 8005b74:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	2201      	movs	r2, #1
 8005b7c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	2201      	movs	r2, #1
 8005b84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005b88:	2300      	movs	r3, #0
}
 8005b8a:	4618      	mov	r0, r3
 8005b8c:	3708      	adds	r7, #8
 8005b8e:	46bd      	mov	sp, r7
 8005b90:	bd80      	pop	{r7, pc}

08005b92 <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 8005b92:	b480      	push	{r7}
 8005b94:	b083      	sub	sp, #12
 8005b96:	af00      	add	r7, sp, #0
 8005b98:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 8005b9a:	bf00      	nop
 8005b9c:	370c      	adds	r7, #12
 8005b9e:	46bd      	mov	sp, r7
 8005ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ba4:	4770      	bx	lr
	...

08005ba8 <HAL_TIM_IC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from TIM peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_DMA(TIM_HandleTypeDef *htim, uint32_t Channel, uint32_t *pData, uint16_t Length)
{
 8005ba8:	b580      	push	{r7, lr}
 8005baa:	b086      	sub	sp, #24
 8005bac:	af00      	add	r7, sp, #0
 8005bae:	60f8      	str	r0, [r7, #12]
 8005bb0:	60b9      	str	r1, [r7, #8]
 8005bb2:	607a      	str	r2, [r7, #4]
 8005bb4:	807b      	strh	r3, [r7, #2]
  HAL_StatusTypeDef status = HAL_OK;
 8005bb6:	2300      	movs	r3, #0
 8005bb8:	75fb      	strb	r3, [r7, #23]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8005bba:	68bb      	ldr	r3, [r7, #8]
 8005bbc:	2b00      	cmp	r3, #0
 8005bbe:	d104      	bne.n	8005bca <HAL_TIM_IC_Start_DMA+0x22>
 8005bc0:	68fb      	ldr	r3, [r7, #12]
 8005bc2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005bc6:	b2db      	uxtb	r3, r3
 8005bc8:	e023      	b.n	8005c12 <HAL_TIM_IC_Start_DMA+0x6a>
 8005bca:	68bb      	ldr	r3, [r7, #8]
 8005bcc:	2b04      	cmp	r3, #4
 8005bce:	d104      	bne.n	8005bda <HAL_TIM_IC_Start_DMA+0x32>
 8005bd0:	68fb      	ldr	r3, [r7, #12]
 8005bd2:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8005bd6:	b2db      	uxtb	r3, r3
 8005bd8:	e01b      	b.n	8005c12 <HAL_TIM_IC_Start_DMA+0x6a>
 8005bda:	68bb      	ldr	r3, [r7, #8]
 8005bdc:	2b08      	cmp	r3, #8
 8005bde:	d104      	bne.n	8005bea <HAL_TIM_IC_Start_DMA+0x42>
 8005be0:	68fb      	ldr	r3, [r7, #12]
 8005be2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005be6:	b2db      	uxtb	r3, r3
 8005be8:	e013      	b.n	8005c12 <HAL_TIM_IC_Start_DMA+0x6a>
 8005bea:	68bb      	ldr	r3, [r7, #8]
 8005bec:	2b0c      	cmp	r3, #12
 8005bee:	d104      	bne.n	8005bfa <HAL_TIM_IC_Start_DMA+0x52>
 8005bf0:	68fb      	ldr	r3, [r7, #12]
 8005bf2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005bf6:	b2db      	uxtb	r3, r3
 8005bf8:	e00b      	b.n	8005c12 <HAL_TIM_IC_Start_DMA+0x6a>
 8005bfa:	68bb      	ldr	r3, [r7, #8]
 8005bfc:	2b10      	cmp	r3, #16
 8005bfe:	d104      	bne.n	8005c0a <HAL_TIM_IC_Start_DMA+0x62>
 8005c00:	68fb      	ldr	r3, [r7, #12]
 8005c02:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8005c06:	b2db      	uxtb	r3, r3
 8005c08:	e003      	b.n	8005c12 <HAL_TIM_IC_Start_DMA+0x6a>
 8005c0a:	68fb      	ldr	r3, [r7, #12]
 8005c0c:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8005c10:	b2db      	uxtb	r3, r3
 8005c12:	75bb      	strb	r3, [r7, #22]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8005c14:	68bb      	ldr	r3, [r7, #8]
 8005c16:	2b00      	cmp	r3, #0
 8005c18:	d104      	bne.n	8005c24 <HAL_TIM_IC_Start_DMA+0x7c>
 8005c1a:	68fb      	ldr	r3, [r7, #12]
 8005c1c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005c20:	b2db      	uxtb	r3, r3
 8005c22:	e013      	b.n	8005c4c <HAL_TIM_IC_Start_DMA+0xa4>
 8005c24:	68bb      	ldr	r3, [r7, #8]
 8005c26:	2b04      	cmp	r3, #4
 8005c28:	d104      	bne.n	8005c34 <HAL_TIM_IC_Start_DMA+0x8c>
 8005c2a:	68fb      	ldr	r3, [r7, #12]
 8005c2c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005c30:	b2db      	uxtb	r3, r3
 8005c32:	e00b      	b.n	8005c4c <HAL_TIM_IC_Start_DMA+0xa4>
 8005c34:	68bb      	ldr	r3, [r7, #8]
 8005c36:	2b08      	cmp	r3, #8
 8005c38:	d104      	bne.n	8005c44 <HAL_TIM_IC_Start_DMA+0x9c>
 8005c3a:	68fb      	ldr	r3, [r7, #12]
 8005c3c:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8005c40:	b2db      	uxtb	r3, r3
 8005c42:	e003      	b.n	8005c4c <HAL_TIM_IC_Start_DMA+0xa4>
 8005c44:	68fb      	ldr	r3, [r7, #12]
 8005c46:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 8005c4a:	b2db      	uxtb	r3, r3
 8005c4c:	757b      	strb	r3, [r7, #21]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));
  assert_param(IS_TIM_DMA_CC_INSTANCE(htim->Instance));

  /* Set the TIM channel state */
  if ((channel_state == HAL_TIM_CHANNEL_STATE_BUSY)
 8005c4e:	7dbb      	ldrb	r3, [r7, #22]
 8005c50:	2b02      	cmp	r3, #2
 8005c52:	d002      	beq.n	8005c5a <HAL_TIM_IC_Start_DMA+0xb2>
      || (complementary_channel_state == HAL_TIM_CHANNEL_STATE_BUSY))
 8005c54:	7d7b      	ldrb	r3, [r7, #21]
 8005c56:	2b02      	cmp	r3, #2
 8005c58:	d101      	bne.n	8005c5e <HAL_TIM_IC_Start_DMA+0xb6>
  {
    return HAL_BUSY;
 8005c5a:	2302      	movs	r3, #2
 8005c5c:	e148      	b.n	8005ef0 <HAL_TIM_IC_Start_DMA+0x348>
  }
  else if ((channel_state == HAL_TIM_CHANNEL_STATE_READY)
 8005c5e:	7dbb      	ldrb	r3, [r7, #22]
 8005c60:	2b01      	cmp	r3, #1
 8005c62:	d153      	bne.n	8005d0c <HAL_TIM_IC_Start_DMA+0x164>
           && (complementary_channel_state == HAL_TIM_CHANNEL_STATE_READY))
 8005c64:	7d7b      	ldrb	r3, [r7, #21]
 8005c66:	2b01      	cmp	r3, #1
 8005c68:	d150      	bne.n	8005d0c <HAL_TIM_IC_Start_DMA+0x164>
  {
    if ((pData == NULL) || (Length == 0U))
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	2b00      	cmp	r3, #0
 8005c6e:	d002      	beq.n	8005c76 <HAL_TIM_IC_Start_DMA+0xce>
 8005c70:	887b      	ldrh	r3, [r7, #2]
 8005c72:	2b00      	cmp	r3, #0
 8005c74:	d101      	bne.n	8005c7a <HAL_TIM_IC_Start_DMA+0xd2>
    {
      return HAL_ERROR;
 8005c76:	2301      	movs	r3, #1
 8005c78:	e13a      	b.n	8005ef0 <HAL_TIM_IC_Start_DMA+0x348>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005c7a:	68bb      	ldr	r3, [r7, #8]
 8005c7c:	2b00      	cmp	r3, #0
 8005c7e:	d104      	bne.n	8005c8a <HAL_TIM_IC_Start_DMA+0xe2>
 8005c80:	68fb      	ldr	r3, [r7, #12]
 8005c82:	2202      	movs	r2, #2
 8005c84:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005c88:	e023      	b.n	8005cd2 <HAL_TIM_IC_Start_DMA+0x12a>
 8005c8a:	68bb      	ldr	r3, [r7, #8]
 8005c8c:	2b04      	cmp	r3, #4
 8005c8e:	d104      	bne.n	8005c9a <HAL_TIM_IC_Start_DMA+0xf2>
 8005c90:	68fb      	ldr	r3, [r7, #12]
 8005c92:	2202      	movs	r2, #2
 8005c94:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005c98:	e01b      	b.n	8005cd2 <HAL_TIM_IC_Start_DMA+0x12a>
 8005c9a:	68bb      	ldr	r3, [r7, #8]
 8005c9c:	2b08      	cmp	r3, #8
 8005c9e:	d104      	bne.n	8005caa <HAL_TIM_IC_Start_DMA+0x102>
 8005ca0:	68fb      	ldr	r3, [r7, #12]
 8005ca2:	2202      	movs	r2, #2
 8005ca4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005ca8:	e013      	b.n	8005cd2 <HAL_TIM_IC_Start_DMA+0x12a>
 8005caa:	68bb      	ldr	r3, [r7, #8]
 8005cac:	2b0c      	cmp	r3, #12
 8005cae:	d104      	bne.n	8005cba <HAL_TIM_IC_Start_DMA+0x112>
 8005cb0:	68fb      	ldr	r3, [r7, #12]
 8005cb2:	2202      	movs	r2, #2
 8005cb4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005cb8:	e00b      	b.n	8005cd2 <HAL_TIM_IC_Start_DMA+0x12a>
 8005cba:	68bb      	ldr	r3, [r7, #8]
 8005cbc:	2b10      	cmp	r3, #16
 8005cbe:	d104      	bne.n	8005cca <HAL_TIM_IC_Start_DMA+0x122>
 8005cc0:	68fb      	ldr	r3, [r7, #12]
 8005cc2:	2202      	movs	r2, #2
 8005cc4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005cc8:	e003      	b.n	8005cd2 <HAL_TIM_IC_Start_DMA+0x12a>
 8005cca:	68fb      	ldr	r3, [r7, #12]
 8005ccc:	2202      	movs	r2, #2
 8005cce:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
      TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005cd2:	68bb      	ldr	r3, [r7, #8]
 8005cd4:	2b00      	cmp	r3, #0
 8005cd6:	d104      	bne.n	8005ce2 <HAL_TIM_IC_Start_DMA+0x13a>
 8005cd8:	68fb      	ldr	r3, [r7, #12]
 8005cda:	2202      	movs	r2, #2
 8005cdc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    if ((pData == NULL) || (Length == 0U))
 8005ce0:	e016      	b.n	8005d10 <HAL_TIM_IC_Start_DMA+0x168>
      TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005ce2:	68bb      	ldr	r3, [r7, #8]
 8005ce4:	2b04      	cmp	r3, #4
 8005ce6:	d104      	bne.n	8005cf2 <HAL_TIM_IC_Start_DMA+0x14a>
 8005ce8:	68fb      	ldr	r3, [r7, #12]
 8005cea:	2202      	movs	r2, #2
 8005cec:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    if ((pData == NULL) || (Length == 0U))
 8005cf0:	e00e      	b.n	8005d10 <HAL_TIM_IC_Start_DMA+0x168>
      TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005cf2:	68bb      	ldr	r3, [r7, #8]
 8005cf4:	2b08      	cmp	r3, #8
 8005cf6:	d104      	bne.n	8005d02 <HAL_TIM_IC_Start_DMA+0x15a>
 8005cf8:	68fb      	ldr	r3, [r7, #12]
 8005cfa:	2202      	movs	r2, #2
 8005cfc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
    if ((pData == NULL) || (Length == 0U))
 8005d00:	e006      	b.n	8005d10 <HAL_TIM_IC_Start_DMA+0x168>
      TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005d02:	68fb      	ldr	r3, [r7, #12]
 8005d04:	2202      	movs	r2, #2
 8005d06:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47
    if ((pData == NULL) || (Length == 0U))
 8005d0a:	e001      	b.n	8005d10 <HAL_TIM_IC_Start_DMA+0x168>
    }
  }
  else
  {
    return HAL_ERROR;
 8005d0c:	2301      	movs	r3, #1
 8005d0e:	e0ef      	b.n	8005ef0 <HAL_TIM_IC_Start_DMA+0x348>
  }

  /* Enable the Input Capture channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005d10:	68fb      	ldr	r3, [r7, #12]
 8005d12:	681b      	ldr	r3, [r3, #0]
 8005d14:	2201      	movs	r2, #1
 8005d16:	68b9      	ldr	r1, [r7, #8]
 8005d18:	4618      	mov	r0, r3
 8005d1a:	f001 f9e1 	bl	80070e0 <TIM_CCxChannelCmd>

  switch (Channel)
 8005d1e:	68bb      	ldr	r3, [r7, #8]
 8005d20:	2b0c      	cmp	r3, #12
 8005d22:	f200 80ad 	bhi.w	8005e80 <HAL_TIM_IC_Start_DMA+0x2d8>
 8005d26:	a201      	add	r2, pc, #4	; (adr r2, 8005d2c <HAL_TIM_IC_Start_DMA+0x184>)
 8005d28:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005d2c:	08005d61 	.word	0x08005d61
 8005d30:	08005e81 	.word	0x08005e81
 8005d34:	08005e81 	.word	0x08005e81
 8005d38:	08005e81 	.word	0x08005e81
 8005d3c:	08005da9 	.word	0x08005da9
 8005d40:	08005e81 	.word	0x08005e81
 8005d44:	08005e81 	.word	0x08005e81
 8005d48:	08005e81 	.word	0x08005e81
 8005d4c:	08005df1 	.word	0x08005df1
 8005d50:	08005e81 	.word	0x08005e81
 8005d54:	08005e81 	.word	0x08005e81
 8005d58:	08005e81 	.word	0x08005e81
 8005d5c:	08005e39 	.word	0x08005e39
  {
    case TIM_CHANNEL_1:
    {
      /* Set the DMA capture callbacks */
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMACaptureCplt;
 8005d60:	68fb      	ldr	r3, [r7, #12]
 8005d62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d64:	4a64      	ldr	r2, [pc, #400]	; (8005ef8 <HAL_TIM_IC_Start_DMA+0x350>)
 8005d66:	62da      	str	r2, [r3, #44]	; 0x2c
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMACaptureHalfCplt;
 8005d68:	68fb      	ldr	r3, [r7, #12]
 8005d6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d6c:	4a63      	ldr	r2, [pc, #396]	; (8005efc <HAL_TIM_IC_Start_DMA+0x354>)
 8005d6e:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 8005d70:	68fb      	ldr	r3, [r7, #12]
 8005d72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d74:	4a62      	ldr	r2, [pc, #392]	; (8005f00 <HAL_TIM_IC_Start_DMA+0x358>)
 8005d76:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)&htim->Instance->CCR1, (uint32_t)pData,
 8005d78:	68fb      	ldr	r3, [r7, #12]
 8005d7a:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8005d7c:	68fb      	ldr	r3, [r7, #12]
 8005d7e:	681b      	ldr	r3, [r3, #0]
 8005d80:	3334      	adds	r3, #52	; 0x34
 8005d82:	4619      	mov	r1, r3
 8005d84:	687a      	ldr	r2, [r7, #4]
 8005d86:	887b      	ldrh	r3, [r7, #2]
 8005d88:	f7fd ff9e 	bl	8003cc8 <HAL_DMA_Start_IT>
 8005d8c:	4603      	mov	r3, r0
 8005d8e:	2b00      	cmp	r3, #0
 8005d90:	d001      	beq.n	8005d96 <HAL_TIM_IC_Start_DMA+0x1ee>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8005d92:	2301      	movs	r3, #1
 8005d94:	e0ac      	b.n	8005ef0 <HAL_TIM_IC_Start_DMA+0x348>
      }
      /* Enable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 8005d96:	68fb      	ldr	r3, [r7, #12]
 8005d98:	681b      	ldr	r3, [r3, #0]
 8005d9a:	68da      	ldr	r2, [r3, #12]
 8005d9c:	68fb      	ldr	r3, [r7, #12]
 8005d9e:	681b      	ldr	r3, [r3, #0]
 8005da0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005da4:	60da      	str	r2, [r3, #12]
      break;
 8005da6:	e06e      	b.n	8005e86 <HAL_TIM_IC_Start_DMA+0x2de>
    }

    case TIM_CHANNEL_2:
    {
      /* Set the DMA capture callbacks */
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMACaptureCplt;
 8005da8:	68fb      	ldr	r3, [r7, #12]
 8005daa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005dac:	4a52      	ldr	r2, [pc, #328]	; (8005ef8 <HAL_TIM_IC_Start_DMA+0x350>)
 8005dae:	62da      	str	r2, [r3, #44]	; 0x2c
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMACaptureHalfCplt;
 8005db0:	68fb      	ldr	r3, [r7, #12]
 8005db2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005db4:	4a51      	ldr	r2, [pc, #324]	; (8005efc <HAL_TIM_IC_Start_DMA+0x354>)
 8005db6:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 8005db8:	68fb      	ldr	r3, [r7, #12]
 8005dba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005dbc:	4a50      	ldr	r2, [pc, #320]	; (8005f00 <HAL_TIM_IC_Start_DMA+0x358>)
 8005dbe:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)&htim->Instance->CCR2, (uint32_t)pData,
 8005dc0:	68fb      	ldr	r3, [r7, #12]
 8005dc2:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8005dc4:	68fb      	ldr	r3, [r7, #12]
 8005dc6:	681b      	ldr	r3, [r3, #0]
 8005dc8:	3338      	adds	r3, #56	; 0x38
 8005dca:	4619      	mov	r1, r3
 8005dcc:	687a      	ldr	r2, [r7, #4]
 8005dce:	887b      	ldrh	r3, [r7, #2]
 8005dd0:	f7fd ff7a 	bl	8003cc8 <HAL_DMA_Start_IT>
 8005dd4:	4603      	mov	r3, r0
 8005dd6:	2b00      	cmp	r3, #0
 8005dd8:	d001      	beq.n	8005dde <HAL_TIM_IC_Start_DMA+0x236>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8005dda:	2301      	movs	r3, #1
 8005ddc:	e088      	b.n	8005ef0 <HAL_TIM_IC_Start_DMA+0x348>
      }
      /* Enable the TIM Capture/Compare 2  DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 8005dde:	68fb      	ldr	r3, [r7, #12]
 8005de0:	681b      	ldr	r3, [r3, #0]
 8005de2:	68da      	ldr	r2, [r3, #12]
 8005de4:	68fb      	ldr	r3, [r7, #12]
 8005de6:	681b      	ldr	r3, [r3, #0]
 8005de8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005dec:	60da      	str	r2, [r3, #12]
      break;
 8005dee:	e04a      	b.n	8005e86 <HAL_TIM_IC_Start_DMA+0x2de>
    }

    case TIM_CHANNEL_3:
    {
      /* Set the DMA capture callbacks */
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMACaptureCplt;
 8005df0:	68fb      	ldr	r3, [r7, #12]
 8005df2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005df4:	4a40      	ldr	r2, [pc, #256]	; (8005ef8 <HAL_TIM_IC_Start_DMA+0x350>)
 8005df6:	62da      	str	r2, [r3, #44]	; 0x2c
      htim->hdma[TIM_DMA_ID_CC3]->XferHalfCpltCallback = TIM_DMACaptureHalfCplt;
 8005df8:	68fb      	ldr	r3, [r7, #12]
 8005dfa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005dfc:	4a3f      	ldr	r2, [pc, #252]	; (8005efc <HAL_TIM_IC_Start_DMA+0x354>)
 8005dfe:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 8005e00:	68fb      	ldr	r3, [r7, #12]
 8005e02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e04:	4a3e      	ldr	r2, [pc, #248]	; (8005f00 <HAL_TIM_IC_Start_DMA+0x358>)
 8005e06:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)&htim->Instance->CCR3, (uint32_t)pData,
 8005e08:	68fb      	ldr	r3, [r7, #12]
 8005e0a:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8005e0c:	68fb      	ldr	r3, [r7, #12]
 8005e0e:	681b      	ldr	r3, [r3, #0]
 8005e10:	333c      	adds	r3, #60	; 0x3c
 8005e12:	4619      	mov	r1, r3
 8005e14:	687a      	ldr	r2, [r7, #4]
 8005e16:	887b      	ldrh	r3, [r7, #2]
 8005e18:	f7fd ff56 	bl	8003cc8 <HAL_DMA_Start_IT>
 8005e1c:	4603      	mov	r3, r0
 8005e1e:	2b00      	cmp	r3, #0
 8005e20:	d001      	beq.n	8005e26 <HAL_TIM_IC_Start_DMA+0x27e>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8005e22:	2301      	movs	r3, #1
 8005e24:	e064      	b.n	8005ef0 <HAL_TIM_IC_Start_DMA+0x348>
      }
      /* Enable the TIM Capture/Compare 3  DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
 8005e26:	68fb      	ldr	r3, [r7, #12]
 8005e28:	681b      	ldr	r3, [r3, #0]
 8005e2a:	68da      	ldr	r2, [r3, #12]
 8005e2c:	68fb      	ldr	r3, [r7, #12]
 8005e2e:	681b      	ldr	r3, [r3, #0]
 8005e30:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005e34:	60da      	str	r2, [r3, #12]
      break;
 8005e36:	e026      	b.n	8005e86 <HAL_TIM_IC_Start_DMA+0x2de>
    }

    case TIM_CHANNEL_4:
    {
      /* Set the DMA capture callbacks */
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMACaptureCplt;
 8005e38:	68fb      	ldr	r3, [r7, #12]
 8005e3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e3c:	4a2e      	ldr	r2, [pc, #184]	; (8005ef8 <HAL_TIM_IC_Start_DMA+0x350>)
 8005e3e:	62da      	str	r2, [r3, #44]	; 0x2c
      htim->hdma[TIM_DMA_ID_CC4]->XferHalfCpltCallback = TIM_DMACaptureHalfCplt;
 8005e40:	68fb      	ldr	r3, [r7, #12]
 8005e42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e44:	4a2d      	ldr	r2, [pc, #180]	; (8005efc <HAL_TIM_IC_Start_DMA+0x354>)
 8005e46:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 8005e48:	68fb      	ldr	r3, [r7, #12]
 8005e4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e4c:	4a2c      	ldr	r2, [pc, #176]	; (8005f00 <HAL_TIM_IC_Start_DMA+0x358>)
 8005e4e:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)&htim->Instance->CCR4, (uint32_t)pData,
 8005e50:	68fb      	ldr	r3, [r7, #12]
 8005e52:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8005e54:	68fb      	ldr	r3, [r7, #12]
 8005e56:	681b      	ldr	r3, [r3, #0]
 8005e58:	3340      	adds	r3, #64	; 0x40
 8005e5a:	4619      	mov	r1, r3
 8005e5c:	687a      	ldr	r2, [r7, #4]
 8005e5e:	887b      	ldrh	r3, [r7, #2]
 8005e60:	f7fd ff32 	bl	8003cc8 <HAL_DMA_Start_IT>
 8005e64:	4603      	mov	r3, r0
 8005e66:	2b00      	cmp	r3, #0
 8005e68:	d001      	beq.n	8005e6e <HAL_TIM_IC_Start_DMA+0x2c6>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8005e6a:	2301      	movs	r3, #1
 8005e6c:	e040      	b.n	8005ef0 <HAL_TIM_IC_Start_DMA+0x348>
      }
      /* Enable the TIM Capture/Compare 4  DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
 8005e6e:	68fb      	ldr	r3, [r7, #12]
 8005e70:	681b      	ldr	r3, [r3, #0]
 8005e72:	68da      	ldr	r2, [r3, #12]
 8005e74:	68fb      	ldr	r3, [r7, #12]
 8005e76:	681b      	ldr	r3, [r3, #0]
 8005e78:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8005e7c:	60da      	str	r2, [r3, #12]
      break;
 8005e7e:	e002      	b.n	8005e86 <HAL_TIM_IC_Start_DMA+0x2de>
    }

    default:
      status = HAL_ERROR;
 8005e80:	2301      	movs	r3, #1
 8005e82:	75fb      	strb	r3, [r7, #23]
      break;
 8005e84:	bf00      	nop
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005e86:	68fb      	ldr	r3, [r7, #12]
 8005e88:	681b      	ldr	r3, [r3, #0]
 8005e8a:	4a1e      	ldr	r2, [pc, #120]	; (8005f04 <HAL_TIM_IC_Start_DMA+0x35c>)
 8005e8c:	4293      	cmp	r3, r2
 8005e8e:	d00e      	beq.n	8005eae <HAL_TIM_IC_Start_DMA+0x306>
 8005e90:	68fb      	ldr	r3, [r7, #12]
 8005e92:	681b      	ldr	r3, [r3, #0]
 8005e94:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005e98:	d009      	beq.n	8005eae <HAL_TIM_IC_Start_DMA+0x306>
 8005e9a:	68fb      	ldr	r3, [r7, #12]
 8005e9c:	681b      	ldr	r3, [r3, #0]
 8005e9e:	4a1a      	ldr	r2, [pc, #104]	; (8005f08 <HAL_TIM_IC_Start_DMA+0x360>)
 8005ea0:	4293      	cmp	r3, r2
 8005ea2:	d004      	beq.n	8005eae <HAL_TIM_IC_Start_DMA+0x306>
 8005ea4:	68fb      	ldr	r3, [r7, #12]
 8005ea6:	681b      	ldr	r3, [r3, #0]
 8005ea8:	4a18      	ldr	r2, [pc, #96]	; (8005f0c <HAL_TIM_IC_Start_DMA+0x364>)
 8005eaa:	4293      	cmp	r3, r2
 8005eac:	d115      	bne.n	8005eda <HAL_TIM_IC_Start_DMA+0x332>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005eae:	68fb      	ldr	r3, [r7, #12]
 8005eb0:	681b      	ldr	r3, [r3, #0]
 8005eb2:	689a      	ldr	r2, [r3, #8]
 8005eb4:	4b16      	ldr	r3, [pc, #88]	; (8005f10 <HAL_TIM_IC_Start_DMA+0x368>)
 8005eb6:	4013      	ands	r3, r2
 8005eb8:	613b      	str	r3, [r7, #16]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005eba:	693b      	ldr	r3, [r7, #16]
 8005ebc:	2b06      	cmp	r3, #6
 8005ebe:	d015      	beq.n	8005eec <HAL_TIM_IC_Start_DMA+0x344>
 8005ec0:	693b      	ldr	r3, [r7, #16]
 8005ec2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005ec6:	d011      	beq.n	8005eec <HAL_TIM_IC_Start_DMA+0x344>
    {
      __HAL_TIM_ENABLE(htim);
 8005ec8:	68fb      	ldr	r3, [r7, #12]
 8005eca:	681b      	ldr	r3, [r3, #0]
 8005ecc:	681a      	ldr	r2, [r3, #0]
 8005ece:	68fb      	ldr	r3, [r7, #12]
 8005ed0:	681b      	ldr	r3, [r3, #0]
 8005ed2:	f042 0201 	orr.w	r2, r2, #1
 8005ed6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005ed8:	e008      	b.n	8005eec <HAL_TIM_IC_Start_DMA+0x344>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005eda:	68fb      	ldr	r3, [r7, #12]
 8005edc:	681b      	ldr	r3, [r3, #0]
 8005ede:	681a      	ldr	r2, [r3, #0]
 8005ee0:	68fb      	ldr	r3, [r7, #12]
 8005ee2:	681b      	ldr	r3, [r3, #0]
 8005ee4:	f042 0201 	orr.w	r2, r2, #1
 8005ee8:	601a      	str	r2, [r3, #0]
 8005eea:	e000      	b.n	8005eee <HAL_TIM_IC_Start_DMA+0x346>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005eec:	bf00      	nop
  }

  /* Return function status */
  return status;
 8005eee:	7dfb      	ldrb	r3, [r7, #23]
}
 8005ef0:	4618      	mov	r0, r3
 8005ef2:	3718      	adds	r7, #24
 8005ef4:	46bd      	mov	sp, r7
 8005ef6:	bd80      	pop	{r7, pc}
 8005ef8:	08006559 	.word	0x08006559
 8005efc:	08006621 	.word	0x08006621
 8005f00:	080064c7 	.word	0x080064c7
 8005f04:	40012c00 	.word	0x40012c00
 8005f08:	40000400 	.word	0x40000400
 8005f0c:	40014000 	.word	0x40014000
 8005f10:	00010007 	.word	0x00010007

08005f14 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8005f14:	b580      	push	{r7, lr}
 8005f16:	b086      	sub	sp, #24
 8005f18:	af00      	add	r7, sp, #0
 8005f1a:	60f8      	str	r0, [r7, #12]
 8005f1c:	60b9      	str	r1, [r7, #8]
 8005f1e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005f20:	2300      	movs	r3, #0
 8005f22:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005f24:	68fb      	ldr	r3, [r7, #12]
 8005f26:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005f2a:	2b01      	cmp	r3, #1
 8005f2c:	d101      	bne.n	8005f32 <HAL_TIM_IC_ConfigChannel+0x1e>
 8005f2e:	2302      	movs	r3, #2
 8005f30:	e088      	b.n	8006044 <HAL_TIM_IC_ConfigChannel+0x130>
 8005f32:	68fb      	ldr	r3, [r7, #12]
 8005f34:	2201      	movs	r2, #1
 8005f36:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	2b00      	cmp	r3, #0
 8005f3e:	d11b      	bne.n	8005f78 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8005f40:	68fb      	ldr	r3, [r7, #12]
 8005f42:	6818      	ldr	r0, [r3, #0]
 8005f44:	68bb      	ldr	r3, [r7, #8]
 8005f46:	6819      	ldr	r1, [r3, #0]
 8005f48:	68bb      	ldr	r3, [r7, #8]
 8005f4a:	685a      	ldr	r2, [r3, #4]
 8005f4c:	68bb      	ldr	r3, [r7, #8]
 8005f4e:	68db      	ldr	r3, [r3, #12]
 8005f50:	f000 ff1a 	bl	8006d88 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8005f54:	68fb      	ldr	r3, [r7, #12]
 8005f56:	681b      	ldr	r3, [r3, #0]
 8005f58:	699a      	ldr	r2, [r3, #24]
 8005f5a:	68fb      	ldr	r3, [r7, #12]
 8005f5c:	681b      	ldr	r3, [r3, #0]
 8005f5e:	f022 020c 	bic.w	r2, r2, #12
 8005f62:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8005f64:	68fb      	ldr	r3, [r7, #12]
 8005f66:	681b      	ldr	r3, [r3, #0]
 8005f68:	6999      	ldr	r1, [r3, #24]
 8005f6a:	68bb      	ldr	r3, [r7, #8]
 8005f6c:	689a      	ldr	r2, [r3, #8]
 8005f6e:	68fb      	ldr	r3, [r7, #12]
 8005f70:	681b      	ldr	r3, [r3, #0]
 8005f72:	430a      	orrs	r2, r1
 8005f74:	619a      	str	r2, [r3, #24]
 8005f76:	e060      	b.n	800603a <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	2b04      	cmp	r3, #4
 8005f7c:	d11c      	bne.n	8005fb8 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8005f7e:	68fb      	ldr	r3, [r7, #12]
 8005f80:	6818      	ldr	r0, [r3, #0]
 8005f82:	68bb      	ldr	r3, [r7, #8]
 8005f84:	6819      	ldr	r1, [r3, #0]
 8005f86:	68bb      	ldr	r3, [r7, #8]
 8005f88:	685a      	ldr	r2, [r3, #4]
 8005f8a:	68bb      	ldr	r3, [r7, #8]
 8005f8c:	68db      	ldr	r3, [r3, #12]
 8005f8e:	f000 ff86 	bl	8006e9e <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8005f92:	68fb      	ldr	r3, [r7, #12]
 8005f94:	681b      	ldr	r3, [r3, #0]
 8005f96:	699a      	ldr	r2, [r3, #24]
 8005f98:	68fb      	ldr	r3, [r7, #12]
 8005f9a:	681b      	ldr	r3, [r3, #0]
 8005f9c:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8005fa0:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8005fa2:	68fb      	ldr	r3, [r7, #12]
 8005fa4:	681b      	ldr	r3, [r3, #0]
 8005fa6:	6999      	ldr	r1, [r3, #24]
 8005fa8:	68bb      	ldr	r3, [r7, #8]
 8005faa:	689b      	ldr	r3, [r3, #8]
 8005fac:	021a      	lsls	r2, r3, #8
 8005fae:	68fb      	ldr	r3, [r7, #12]
 8005fb0:	681b      	ldr	r3, [r3, #0]
 8005fb2:	430a      	orrs	r2, r1
 8005fb4:	619a      	str	r2, [r3, #24]
 8005fb6:	e040      	b.n	800603a <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	2b08      	cmp	r3, #8
 8005fbc:	d11b      	bne.n	8005ff6 <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8005fbe:	68fb      	ldr	r3, [r7, #12]
 8005fc0:	6818      	ldr	r0, [r3, #0]
 8005fc2:	68bb      	ldr	r3, [r7, #8]
 8005fc4:	6819      	ldr	r1, [r3, #0]
 8005fc6:	68bb      	ldr	r3, [r7, #8]
 8005fc8:	685a      	ldr	r2, [r3, #4]
 8005fca:	68bb      	ldr	r3, [r7, #8]
 8005fcc:	68db      	ldr	r3, [r3, #12]
 8005fce:	f000 ffd3 	bl	8006f78 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8005fd2:	68fb      	ldr	r3, [r7, #12]
 8005fd4:	681b      	ldr	r3, [r3, #0]
 8005fd6:	69da      	ldr	r2, [r3, #28]
 8005fd8:	68fb      	ldr	r3, [r7, #12]
 8005fda:	681b      	ldr	r3, [r3, #0]
 8005fdc:	f022 020c 	bic.w	r2, r2, #12
 8005fe0:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8005fe2:	68fb      	ldr	r3, [r7, #12]
 8005fe4:	681b      	ldr	r3, [r3, #0]
 8005fe6:	69d9      	ldr	r1, [r3, #28]
 8005fe8:	68bb      	ldr	r3, [r7, #8]
 8005fea:	689a      	ldr	r2, [r3, #8]
 8005fec:	68fb      	ldr	r3, [r7, #12]
 8005fee:	681b      	ldr	r3, [r3, #0]
 8005ff0:	430a      	orrs	r2, r1
 8005ff2:	61da      	str	r2, [r3, #28]
 8005ff4:	e021      	b.n	800603a <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	2b0c      	cmp	r3, #12
 8005ffa:	d11c      	bne.n	8006036 <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8005ffc:	68fb      	ldr	r3, [r7, #12]
 8005ffe:	6818      	ldr	r0, [r3, #0]
 8006000:	68bb      	ldr	r3, [r7, #8]
 8006002:	6819      	ldr	r1, [r3, #0]
 8006004:	68bb      	ldr	r3, [r7, #8]
 8006006:	685a      	ldr	r2, [r3, #4]
 8006008:	68bb      	ldr	r3, [r7, #8]
 800600a:	68db      	ldr	r3, [r3, #12]
 800600c:	f000 fff0 	bl	8006ff0 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8006010:	68fb      	ldr	r3, [r7, #12]
 8006012:	681b      	ldr	r3, [r3, #0]
 8006014:	69da      	ldr	r2, [r3, #28]
 8006016:	68fb      	ldr	r3, [r7, #12]
 8006018:	681b      	ldr	r3, [r3, #0]
 800601a:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 800601e:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8006020:	68fb      	ldr	r3, [r7, #12]
 8006022:	681b      	ldr	r3, [r3, #0]
 8006024:	69d9      	ldr	r1, [r3, #28]
 8006026:	68bb      	ldr	r3, [r7, #8]
 8006028:	689b      	ldr	r3, [r3, #8]
 800602a:	021a      	lsls	r2, r3, #8
 800602c:	68fb      	ldr	r3, [r7, #12]
 800602e:	681b      	ldr	r3, [r3, #0]
 8006030:	430a      	orrs	r2, r1
 8006032:	61da      	str	r2, [r3, #28]
 8006034:	e001      	b.n	800603a <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 8006036:	2301      	movs	r3, #1
 8006038:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 800603a:	68fb      	ldr	r3, [r7, #12]
 800603c:	2200      	movs	r2, #0
 800603e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006042:	7dfb      	ldrb	r3, [r7, #23]
}
 8006044:	4618      	mov	r0, r3
 8006046:	3718      	adds	r7, #24
 8006048:	46bd      	mov	sp, r7
 800604a:	bd80      	pop	{r7, pc}

0800604c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800604c:	b580      	push	{r7, lr}
 800604e:	b086      	sub	sp, #24
 8006050:	af00      	add	r7, sp, #0
 8006052:	60f8      	str	r0, [r7, #12]
 8006054:	60b9      	str	r1, [r7, #8]
 8006056:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006058:	2300      	movs	r3, #0
 800605a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800605c:	68fb      	ldr	r3, [r7, #12]
 800605e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006062:	2b01      	cmp	r3, #1
 8006064:	d101      	bne.n	800606a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8006066:	2302      	movs	r3, #2
 8006068:	e0ff      	b.n	800626a <HAL_TIM_PWM_ConfigChannel+0x21e>
 800606a:	68fb      	ldr	r3, [r7, #12]
 800606c:	2201      	movs	r2, #1
 800606e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	2b14      	cmp	r3, #20
 8006076:	f200 80f0 	bhi.w	800625a <HAL_TIM_PWM_ConfigChannel+0x20e>
 800607a:	a201      	add	r2, pc, #4	; (adr r2, 8006080 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800607c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006080:	080060d5 	.word	0x080060d5
 8006084:	0800625b 	.word	0x0800625b
 8006088:	0800625b 	.word	0x0800625b
 800608c:	0800625b 	.word	0x0800625b
 8006090:	08006115 	.word	0x08006115
 8006094:	0800625b 	.word	0x0800625b
 8006098:	0800625b 	.word	0x0800625b
 800609c:	0800625b 	.word	0x0800625b
 80060a0:	08006157 	.word	0x08006157
 80060a4:	0800625b 	.word	0x0800625b
 80060a8:	0800625b 	.word	0x0800625b
 80060ac:	0800625b 	.word	0x0800625b
 80060b0:	08006197 	.word	0x08006197
 80060b4:	0800625b 	.word	0x0800625b
 80060b8:	0800625b 	.word	0x0800625b
 80060bc:	0800625b 	.word	0x0800625b
 80060c0:	080061d9 	.word	0x080061d9
 80060c4:	0800625b 	.word	0x0800625b
 80060c8:	0800625b 	.word	0x0800625b
 80060cc:	0800625b 	.word	0x0800625b
 80060d0:	08006219 	.word	0x08006219
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80060d4:	68fb      	ldr	r3, [r7, #12]
 80060d6:	681b      	ldr	r3, [r3, #0]
 80060d8:	68b9      	ldr	r1, [r7, #8]
 80060da:	4618      	mov	r0, r3
 80060dc:	f000 fb42 	bl	8006764 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80060e0:	68fb      	ldr	r3, [r7, #12]
 80060e2:	681b      	ldr	r3, [r3, #0]
 80060e4:	699a      	ldr	r2, [r3, #24]
 80060e6:	68fb      	ldr	r3, [r7, #12]
 80060e8:	681b      	ldr	r3, [r3, #0]
 80060ea:	f042 0208 	orr.w	r2, r2, #8
 80060ee:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80060f0:	68fb      	ldr	r3, [r7, #12]
 80060f2:	681b      	ldr	r3, [r3, #0]
 80060f4:	699a      	ldr	r2, [r3, #24]
 80060f6:	68fb      	ldr	r3, [r7, #12]
 80060f8:	681b      	ldr	r3, [r3, #0]
 80060fa:	f022 0204 	bic.w	r2, r2, #4
 80060fe:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8006100:	68fb      	ldr	r3, [r7, #12]
 8006102:	681b      	ldr	r3, [r3, #0]
 8006104:	6999      	ldr	r1, [r3, #24]
 8006106:	68bb      	ldr	r3, [r7, #8]
 8006108:	691a      	ldr	r2, [r3, #16]
 800610a:	68fb      	ldr	r3, [r7, #12]
 800610c:	681b      	ldr	r3, [r3, #0]
 800610e:	430a      	orrs	r2, r1
 8006110:	619a      	str	r2, [r3, #24]
      break;
 8006112:	e0a5      	b.n	8006260 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006114:	68fb      	ldr	r3, [r7, #12]
 8006116:	681b      	ldr	r3, [r3, #0]
 8006118:	68b9      	ldr	r1, [r7, #8]
 800611a:	4618      	mov	r0, r3
 800611c:	f000 fb9e 	bl	800685c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8006120:	68fb      	ldr	r3, [r7, #12]
 8006122:	681b      	ldr	r3, [r3, #0]
 8006124:	699a      	ldr	r2, [r3, #24]
 8006126:	68fb      	ldr	r3, [r7, #12]
 8006128:	681b      	ldr	r3, [r3, #0]
 800612a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800612e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8006130:	68fb      	ldr	r3, [r7, #12]
 8006132:	681b      	ldr	r3, [r3, #0]
 8006134:	699a      	ldr	r2, [r3, #24]
 8006136:	68fb      	ldr	r3, [r7, #12]
 8006138:	681b      	ldr	r3, [r3, #0]
 800613a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800613e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8006140:	68fb      	ldr	r3, [r7, #12]
 8006142:	681b      	ldr	r3, [r3, #0]
 8006144:	6999      	ldr	r1, [r3, #24]
 8006146:	68bb      	ldr	r3, [r7, #8]
 8006148:	691b      	ldr	r3, [r3, #16]
 800614a:	021a      	lsls	r2, r3, #8
 800614c:	68fb      	ldr	r3, [r7, #12]
 800614e:	681b      	ldr	r3, [r3, #0]
 8006150:	430a      	orrs	r2, r1
 8006152:	619a      	str	r2, [r3, #24]
      break;
 8006154:	e084      	b.n	8006260 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8006156:	68fb      	ldr	r3, [r7, #12]
 8006158:	681b      	ldr	r3, [r3, #0]
 800615a:	68b9      	ldr	r1, [r7, #8]
 800615c:	4618      	mov	r0, r3
 800615e:	f000 fbf7 	bl	8006950 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8006162:	68fb      	ldr	r3, [r7, #12]
 8006164:	681b      	ldr	r3, [r3, #0]
 8006166:	69da      	ldr	r2, [r3, #28]
 8006168:	68fb      	ldr	r3, [r7, #12]
 800616a:	681b      	ldr	r3, [r3, #0]
 800616c:	f042 0208 	orr.w	r2, r2, #8
 8006170:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8006172:	68fb      	ldr	r3, [r7, #12]
 8006174:	681b      	ldr	r3, [r3, #0]
 8006176:	69da      	ldr	r2, [r3, #28]
 8006178:	68fb      	ldr	r3, [r7, #12]
 800617a:	681b      	ldr	r3, [r3, #0]
 800617c:	f022 0204 	bic.w	r2, r2, #4
 8006180:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8006182:	68fb      	ldr	r3, [r7, #12]
 8006184:	681b      	ldr	r3, [r3, #0]
 8006186:	69d9      	ldr	r1, [r3, #28]
 8006188:	68bb      	ldr	r3, [r7, #8]
 800618a:	691a      	ldr	r2, [r3, #16]
 800618c:	68fb      	ldr	r3, [r7, #12]
 800618e:	681b      	ldr	r3, [r3, #0]
 8006190:	430a      	orrs	r2, r1
 8006192:	61da      	str	r2, [r3, #28]
      break;
 8006194:	e064      	b.n	8006260 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8006196:	68fb      	ldr	r3, [r7, #12]
 8006198:	681b      	ldr	r3, [r3, #0]
 800619a:	68b9      	ldr	r1, [r7, #8]
 800619c:	4618      	mov	r0, r3
 800619e:	f000 fc4f 	bl	8006a40 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80061a2:	68fb      	ldr	r3, [r7, #12]
 80061a4:	681b      	ldr	r3, [r3, #0]
 80061a6:	69da      	ldr	r2, [r3, #28]
 80061a8:	68fb      	ldr	r3, [r7, #12]
 80061aa:	681b      	ldr	r3, [r3, #0]
 80061ac:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80061b0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80061b2:	68fb      	ldr	r3, [r7, #12]
 80061b4:	681b      	ldr	r3, [r3, #0]
 80061b6:	69da      	ldr	r2, [r3, #28]
 80061b8:	68fb      	ldr	r3, [r7, #12]
 80061ba:	681b      	ldr	r3, [r3, #0]
 80061bc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80061c0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80061c2:	68fb      	ldr	r3, [r7, #12]
 80061c4:	681b      	ldr	r3, [r3, #0]
 80061c6:	69d9      	ldr	r1, [r3, #28]
 80061c8:	68bb      	ldr	r3, [r7, #8]
 80061ca:	691b      	ldr	r3, [r3, #16]
 80061cc:	021a      	lsls	r2, r3, #8
 80061ce:	68fb      	ldr	r3, [r7, #12]
 80061d0:	681b      	ldr	r3, [r3, #0]
 80061d2:	430a      	orrs	r2, r1
 80061d4:	61da      	str	r2, [r3, #28]
      break;
 80061d6:	e043      	b.n	8006260 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80061d8:	68fb      	ldr	r3, [r7, #12]
 80061da:	681b      	ldr	r3, [r3, #0]
 80061dc:	68b9      	ldr	r1, [r7, #8]
 80061de:	4618      	mov	r0, r3
 80061e0:	f000 fc8c 	bl	8006afc <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80061e4:	68fb      	ldr	r3, [r7, #12]
 80061e6:	681b      	ldr	r3, [r3, #0]
 80061e8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80061ea:	68fb      	ldr	r3, [r7, #12]
 80061ec:	681b      	ldr	r3, [r3, #0]
 80061ee:	f042 0208 	orr.w	r2, r2, #8
 80061f2:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80061f4:	68fb      	ldr	r3, [r7, #12]
 80061f6:	681b      	ldr	r3, [r3, #0]
 80061f8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80061fa:	68fb      	ldr	r3, [r7, #12]
 80061fc:	681b      	ldr	r3, [r3, #0]
 80061fe:	f022 0204 	bic.w	r2, r2, #4
 8006202:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8006204:	68fb      	ldr	r3, [r7, #12]
 8006206:	681b      	ldr	r3, [r3, #0]
 8006208:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800620a:	68bb      	ldr	r3, [r7, #8]
 800620c:	691a      	ldr	r2, [r3, #16]
 800620e:	68fb      	ldr	r3, [r7, #12]
 8006210:	681b      	ldr	r3, [r3, #0]
 8006212:	430a      	orrs	r2, r1
 8006214:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8006216:	e023      	b.n	8006260 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8006218:	68fb      	ldr	r3, [r7, #12]
 800621a:	681b      	ldr	r3, [r3, #0]
 800621c:	68b9      	ldr	r1, [r7, #8]
 800621e:	4618      	mov	r0, r3
 8006220:	f000 fcc4 	bl	8006bac <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8006224:	68fb      	ldr	r3, [r7, #12]
 8006226:	681b      	ldr	r3, [r3, #0]
 8006228:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800622a:	68fb      	ldr	r3, [r7, #12]
 800622c:	681b      	ldr	r3, [r3, #0]
 800622e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006232:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8006234:	68fb      	ldr	r3, [r7, #12]
 8006236:	681b      	ldr	r3, [r3, #0]
 8006238:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800623a:	68fb      	ldr	r3, [r7, #12]
 800623c:	681b      	ldr	r3, [r3, #0]
 800623e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006242:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8006244:	68fb      	ldr	r3, [r7, #12]
 8006246:	681b      	ldr	r3, [r3, #0]
 8006248:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800624a:	68bb      	ldr	r3, [r7, #8]
 800624c:	691b      	ldr	r3, [r3, #16]
 800624e:	021a      	lsls	r2, r3, #8
 8006250:	68fb      	ldr	r3, [r7, #12]
 8006252:	681b      	ldr	r3, [r3, #0]
 8006254:	430a      	orrs	r2, r1
 8006256:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8006258:	e002      	b.n	8006260 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800625a:	2301      	movs	r3, #1
 800625c:	75fb      	strb	r3, [r7, #23]
      break;
 800625e:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8006260:	68fb      	ldr	r3, [r7, #12]
 8006262:	2200      	movs	r2, #0
 8006264:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006268:	7dfb      	ldrb	r3, [r7, #23]
}
 800626a:	4618      	mov	r0, r3
 800626c:	3718      	adds	r7, #24
 800626e:	46bd      	mov	sp, r7
 8006270:	bd80      	pop	{r7, pc}
 8006272:	bf00      	nop

08006274 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006274:	b580      	push	{r7, lr}
 8006276:	b084      	sub	sp, #16
 8006278:	af00      	add	r7, sp, #0
 800627a:	6078      	str	r0, [r7, #4]
 800627c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800627e:	2300      	movs	r3, #0
 8006280:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006288:	2b01      	cmp	r3, #1
 800628a:	d101      	bne.n	8006290 <HAL_TIM_ConfigClockSource+0x1c>
 800628c:	2302      	movs	r3, #2
 800628e:	e0b6      	b.n	80063fe <HAL_TIM_ConfigClockSource+0x18a>
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	2201      	movs	r2, #1
 8006294:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	2202      	movs	r2, #2
 800629c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	681b      	ldr	r3, [r3, #0]
 80062a4:	689b      	ldr	r3, [r3, #8]
 80062a6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80062a8:	68bb      	ldr	r3, [r7, #8]
 80062aa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80062ae:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80062b2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80062b4:	68bb      	ldr	r3, [r7, #8]
 80062b6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80062ba:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	681b      	ldr	r3, [r3, #0]
 80062c0:	68ba      	ldr	r2, [r7, #8]
 80062c2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80062c4:	683b      	ldr	r3, [r7, #0]
 80062c6:	681b      	ldr	r3, [r3, #0]
 80062c8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80062cc:	d03e      	beq.n	800634c <HAL_TIM_ConfigClockSource+0xd8>
 80062ce:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80062d2:	f200 8087 	bhi.w	80063e4 <HAL_TIM_ConfigClockSource+0x170>
 80062d6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80062da:	f000 8086 	beq.w	80063ea <HAL_TIM_ConfigClockSource+0x176>
 80062de:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80062e2:	d87f      	bhi.n	80063e4 <HAL_TIM_ConfigClockSource+0x170>
 80062e4:	2b70      	cmp	r3, #112	; 0x70
 80062e6:	d01a      	beq.n	800631e <HAL_TIM_ConfigClockSource+0xaa>
 80062e8:	2b70      	cmp	r3, #112	; 0x70
 80062ea:	d87b      	bhi.n	80063e4 <HAL_TIM_ConfigClockSource+0x170>
 80062ec:	2b60      	cmp	r3, #96	; 0x60
 80062ee:	d050      	beq.n	8006392 <HAL_TIM_ConfigClockSource+0x11e>
 80062f0:	2b60      	cmp	r3, #96	; 0x60
 80062f2:	d877      	bhi.n	80063e4 <HAL_TIM_ConfigClockSource+0x170>
 80062f4:	2b50      	cmp	r3, #80	; 0x50
 80062f6:	d03c      	beq.n	8006372 <HAL_TIM_ConfigClockSource+0xfe>
 80062f8:	2b50      	cmp	r3, #80	; 0x50
 80062fa:	d873      	bhi.n	80063e4 <HAL_TIM_ConfigClockSource+0x170>
 80062fc:	2b40      	cmp	r3, #64	; 0x40
 80062fe:	d058      	beq.n	80063b2 <HAL_TIM_ConfigClockSource+0x13e>
 8006300:	2b40      	cmp	r3, #64	; 0x40
 8006302:	d86f      	bhi.n	80063e4 <HAL_TIM_ConfigClockSource+0x170>
 8006304:	2b30      	cmp	r3, #48	; 0x30
 8006306:	d064      	beq.n	80063d2 <HAL_TIM_ConfigClockSource+0x15e>
 8006308:	2b30      	cmp	r3, #48	; 0x30
 800630a:	d86b      	bhi.n	80063e4 <HAL_TIM_ConfigClockSource+0x170>
 800630c:	2b20      	cmp	r3, #32
 800630e:	d060      	beq.n	80063d2 <HAL_TIM_ConfigClockSource+0x15e>
 8006310:	2b20      	cmp	r3, #32
 8006312:	d867      	bhi.n	80063e4 <HAL_TIM_ConfigClockSource+0x170>
 8006314:	2b00      	cmp	r3, #0
 8006316:	d05c      	beq.n	80063d2 <HAL_TIM_ConfigClockSource+0x15e>
 8006318:	2b10      	cmp	r3, #16
 800631a:	d05a      	beq.n	80063d2 <HAL_TIM_ConfigClockSource+0x15e>
 800631c:	e062      	b.n	80063e4 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	6818      	ldr	r0, [r3, #0]
 8006322:	683b      	ldr	r3, [r7, #0]
 8006324:	6899      	ldr	r1, [r3, #8]
 8006326:	683b      	ldr	r3, [r7, #0]
 8006328:	685a      	ldr	r2, [r3, #4]
 800632a:	683b      	ldr	r3, [r7, #0]
 800632c:	68db      	ldr	r3, [r3, #12]
 800632e:	f000 feb7 	bl	80070a0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	681b      	ldr	r3, [r3, #0]
 8006336:	689b      	ldr	r3, [r3, #8]
 8006338:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800633a:	68bb      	ldr	r3, [r7, #8]
 800633c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8006340:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	681b      	ldr	r3, [r3, #0]
 8006346:	68ba      	ldr	r2, [r7, #8]
 8006348:	609a      	str	r2, [r3, #8]
      break;
 800634a:	e04f      	b.n	80063ec <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	6818      	ldr	r0, [r3, #0]
 8006350:	683b      	ldr	r3, [r7, #0]
 8006352:	6899      	ldr	r1, [r3, #8]
 8006354:	683b      	ldr	r3, [r7, #0]
 8006356:	685a      	ldr	r2, [r3, #4]
 8006358:	683b      	ldr	r3, [r7, #0]
 800635a:	68db      	ldr	r3, [r3, #12]
 800635c:	f000 fea0 	bl	80070a0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	681b      	ldr	r3, [r3, #0]
 8006364:	689a      	ldr	r2, [r3, #8]
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	681b      	ldr	r3, [r3, #0]
 800636a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800636e:	609a      	str	r2, [r3, #8]
      break;
 8006370:	e03c      	b.n	80063ec <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	6818      	ldr	r0, [r3, #0]
 8006376:	683b      	ldr	r3, [r7, #0]
 8006378:	6859      	ldr	r1, [r3, #4]
 800637a:	683b      	ldr	r3, [r7, #0]
 800637c:	68db      	ldr	r3, [r3, #12]
 800637e:	461a      	mov	r2, r3
 8006380:	f000 fd5e 	bl	8006e40 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	681b      	ldr	r3, [r3, #0]
 8006388:	2150      	movs	r1, #80	; 0x50
 800638a:	4618      	mov	r0, r3
 800638c:	f000 fe6d 	bl	800706a <TIM_ITRx_SetConfig>
      break;
 8006390:	e02c      	b.n	80063ec <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	6818      	ldr	r0, [r3, #0]
 8006396:	683b      	ldr	r3, [r7, #0]
 8006398:	6859      	ldr	r1, [r3, #4]
 800639a:	683b      	ldr	r3, [r7, #0]
 800639c:	68db      	ldr	r3, [r3, #12]
 800639e:	461a      	mov	r2, r3
 80063a0:	f000 fdba 	bl	8006f18 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	681b      	ldr	r3, [r3, #0]
 80063a8:	2160      	movs	r1, #96	; 0x60
 80063aa:	4618      	mov	r0, r3
 80063ac:	f000 fe5d 	bl	800706a <TIM_ITRx_SetConfig>
      break;
 80063b0:	e01c      	b.n	80063ec <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	6818      	ldr	r0, [r3, #0]
 80063b6:	683b      	ldr	r3, [r7, #0]
 80063b8:	6859      	ldr	r1, [r3, #4]
 80063ba:	683b      	ldr	r3, [r7, #0]
 80063bc:	68db      	ldr	r3, [r3, #12]
 80063be:	461a      	mov	r2, r3
 80063c0:	f000 fd3e 	bl	8006e40 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	681b      	ldr	r3, [r3, #0]
 80063c8:	2140      	movs	r1, #64	; 0x40
 80063ca:	4618      	mov	r0, r3
 80063cc:	f000 fe4d 	bl	800706a <TIM_ITRx_SetConfig>
      break;
 80063d0:	e00c      	b.n	80063ec <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	681a      	ldr	r2, [r3, #0]
 80063d6:	683b      	ldr	r3, [r7, #0]
 80063d8:	681b      	ldr	r3, [r3, #0]
 80063da:	4619      	mov	r1, r3
 80063dc:	4610      	mov	r0, r2
 80063de:	f000 fe44 	bl	800706a <TIM_ITRx_SetConfig>
      break;
 80063e2:	e003      	b.n	80063ec <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 80063e4:	2301      	movs	r3, #1
 80063e6:	73fb      	strb	r3, [r7, #15]
      break;
 80063e8:	e000      	b.n	80063ec <HAL_TIM_ConfigClockSource+0x178>
      break;
 80063ea:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	2201      	movs	r2, #1
 80063f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	2200      	movs	r2, #0
 80063f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80063fc:	7bfb      	ldrb	r3, [r7, #15]
}
 80063fe:	4618      	mov	r0, r3
 8006400:	3710      	adds	r7, #16
 8006402:	46bd      	mov	sp, r7
 8006404:	bd80      	pop	{r7, pc}

08006406 <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8006406:	b580      	push	{r7, lr}
 8006408:	b082      	sub	sp, #8
 800640a:	af00      	add	r7, sp, #0
 800640c:	6078      	str	r0, [r7, #4]
 800640e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006416:	2b01      	cmp	r3, #1
 8006418:	d101      	bne.n	800641e <HAL_TIM_SlaveConfigSynchro+0x18>
 800641a:	2302      	movs	r3, #2
 800641c:	e031      	b.n	8006482 <HAL_TIM_SlaveConfigSynchro+0x7c>
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	2201      	movs	r2, #1
 8006422:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	2202      	movs	r2, #2
 800642a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 800642e:	6839      	ldr	r1, [r7, #0]
 8006430:	6878      	ldr	r0, [r7, #4]
 8006432:	f000 fc15 	bl	8006c60 <TIM_SlaveTimer_SetConfig>
 8006436:	4603      	mov	r3, r0
 8006438:	2b00      	cmp	r3, #0
 800643a:	d009      	beq.n	8006450 <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	2201      	movs	r2, #1
 8006440:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    __HAL_UNLOCK(htim);
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	2200      	movs	r2, #0
 8006448:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    return HAL_ERROR;
 800644c:	2301      	movs	r3, #1
 800644e:	e018      	b.n	8006482 <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	681b      	ldr	r3, [r3, #0]
 8006454:	68da      	ldr	r2, [r3, #12]
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	681b      	ldr	r3, [r3, #0]
 800645a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800645e:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	681b      	ldr	r3, [r3, #0]
 8006464:	68da      	ldr	r2, [r3, #12]
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	681b      	ldr	r3, [r3, #0]
 800646a:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800646e:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	2201      	movs	r2, #1
 8006474:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	2200      	movs	r2, #0
 800647c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006480:	2300      	movs	r3, #0
}
 8006482:	4618      	mov	r0, r3
 8006484:	3708      	adds	r7, #8
 8006486:	46bd      	mov	sp, r7
 8006488:	bd80      	pop	{r7, pc}

0800648a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800648a:	b480      	push	{r7}
 800648c:	b083      	sub	sp, #12
 800648e:	af00      	add	r7, sp, #0
 8006490:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006492:	bf00      	nop
 8006494:	370c      	adds	r7, #12
 8006496:	46bd      	mov	sp, r7
 8006498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800649c:	4770      	bx	lr

0800649e <HAL_TIM_IC_CaptureHalfCpltCallback>:
  * @brief  Input Capture half complete callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 800649e:	b480      	push	{r7}
 80064a0:	b083      	sub	sp, #12
 80064a2:	af00      	add	r7, sp, #0
 80064a4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureHalfCpltCallback could be implemented in the user file
   */
}
 80064a6:	bf00      	nop
 80064a8:	370c      	adds	r7, #12
 80064aa:	46bd      	mov	sp, r7
 80064ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064b0:	4770      	bx	lr

080064b2 <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 80064b2:	b480      	push	{r7}
 80064b4:	b083      	sub	sp, #12
 80064b6:	af00      	add	r7, sp, #0
 80064b8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 80064ba:	bf00      	nop
 80064bc:	370c      	adds	r7, #12
 80064be:	46bd      	mov	sp, r7
 80064c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064c4:	4770      	bx	lr

080064c6 <TIM_DMAError>:
  * @brief  TIM DMA error callback
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMAError(DMA_HandleTypeDef *hdma)
{
 80064c6:	b580      	push	{r7, lr}
 80064c8:	b084      	sub	sp, #16
 80064ca:	af00      	add	r7, sp, #0
 80064cc:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80064d2:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 80064d4:	68fb      	ldr	r3, [r7, #12]
 80064d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80064d8:	687a      	ldr	r2, [r7, #4]
 80064da:	429a      	cmp	r2, r3
 80064dc:	d107      	bne.n	80064ee <TIM_DMAError+0x28>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80064de:	68fb      	ldr	r3, [r7, #12]
 80064e0:	2201      	movs	r2, #1
 80064e2:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80064e4:	68fb      	ldr	r3, [r7, #12]
 80064e6:	2201      	movs	r2, #1
 80064e8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80064ec:	e02a      	b.n	8006544 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 80064ee:	68fb      	ldr	r3, [r7, #12]
 80064f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80064f2:	687a      	ldr	r2, [r7, #4]
 80064f4:	429a      	cmp	r2, r3
 80064f6:	d107      	bne.n	8006508 <TIM_DMAError+0x42>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80064f8:	68fb      	ldr	r3, [r7, #12]
 80064fa:	2202      	movs	r2, #2
 80064fc:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80064fe:	68fb      	ldr	r3, [r7, #12]
 8006500:	2201      	movs	r2, #1
 8006502:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006506:	e01d      	b.n	8006544 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8006508:	68fb      	ldr	r3, [r7, #12]
 800650a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800650c:	687a      	ldr	r2, [r7, #4]
 800650e:	429a      	cmp	r2, r3
 8006510:	d107      	bne.n	8006522 <TIM_DMAError+0x5c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006512:	68fb      	ldr	r3, [r7, #12]
 8006514:	2204      	movs	r2, #4
 8006516:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8006518:	68fb      	ldr	r3, [r7, #12]
 800651a:	2201      	movs	r2, #1
 800651c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006520:	e010      	b.n	8006544 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8006522:	68fb      	ldr	r3, [r7, #12]
 8006524:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006526:	687a      	ldr	r2, [r7, #4]
 8006528:	429a      	cmp	r2, r3
 800652a:	d107      	bne.n	800653c <TIM_DMAError+0x76>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800652c:	68fb      	ldr	r3, [r7, #12]
 800652e:	2208      	movs	r2, #8
 8006530:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8006532:	68fb      	ldr	r3, [r7, #12]
 8006534:	2201      	movs	r2, #1
 8006536:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800653a:	e003      	b.n	8006544 <TIM_DMAError+0x7e>
  }
  else
  {
    htim->State = HAL_TIM_STATE_READY;
 800653c:	68fb      	ldr	r3, [r7, #12]
 800653e:	2201      	movs	r2, #1
 8006540:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->ErrorCallback(htim);
#else
  HAL_TIM_ErrorCallback(htim);
 8006544:	68f8      	ldr	r0, [r7, #12]
 8006546:	f7ff ffb4 	bl	80064b2 <HAL_TIM_ErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800654a:	68fb      	ldr	r3, [r7, #12]
 800654c:	2200      	movs	r2, #0
 800654e:	771a      	strb	r2, [r3, #28]
}
 8006550:	bf00      	nop
 8006552:	3710      	adds	r7, #16
 8006554:	46bd      	mov	sp, r7
 8006556:	bd80      	pop	{r7, pc}

08006558 <TIM_DMACaptureCplt>:
  * @brief  TIM DMA Capture complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMACaptureCplt(DMA_HandleTypeDef *hdma)
{
 8006558:	b580      	push	{r7, lr}
 800655a:	b084      	sub	sp, #16
 800655c:	af00      	add	r7, sp, #0
 800655e:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006564:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8006566:	68fb      	ldr	r3, [r7, #12]
 8006568:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800656a:	687a      	ldr	r2, [r7, #4]
 800656c:	429a      	cmp	r2, r3
 800656e:	d10f      	bne.n	8006590 <TIM_DMACaptureCplt+0x38>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006570:	68fb      	ldr	r3, [r7, #12]
 8006572:	2201      	movs	r2, #1
 8006574:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	69db      	ldr	r3, [r3, #28]
 800657a:	2b00      	cmp	r3, #0
 800657c:	d146      	bne.n	800660c <TIM_DMACaptureCplt+0xb4>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800657e:	68fb      	ldr	r3, [r7, #12]
 8006580:	2201      	movs	r2, #1
 8006582:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8006586:	68fb      	ldr	r3, [r7, #12]
 8006588:	2201      	movs	r2, #1
 800658a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800658e:	e03d      	b.n	800660c <TIM_DMACaptureCplt+0xb4>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8006590:	68fb      	ldr	r3, [r7, #12]
 8006592:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006594:	687a      	ldr	r2, [r7, #4]
 8006596:	429a      	cmp	r2, r3
 8006598:	d10f      	bne.n	80065ba <TIM_DMACaptureCplt+0x62>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800659a:	68fb      	ldr	r3, [r7, #12]
 800659c:	2202      	movs	r2, #2
 800659e:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	69db      	ldr	r3, [r3, #28]
 80065a4:	2b00      	cmp	r3, #0
 80065a6:	d131      	bne.n	800660c <TIM_DMACaptureCplt+0xb4>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80065a8:	68fb      	ldr	r3, [r7, #12]
 80065aa:	2201      	movs	r2, #1
 80065ac:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80065b0:	68fb      	ldr	r3, [r7, #12]
 80065b2:	2201      	movs	r2, #1
 80065b4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80065b8:	e028      	b.n	800660c <TIM_DMACaptureCplt+0xb4>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 80065ba:	68fb      	ldr	r3, [r7, #12]
 80065bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80065be:	687a      	ldr	r2, [r7, #4]
 80065c0:	429a      	cmp	r2, r3
 80065c2:	d10f      	bne.n	80065e4 <TIM_DMACaptureCplt+0x8c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80065c4:	68fb      	ldr	r3, [r7, #12]
 80065c6:	2204      	movs	r2, #4
 80065c8:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	69db      	ldr	r3, [r3, #28]
 80065ce:	2b00      	cmp	r3, #0
 80065d0:	d11c      	bne.n	800660c <TIM_DMACaptureCplt+0xb4>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 80065d2:	68fb      	ldr	r3, [r7, #12]
 80065d4:	2201      	movs	r2, #1
 80065d6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 80065da:	68fb      	ldr	r3, [r7, #12]
 80065dc:	2201      	movs	r2, #1
 80065de:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80065e2:	e013      	b.n	800660c <TIM_DMACaptureCplt+0xb4>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 80065e4:	68fb      	ldr	r3, [r7, #12]
 80065e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80065e8:	687a      	ldr	r2, [r7, #4]
 80065ea:	429a      	cmp	r2, r3
 80065ec:	d10e      	bne.n	800660c <TIM_DMACaptureCplt+0xb4>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80065ee:	68fb      	ldr	r3, [r7, #12]
 80065f0:	2208      	movs	r2, #8
 80065f2:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	69db      	ldr	r3, [r3, #28]
 80065f8:	2b00      	cmp	r3, #0
 80065fa:	d107      	bne.n	800660c <TIM_DMACaptureCplt+0xb4>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 80065fc:	68fb      	ldr	r3, [r7, #12]
 80065fe:	2201      	movs	r2, #1
 8006600:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8006604:	68fb      	ldr	r3, [r7, #12]
 8006606:	2201      	movs	r2, #1
 8006608:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->IC_CaptureCallback(htim);
#else
  HAL_TIM_IC_CaptureCallback(htim);
 800660c:	68f8      	ldr	r0, [r7, #12]
 800660e:	f7ff ff3c 	bl	800648a <HAL_TIM_IC_CaptureCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006612:	68fb      	ldr	r3, [r7, #12]
 8006614:	2200      	movs	r2, #0
 8006616:	771a      	strb	r2, [r3, #28]
}
 8006618:	bf00      	nop
 800661a:	3710      	adds	r7, #16
 800661c:	46bd      	mov	sp, r7
 800661e:	bd80      	pop	{r7, pc}

08006620 <TIM_DMACaptureHalfCplt>:
  * @brief  TIM DMA Capture half complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMACaptureHalfCplt(DMA_HandleTypeDef *hdma)
{
 8006620:	b580      	push	{r7, lr}
 8006622:	b084      	sub	sp, #16
 8006624:	af00      	add	r7, sp, #0
 8006626:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800662c:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 800662e:	68fb      	ldr	r3, [r7, #12]
 8006630:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006632:	687a      	ldr	r2, [r7, #4]
 8006634:	429a      	cmp	r2, r3
 8006636:	d103      	bne.n	8006640 <TIM_DMACaptureHalfCplt+0x20>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006638:	68fb      	ldr	r3, [r7, #12]
 800663a:	2201      	movs	r2, #1
 800663c:	771a      	strb	r2, [r3, #28]
 800663e:	e019      	b.n	8006674 <TIM_DMACaptureHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8006640:	68fb      	ldr	r3, [r7, #12]
 8006642:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006644:	687a      	ldr	r2, [r7, #4]
 8006646:	429a      	cmp	r2, r3
 8006648:	d103      	bne.n	8006652 <TIM_DMACaptureHalfCplt+0x32>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800664a:	68fb      	ldr	r3, [r7, #12]
 800664c:	2202      	movs	r2, #2
 800664e:	771a      	strb	r2, [r3, #28]
 8006650:	e010      	b.n	8006674 <TIM_DMACaptureHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8006652:	68fb      	ldr	r3, [r7, #12]
 8006654:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006656:	687a      	ldr	r2, [r7, #4]
 8006658:	429a      	cmp	r2, r3
 800665a:	d103      	bne.n	8006664 <TIM_DMACaptureHalfCplt+0x44>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800665c:	68fb      	ldr	r3, [r7, #12]
 800665e:	2204      	movs	r2, #4
 8006660:	771a      	strb	r2, [r3, #28]
 8006662:	e007      	b.n	8006674 <TIM_DMACaptureHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8006664:	68fb      	ldr	r3, [r7, #12]
 8006666:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006668:	687a      	ldr	r2, [r7, #4]
 800666a:	429a      	cmp	r2, r3
 800666c:	d102      	bne.n	8006674 <TIM_DMACaptureHalfCplt+0x54>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800666e:	68fb      	ldr	r3, [r7, #12]
 8006670:	2208      	movs	r2, #8
 8006672:	771a      	strb	r2, [r3, #28]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->IC_CaptureHalfCpltCallback(htim);
#else
  HAL_TIM_IC_CaptureHalfCpltCallback(htim);
 8006674:	68f8      	ldr	r0, [r7, #12]
 8006676:	f7ff ff12 	bl	800649e <HAL_TIM_IC_CaptureHalfCpltCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800667a:	68fb      	ldr	r3, [r7, #12]
 800667c:	2200      	movs	r2, #0
 800667e:	771a      	strb	r2, [r3, #28]
}
 8006680:	bf00      	nop
 8006682:	3710      	adds	r7, #16
 8006684:	46bd      	mov	sp, r7
 8006686:	bd80      	pop	{r7, pc}

08006688 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8006688:	b480      	push	{r7}
 800668a:	b085      	sub	sp, #20
 800668c:	af00      	add	r7, sp, #0
 800668e:	6078      	str	r0, [r7, #4]
 8006690:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	681b      	ldr	r3, [r3, #0]
 8006696:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	4a2e      	ldr	r2, [pc, #184]	; (8006754 <TIM_Base_SetConfig+0xcc>)
 800669c:	4293      	cmp	r3, r2
 800669e:	d007      	beq.n	80066b0 <TIM_Base_SetConfig+0x28>
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80066a6:	d003      	beq.n	80066b0 <TIM_Base_SetConfig+0x28>
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	4a2b      	ldr	r2, [pc, #172]	; (8006758 <TIM_Base_SetConfig+0xd0>)
 80066ac:	4293      	cmp	r3, r2
 80066ae:	d108      	bne.n	80066c2 <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80066b0:	68fb      	ldr	r3, [r7, #12]
 80066b2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80066b6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80066b8:	683b      	ldr	r3, [r7, #0]
 80066ba:	685b      	ldr	r3, [r3, #4]
 80066bc:	68fa      	ldr	r2, [r7, #12]
 80066be:	4313      	orrs	r3, r2
 80066c0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	4a23      	ldr	r2, [pc, #140]	; (8006754 <TIM_Base_SetConfig+0xcc>)
 80066c6:	4293      	cmp	r3, r2
 80066c8:	d00f      	beq.n	80066ea <TIM_Base_SetConfig+0x62>
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80066d0:	d00b      	beq.n	80066ea <TIM_Base_SetConfig+0x62>
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	4a20      	ldr	r2, [pc, #128]	; (8006758 <TIM_Base_SetConfig+0xd0>)
 80066d6:	4293      	cmp	r3, r2
 80066d8:	d007      	beq.n	80066ea <TIM_Base_SetConfig+0x62>
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	4a1f      	ldr	r2, [pc, #124]	; (800675c <TIM_Base_SetConfig+0xd4>)
 80066de:	4293      	cmp	r3, r2
 80066e0:	d003      	beq.n	80066ea <TIM_Base_SetConfig+0x62>
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	4a1e      	ldr	r2, [pc, #120]	; (8006760 <TIM_Base_SetConfig+0xd8>)
 80066e6:	4293      	cmp	r3, r2
 80066e8:	d108      	bne.n	80066fc <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80066ea:	68fb      	ldr	r3, [r7, #12]
 80066ec:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80066f0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80066f2:	683b      	ldr	r3, [r7, #0]
 80066f4:	68db      	ldr	r3, [r3, #12]
 80066f6:	68fa      	ldr	r2, [r7, #12]
 80066f8:	4313      	orrs	r3, r2
 80066fa:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80066fc:	68fb      	ldr	r3, [r7, #12]
 80066fe:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006702:	683b      	ldr	r3, [r7, #0]
 8006704:	695b      	ldr	r3, [r3, #20]
 8006706:	4313      	orrs	r3, r2
 8006708:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	68fa      	ldr	r2, [r7, #12]
 800670e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006710:	683b      	ldr	r3, [r7, #0]
 8006712:	689a      	ldr	r2, [r3, #8]
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006718:	683b      	ldr	r3, [r7, #0]
 800671a:	681a      	ldr	r2, [r3, #0]
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	4a0c      	ldr	r2, [pc, #48]	; (8006754 <TIM_Base_SetConfig+0xcc>)
 8006724:	4293      	cmp	r3, r2
 8006726:	d007      	beq.n	8006738 <TIM_Base_SetConfig+0xb0>
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	4a0c      	ldr	r2, [pc, #48]	; (800675c <TIM_Base_SetConfig+0xd4>)
 800672c:	4293      	cmp	r3, r2
 800672e:	d003      	beq.n	8006738 <TIM_Base_SetConfig+0xb0>
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	4a0b      	ldr	r2, [pc, #44]	; (8006760 <TIM_Base_SetConfig+0xd8>)
 8006734:	4293      	cmp	r3, r2
 8006736:	d103      	bne.n	8006740 <TIM_Base_SetConfig+0xb8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006738:	683b      	ldr	r3, [r7, #0]
 800673a:	691a      	ldr	r2, [r3, #16]
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	2201      	movs	r2, #1
 8006744:	615a      	str	r2, [r3, #20]
}
 8006746:	bf00      	nop
 8006748:	3714      	adds	r7, #20
 800674a:	46bd      	mov	sp, r7
 800674c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006750:	4770      	bx	lr
 8006752:	bf00      	nop
 8006754:	40012c00 	.word	0x40012c00
 8006758:	40000400 	.word	0x40000400
 800675c:	40014000 	.word	0x40014000
 8006760:	40014400 	.word	0x40014400

08006764 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006764:	b480      	push	{r7}
 8006766:	b087      	sub	sp, #28
 8006768:	af00      	add	r7, sp, #0
 800676a:	6078      	str	r0, [r7, #4]
 800676c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	6a1b      	ldr	r3, [r3, #32]
 8006772:	f023 0201 	bic.w	r2, r3, #1
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	6a1b      	ldr	r3, [r3, #32]
 800677e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	685b      	ldr	r3, [r3, #4]
 8006784:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	699b      	ldr	r3, [r3, #24]
 800678a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800678c:	68fb      	ldr	r3, [r7, #12]
 800678e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006792:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006796:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006798:	68fb      	ldr	r3, [r7, #12]
 800679a:	f023 0303 	bic.w	r3, r3, #3
 800679e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80067a0:	683b      	ldr	r3, [r7, #0]
 80067a2:	681b      	ldr	r3, [r3, #0]
 80067a4:	68fa      	ldr	r2, [r7, #12]
 80067a6:	4313      	orrs	r3, r2
 80067a8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80067aa:	697b      	ldr	r3, [r7, #20]
 80067ac:	f023 0302 	bic.w	r3, r3, #2
 80067b0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80067b2:	683b      	ldr	r3, [r7, #0]
 80067b4:	689b      	ldr	r3, [r3, #8]
 80067b6:	697a      	ldr	r2, [r7, #20]
 80067b8:	4313      	orrs	r3, r2
 80067ba:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	4a24      	ldr	r2, [pc, #144]	; (8006850 <TIM_OC1_SetConfig+0xec>)
 80067c0:	4293      	cmp	r3, r2
 80067c2:	d007      	beq.n	80067d4 <TIM_OC1_SetConfig+0x70>
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	4a23      	ldr	r2, [pc, #140]	; (8006854 <TIM_OC1_SetConfig+0xf0>)
 80067c8:	4293      	cmp	r3, r2
 80067ca:	d003      	beq.n	80067d4 <TIM_OC1_SetConfig+0x70>
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	4a22      	ldr	r2, [pc, #136]	; (8006858 <TIM_OC1_SetConfig+0xf4>)
 80067d0:	4293      	cmp	r3, r2
 80067d2:	d10c      	bne.n	80067ee <TIM_OC1_SetConfig+0x8a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80067d4:	697b      	ldr	r3, [r7, #20]
 80067d6:	f023 0308 	bic.w	r3, r3, #8
 80067da:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80067dc:	683b      	ldr	r3, [r7, #0]
 80067de:	68db      	ldr	r3, [r3, #12]
 80067e0:	697a      	ldr	r2, [r7, #20]
 80067e2:	4313      	orrs	r3, r2
 80067e4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80067e6:	697b      	ldr	r3, [r7, #20]
 80067e8:	f023 0304 	bic.w	r3, r3, #4
 80067ec:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	4a17      	ldr	r2, [pc, #92]	; (8006850 <TIM_OC1_SetConfig+0xec>)
 80067f2:	4293      	cmp	r3, r2
 80067f4:	d007      	beq.n	8006806 <TIM_OC1_SetConfig+0xa2>
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	4a16      	ldr	r2, [pc, #88]	; (8006854 <TIM_OC1_SetConfig+0xf0>)
 80067fa:	4293      	cmp	r3, r2
 80067fc:	d003      	beq.n	8006806 <TIM_OC1_SetConfig+0xa2>
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	4a15      	ldr	r2, [pc, #84]	; (8006858 <TIM_OC1_SetConfig+0xf4>)
 8006802:	4293      	cmp	r3, r2
 8006804:	d111      	bne.n	800682a <TIM_OC1_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8006806:	693b      	ldr	r3, [r7, #16]
 8006808:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800680c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800680e:	693b      	ldr	r3, [r7, #16]
 8006810:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006814:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8006816:	683b      	ldr	r3, [r7, #0]
 8006818:	695b      	ldr	r3, [r3, #20]
 800681a:	693a      	ldr	r2, [r7, #16]
 800681c:	4313      	orrs	r3, r2
 800681e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006820:	683b      	ldr	r3, [r7, #0]
 8006822:	699b      	ldr	r3, [r3, #24]
 8006824:	693a      	ldr	r2, [r7, #16]
 8006826:	4313      	orrs	r3, r2
 8006828:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	693a      	ldr	r2, [r7, #16]
 800682e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	68fa      	ldr	r2, [r7, #12]
 8006834:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8006836:	683b      	ldr	r3, [r7, #0]
 8006838:	685a      	ldr	r2, [r3, #4]
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	697a      	ldr	r2, [r7, #20]
 8006842:	621a      	str	r2, [r3, #32]
}
 8006844:	bf00      	nop
 8006846:	371c      	adds	r7, #28
 8006848:	46bd      	mov	sp, r7
 800684a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800684e:	4770      	bx	lr
 8006850:	40012c00 	.word	0x40012c00
 8006854:	40014000 	.word	0x40014000
 8006858:	40014400 	.word	0x40014400

0800685c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800685c:	b480      	push	{r7}
 800685e:	b087      	sub	sp, #28
 8006860:	af00      	add	r7, sp, #0
 8006862:	6078      	str	r0, [r7, #4]
 8006864:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	6a1b      	ldr	r3, [r3, #32]
 800686a:	f023 0210 	bic.w	r2, r3, #16
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	6a1b      	ldr	r3, [r3, #32]
 8006876:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	685b      	ldr	r3, [r3, #4]
 800687c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	699b      	ldr	r3, [r3, #24]
 8006882:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006884:	68fb      	ldr	r3, [r7, #12]
 8006886:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800688a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800688e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006890:	68fb      	ldr	r3, [r7, #12]
 8006892:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006896:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006898:	683b      	ldr	r3, [r7, #0]
 800689a:	681b      	ldr	r3, [r3, #0]
 800689c:	021b      	lsls	r3, r3, #8
 800689e:	68fa      	ldr	r2, [r7, #12]
 80068a0:	4313      	orrs	r3, r2
 80068a2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80068a4:	697b      	ldr	r3, [r7, #20]
 80068a6:	f023 0320 	bic.w	r3, r3, #32
 80068aa:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80068ac:	683b      	ldr	r3, [r7, #0]
 80068ae:	689b      	ldr	r3, [r3, #8]
 80068b0:	011b      	lsls	r3, r3, #4
 80068b2:	697a      	ldr	r2, [r7, #20]
 80068b4:	4313      	orrs	r3, r2
 80068b6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	4a22      	ldr	r2, [pc, #136]	; (8006944 <TIM_OC2_SetConfig+0xe8>)
 80068bc:	4293      	cmp	r3, r2
 80068be:	d10d      	bne.n	80068dc <TIM_OC2_SetConfig+0x80>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80068c0:	697b      	ldr	r3, [r7, #20]
 80068c2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80068c6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80068c8:	683b      	ldr	r3, [r7, #0]
 80068ca:	68db      	ldr	r3, [r3, #12]
 80068cc:	011b      	lsls	r3, r3, #4
 80068ce:	697a      	ldr	r2, [r7, #20]
 80068d0:	4313      	orrs	r3, r2
 80068d2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80068d4:	697b      	ldr	r3, [r7, #20]
 80068d6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80068da:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	4a19      	ldr	r2, [pc, #100]	; (8006944 <TIM_OC2_SetConfig+0xe8>)
 80068e0:	4293      	cmp	r3, r2
 80068e2:	d007      	beq.n	80068f4 <TIM_OC2_SetConfig+0x98>
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	4a18      	ldr	r2, [pc, #96]	; (8006948 <TIM_OC2_SetConfig+0xec>)
 80068e8:	4293      	cmp	r3, r2
 80068ea:	d003      	beq.n	80068f4 <TIM_OC2_SetConfig+0x98>
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	4a17      	ldr	r2, [pc, #92]	; (800694c <TIM_OC2_SetConfig+0xf0>)
 80068f0:	4293      	cmp	r3, r2
 80068f2:	d113      	bne.n	800691c <TIM_OC2_SetConfig+0xc0>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80068f4:	693b      	ldr	r3, [r7, #16]
 80068f6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80068fa:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80068fc:	693b      	ldr	r3, [r7, #16]
 80068fe:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006902:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006904:	683b      	ldr	r3, [r7, #0]
 8006906:	695b      	ldr	r3, [r3, #20]
 8006908:	009b      	lsls	r3, r3, #2
 800690a:	693a      	ldr	r2, [r7, #16]
 800690c:	4313      	orrs	r3, r2
 800690e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006910:	683b      	ldr	r3, [r7, #0]
 8006912:	699b      	ldr	r3, [r3, #24]
 8006914:	009b      	lsls	r3, r3, #2
 8006916:	693a      	ldr	r2, [r7, #16]
 8006918:	4313      	orrs	r3, r2
 800691a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	693a      	ldr	r2, [r7, #16]
 8006920:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	68fa      	ldr	r2, [r7, #12]
 8006926:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006928:	683b      	ldr	r3, [r7, #0]
 800692a:	685a      	ldr	r2, [r3, #4]
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	697a      	ldr	r2, [r7, #20]
 8006934:	621a      	str	r2, [r3, #32]
}
 8006936:	bf00      	nop
 8006938:	371c      	adds	r7, #28
 800693a:	46bd      	mov	sp, r7
 800693c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006940:	4770      	bx	lr
 8006942:	bf00      	nop
 8006944:	40012c00 	.word	0x40012c00
 8006948:	40014000 	.word	0x40014000
 800694c:	40014400 	.word	0x40014400

08006950 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006950:	b480      	push	{r7}
 8006952:	b087      	sub	sp, #28
 8006954:	af00      	add	r7, sp, #0
 8006956:	6078      	str	r0, [r7, #4]
 8006958:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	6a1b      	ldr	r3, [r3, #32]
 800695e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	6a1b      	ldr	r3, [r3, #32]
 800696a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	685b      	ldr	r3, [r3, #4]
 8006970:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	69db      	ldr	r3, [r3, #28]
 8006976:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006978:	68fb      	ldr	r3, [r7, #12]
 800697a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800697e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006982:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006984:	68fb      	ldr	r3, [r7, #12]
 8006986:	f023 0303 	bic.w	r3, r3, #3
 800698a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800698c:	683b      	ldr	r3, [r7, #0]
 800698e:	681b      	ldr	r3, [r3, #0]
 8006990:	68fa      	ldr	r2, [r7, #12]
 8006992:	4313      	orrs	r3, r2
 8006994:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8006996:	697b      	ldr	r3, [r7, #20]
 8006998:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800699c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800699e:	683b      	ldr	r3, [r7, #0]
 80069a0:	689b      	ldr	r3, [r3, #8]
 80069a2:	021b      	lsls	r3, r3, #8
 80069a4:	697a      	ldr	r2, [r7, #20]
 80069a6:	4313      	orrs	r3, r2
 80069a8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	4a21      	ldr	r2, [pc, #132]	; (8006a34 <TIM_OC3_SetConfig+0xe4>)
 80069ae:	4293      	cmp	r3, r2
 80069b0:	d10d      	bne.n	80069ce <TIM_OC3_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80069b2:	697b      	ldr	r3, [r7, #20]
 80069b4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80069b8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80069ba:	683b      	ldr	r3, [r7, #0]
 80069bc:	68db      	ldr	r3, [r3, #12]
 80069be:	021b      	lsls	r3, r3, #8
 80069c0:	697a      	ldr	r2, [r7, #20]
 80069c2:	4313      	orrs	r3, r2
 80069c4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80069c6:	697b      	ldr	r3, [r7, #20]
 80069c8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80069cc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	4a18      	ldr	r2, [pc, #96]	; (8006a34 <TIM_OC3_SetConfig+0xe4>)
 80069d2:	4293      	cmp	r3, r2
 80069d4:	d007      	beq.n	80069e6 <TIM_OC3_SetConfig+0x96>
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	4a17      	ldr	r2, [pc, #92]	; (8006a38 <TIM_OC3_SetConfig+0xe8>)
 80069da:	4293      	cmp	r3, r2
 80069dc:	d003      	beq.n	80069e6 <TIM_OC3_SetConfig+0x96>
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	4a16      	ldr	r2, [pc, #88]	; (8006a3c <TIM_OC3_SetConfig+0xec>)
 80069e2:	4293      	cmp	r3, r2
 80069e4:	d113      	bne.n	8006a0e <TIM_OC3_SetConfig+0xbe>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80069e6:	693b      	ldr	r3, [r7, #16]
 80069e8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80069ec:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80069ee:	693b      	ldr	r3, [r7, #16]
 80069f0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80069f4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80069f6:	683b      	ldr	r3, [r7, #0]
 80069f8:	695b      	ldr	r3, [r3, #20]
 80069fa:	011b      	lsls	r3, r3, #4
 80069fc:	693a      	ldr	r2, [r7, #16]
 80069fe:	4313      	orrs	r3, r2
 8006a00:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8006a02:	683b      	ldr	r3, [r7, #0]
 8006a04:	699b      	ldr	r3, [r3, #24]
 8006a06:	011b      	lsls	r3, r3, #4
 8006a08:	693a      	ldr	r2, [r7, #16]
 8006a0a:	4313      	orrs	r3, r2
 8006a0c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	693a      	ldr	r2, [r7, #16]
 8006a12:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	68fa      	ldr	r2, [r7, #12]
 8006a18:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8006a1a:	683b      	ldr	r3, [r7, #0]
 8006a1c:	685a      	ldr	r2, [r3, #4]
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	697a      	ldr	r2, [r7, #20]
 8006a26:	621a      	str	r2, [r3, #32]
}
 8006a28:	bf00      	nop
 8006a2a:	371c      	adds	r7, #28
 8006a2c:	46bd      	mov	sp, r7
 8006a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a32:	4770      	bx	lr
 8006a34:	40012c00 	.word	0x40012c00
 8006a38:	40014000 	.word	0x40014000
 8006a3c:	40014400 	.word	0x40014400

08006a40 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006a40:	b480      	push	{r7}
 8006a42:	b087      	sub	sp, #28
 8006a44:	af00      	add	r7, sp, #0
 8006a46:	6078      	str	r0, [r7, #4]
 8006a48:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	6a1b      	ldr	r3, [r3, #32]
 8006a4e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	6a1b      	ldr	r3, [r3, #32]
 8006a5a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	685b      	ldr	r3, [r3, #4]
 8006a60:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	69db      	ldr	r3, [r3, #28]
 8006a66:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006a68:	68fb      	ldr	r3, [r7, #12]
 8006a6a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006a6e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006a72:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006a74:	68fb      	ldr	r3, [r7, #12]
 8006a76:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006a7a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006a7c:	683b      	ldr	r3, [r7, #0]
 8006a7e:	681b      	ldr	r3, [r3, #0]
 8006a80:	021b      	lsls	r3, r3, #8
 8006a82:	68fa      	ldr	r2, [r7, #12]
 8006a84:	4313      	orrs	r3, r2
 8006a86:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006a88:	693b      	ldr	r3, [r7, #16]
 8006a8a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006a8e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006a90:	683b      	ldr	r3, [r7, #0]
 8006a92:	689b      	ldr	r3, [r3, #8]
 8006a94:	031b      	lsls	r3, r3, #12
 8006a96:	693a      	ldr	r2, [r7, #16]
 8006a98:	4313      	orrs	r3, r2
 8006a9a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	4a14      	ldr	r2, [pc, #80]	; (8006af0 <TIM_OC4_SetConfig+0xb0>)
 8006aa0:	4293      	cmp	r3, r2
 8006aa2:	d007      	beq.n	8006ab4 <TIM_OC4_SetConfig+0x74>
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	4a13      	ldr	r2, [pc, #76]	; (8006af4 <TIM_OC4_SetConfig+0xb4>)
 8006aa8:	4293      	cmp	r3, r2
 8006aaa:	d003      	beq.n	8006ab4 <TIM_OC4_SetConfig+0x74>
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	4a12      	ldr	r2, [pc, #72]	; (8006af8 <TIM_OC4_SetConfig+0xb8>)
 8006ab0:	4293      	cmp	r3, r2
 8006ab2:	d109      	bne.n	8006ac8 <TIM_OC4_SetConfig+0x88>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006ab4:	697b      	ldr	r3, [r7, #20]
 8006ab6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006aba:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006abc:	683b      	ldr	r3, [r7, #0]
 8006abe:	695b      	ldr	r3, [r3, #20]
 8006ac0:	019b      	lsls	r3, r3, #6
 8006ac2:	697a      	ldr	r2, [r7, #20]
 8006ac4:	4313      	orrs	r3, r2
 8006ac6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	697a      	ldr	r2, [r7, #20]
 8006acc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	68fa      	ldr	r2, [r7, #12]
 8006ad2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006ad4:	683b      	ldr	r3, [r7, #0]
 8006ad6:	685a      	ldr	r2, [r3, #4]
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	693a      	ldr	r2, [r7, #16]
 8006ae0:	621a      	str	r2, [r3, #32]
}
 8006ae2:	bf00      	nop
 8006ae4:	371c      	adds	r7, #28
 8006ae6:	46bd      	mov	sp, r7
 8006ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006aec:	4770      	bx	lr
 8006aee:	bf00      	nop
 8006af0:	40012c00 	.word	0x40012c00
 8006af4:	40014000 	.word	0x40014000
 8006af8:	40014400 	.word	0x40014400

08006afc <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8006afc:	b480      	push	{r7}
 8006afe:	b087      	sub	sp, #28
 8006b00:	af00      	add	r7, sp, #0
 8006b02:	6078      	str	r0, [r7, #4]
 8006b04:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	6a1b      	ldr	r3, [r3, #32]
 8006b0a:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	6a1b      	ldr	r3, [r3, #32]
 8006b16:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	685b      	ldr	r3, [r3, #4]
 8006b1c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006b22:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8006b24:	68fb      	ldr	r3, [r7, #12]
 8006b26:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006b2a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006b2e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006b30:	683b      	ldr	r3, [r7, #0]
 8006b32:	681b      	ldr	r3, [r3, #0]
 8006b34:	68fa      	ldr	r2, [r7, #12]
 8006b36:	4313      	orrs	r3, r2
 8006b38:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8006b3a:	693b      	ldr	r3, [r7, #16]
 8006b3c:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8006b40:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8006b42:	683b      	ldr	r3, [r7, #0]
 8006b44:	689b      	ldr	r3, [r3, #8]
 8006b46:	041b      	lsls	r3, r3, #16
 8006b48:	693a      	ldr	r2, [r7, #16]
 8006b4a:	4313      	orrs	r3, r2
 8006b4c:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	4a13      	ldr	r2, [pc, #76]	; (8006ba0 <TIM_OC5_SetConfig+0xa4>)
 8006b52:	4293      	cmp	r3, r2
 8006b54:	d007      	beq.n	8006b66 <TIM_OC5_SetConfig+0x6a>
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	4a12      	ldr	r2, [pc, #72]	; (8006ba4 <TIM_OC5_SetConfig+0xa8>)
 8006b5a:	4293      	cmp	r3, r2
 8006b5c:	d003      	beq.n	8006b66 <TIM_OC5_SetConfig+0x6a>
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	4a11      	ldr	r2, [pc, #68]	; (8006ba8 <TIM_OC5_SetConfig+0xac>)
 8006b62:	4293      	cmp	r3, r2
 8006b64:	d109      	bne.n	8006b7a <TIM_OC5_SetConfig+0x7e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8006b66:	697b      	ldr	r3, [r7, #20]
 8006b68:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006b6c:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8006b6e:	683b      	ldr	r3, [r7, #0]
 8006b70:	695b      	ldr	r3, [r3, #20]
 8006b72:	021b      	lsls	r3, r3, #8
 8006b74:	697a      	ldr	r2, [r7, #20]
 8006b76:	4313      	orrs	r3, r2
 8006b78:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	697a      	ldr	r2, [r7, #20]
 8006b7e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	68fa      	ldr	r2, [r7, #12]
 8006b84:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8006b86:	683b      	ldr	r3, [r7, #0]
 8006b88:	685a      	ldr	r2, [r3, #4]
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	693a      	ldr	r2, [r7, #16]
 8006b92:	621a      	str	r2, [r3, #32]
}
 8006b94:	bf00      	nop
 8006b96:	371c      	adds	r7, #28
 8006b98:	46bd      	mov	sp, r7
 8006b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b9e:	4770      	bx	lr
 8006ba0:	40012c00 	.word	0x40012c00
 8006ba4:	40014000 	.word	0x40014000
 8006ba8:	40014400 	.word	0x40014400

08006bac <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8006bac:	b480      	push	{r7}
 8006bae:	b087      	sub	sp, #28
 8006bb0:	af00      	add	r7, sp, #0
 8006bb2:	6078      	str	r0, [r7, #4]
 8006bb4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	6a1b      	ldr	r3, [r3, #32]
 8006bba:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	6a1b      	ldr	r3, [r3, #32]
 8006bc6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	685b      	ldr	r3, [r3, #4]
 8006bcc:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006bd2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8006bd4:	68fb      	ldr	r3, [r7, #12]
 8006bd6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006bda:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006bde:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006be0:	683b      	ldr	r3, [r7, #0]
 8006be2:	681b      	ldr	r3, [r3, #0]
 8006be4:	021b      	lsls	r3, r3, #8
 8006be6:	68fa      	ldr	r2, [r7, #12]
 8006be8:	4313      	orrs	r3, r2
 8006bea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8006bec:	693b      	ldr	r3, [r7, #16]
 8006bee:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8006bf2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8006bf4:	683b      	ldr	r3, [r7, #0]
 8006bf6:	689b      	ldr	r3, [r3, #8]
 8006bf8:	051b      	lsls	r3, r3, #20
 8006bfa:	693a      	ldr	r2, [r7, #16]
 8006bfc:	4313      	orrs	r3, r2
 8006bfe:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	4a14      	ldr	r2, [pc, #80]	; (8006c54 <TIM_OC6_SetConfig+0xa8>)
 8006c04:	4293      	cmp	r3, r2
 8006c06:	d007      	beq.n	8006c18 <TIM_OC6_SetConfig+0x6c>
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	4a13      	ldr	r2, [pc, #76]	; (8006c58 <TIM_OC6_SetConfig+0xac>)
 8006c0c:	4293      	cmp	r3, r2
 8006c0e:	d003      	beq.n	8006c18 <TIM_OC6_SetConfig+0x6c>
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	4a12      	ldr	r2, [pc, #72]	; (8006c5c <TIM_OC6_SetConfig+0xb0>)
 8006c14:	4293      	cmp	r3, r2
 8006c16:	d109      	bne.n	8006c2c <TIM_OC6_SetConfig+0x80>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8006c18:	697b      	ldr	r3, [r7, #20]
 8006c1a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006c1e:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8006c20:	683b      	ldr	r3, [r7, #0]
 8006c22:	695b      	ldr	r3, [r3, #20]
 8006c24:	029b      	lsls	r3, r3, #10
 8006c26:	697a      	ldr	r2, [r7, #20]
 8006c28:	4313      	orrs	r3, r2
 8006c2a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	697a      	ldr	r2, [r7, #20]
 8006c30:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	68fa      	ldr	r2, [r7, #12]
 8006c36:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8006c38:	683b      	ldr	r3, [r7, #0]
 8006c3a:	685a      	ldr	r2, [r3, #4]
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	693a      	ldr	r2, [r7, #16]
 8006c44:	621a      	str	r2, [r3, #32]
}
 8006c46:	bf00      	nop
 8006c48:	371c      	adds	r7, #28
 8006c4a:	46bd      	mov	sp, r7
 8006c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c50:	4770      	bx	lr
 8006c52:	bf00      	nop
 8006c54:	40012c00 	.word	0x40012c00
 8006c58:	40014000 	.word	0x40014000
 8006c5c:	40014400 	.word	0x40014400

08006c60 <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8006c60:	b580      	push	{r7, lr}
 8006c62:	b086      	sub	sp, #24
 8006c64:	af00      	add	r7, sp, #0
 8006c66:	6078      	str	r0, [r7, #4]
 8006c68:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006c6a:	2300      	movs	r3, #0
 8006c6c:	75fb      	strb	r3, [r7, #23]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	681b      	ldr	r3, [r3, #0]
 8006c72:	689b      	ldr	r3, [r3, #8]
 8006c74:	613b      	str	r3, [r7, #16]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006c76:	693b      	ldr	r3, [r7, #16]
 8006c78:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006c7c:	613b      	str	r3, [r7, #16]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 8006c7e:	683b      	ldr	r3, [r7, #0]
 8006c80:	685b      	ldr	r3, [r3, #4]
 8006c82:	693a      	ldr	r2, [r7, #16]
 8006c84:	4313      	orrs	r3, r2
 8006c86:	613b      	str	r3, [r7, #16]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 8006c88:	693b      	ldr	r3, [r7, #16]
 8006c8a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006c8e:	f023 0307 	bic.w	r3, r3, #7
 8006c92:	613b      	str	r3, [r7, #16]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 8006c94:	683b      	ldr	r3, [r7, #0]
 8006c96:	681b      	ldr	r3, [r3, #0]
 8006c98:	693a      	ldr	r2, [r7, #16]
 8006c9a:	4313      	orrs	r3, r2
 8006c9c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	681b      	ldr	r3, [r3, #0]
 8006ca2:	693a      	ldr	r2, [r7, #16]
 8006ca4:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 8006ca6:	683b      	ldr	r3, [r7, #0]
 8006ca8:	685b      	ldr	r3, [r3, #4]
 8006caa:	2b70      	cmp	r3, #112	; 0x70
 8006cac:	d01a      	beq.n	8006ce4 <TIM_SlaveTimer_SetConfig+0x84>
 8006cae:	2b70      	cmp	r3, #112	; 0x70
 8006cb0:	d860      	bhi.n	8006d74 <TIM_SlaveTimer_SetConfig+0x114>
 8006cb2:	2b60      	cmp	r3, #96	; 0x60
 8006cb4:	d054      	beq.n	8006d60 <TIM_SlaveTimer_SetConfig+0x100>
 8006cb6:	2b60      	cmp	r3, #96	; 0x60
 8006cb8:	d85c      	bhi.n	8006d74 <TIM_SlaveTimer_SetConfig+0x114>
 8006cba:	2b50      	cmp	r3, #80	; 0x50
 8006cbc:	d046      	beq.n	8006d4c <TIM_SlaveTimer_SetConfig+0xec>
 8006cbe:	2b50      	cmp	r3, #80	; 0x50
 8006cc0:	d858      	bhi.n	8006d74 <TIM_SlaveTimer_SetConfig+0x114>
 8006cc2:	2b40      	cmp	r3, #64	; 0x40
 8006cc4:	d019      	beq.n	8006cfa <TIM_SlaveTimer_SetConfig+0x9a>
 8006cc6:	2b40      	cmp	r3, #64	; 0x40
 8006cc8:	d854      	bhi.n	8006d74 <TIM_SlaveTimer_SetConfig+0x114>
 8006cca:	2b30      	cmp	r3, #48	; 0x30
 8006ccc:	d055      	beq.n	8006d7a <TIM_SlaveTimer_SetConfig+0x11a>
 8006cce:	2b30      	cmp	r3, #48	; 0x30
 8006cd0:	d850      	bhi.n	8006d74 <TIM_SlaveTimer_SetConfig+0x114>
 8006cd2:	2b20      	cmp	r3, #32
 8006cd4:	d051      	beq.n	8006d7a <TIM_SlaveTimer_SetConfig+0x11a>
 8006cd6:	2b20      	cmp	r3, #32
 8006cd8:	d84c      	bhi.n	8006d74 <TIM_SlaveTimer_SetConfig+0x114>
 8006cda:	2b00      	cmp	r3, #0
 8006cdc:	d04d      	beq.n	8006d7a <TIM_SlaveTimer_SetConfig+0x11a>
 8006cde:	2b10      	cmp	r3, #16
 8006ce0:	d04b      	beq.n	8006d7a <TIM_SlaveTimer_SetConfig+0x11a>
 8006ce2:	e047      	b.n	8006d74 <TIM_SlaveTimer_SetConfig+0x114>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPRESCALER(sSlaveConfig->TriggerPrescaler));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));
      /* Configure the ETR Trigger source */
      TIM_ETR_SetConfig(htim->Instance,
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	6818      	ldr	r0, [r3, #0]
 8006ce8:	683b      	ldr	r3, [r7, #0]
 8006cea:	68d9      	ldr	r1, [r3, #12]
 8006cec:	683b      	ldr	r3, [r7, #0]
 8006cee:	689a      	ldr	r2, [r3, #8]
 8006cf0:	683b      	ldr	r3, [r7, #0]
 8006cf2:	691b      	ldr	r3, [r3, #16]
 8006cf4:	f000 f9d4 	bl	80070a0 <TIM_ETR_SetConfig>
                        sSlaveConfig->TriggerPrescaler,
                        sSlaveConfig->TriggerPolarity,
                        sSlaveConfig->TriggerFilter);
      break;
 8006cf8:	e040      	b.n	8006d7c <TIM_SlaveTimer_SetConfig+0x11c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      if (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 8006cfa:	683b      	ldr	r3, [r7, #0]
 8006cfc:	681b      	ldr	r3, [r3, #0]
 8006cfe:	2b05      	cmp	r3, #5
 8006d00:	d101      	bne.n	8006d06 <TIM_SlaveTimer_SetConfig+0xa6>
      {
        return HAL_ERROR;
 8006d02:	2301      	movs	r3, #1
 8006d04:	e03b      	b.n	8006d7e <TIM_SlaveTimer_SetConfig+0x11e>
      }

      /* Disable the Channel 1: Reset the CC1E Bit */
      tmpccer = htim->Instance->CCER;
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	681b      	ldr	r3, [r3, #0]
 8006d0a:	6a1b      	ldr	r3, [r3, #32]
 8006d0c:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	681b      	ldr	r3, [r3, #0]
 8006d12:	6a1a      	ldr	r2, [r3, #32]
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	681b      	ldr	r3, [r3, #0]
 8006d18:	f022 0201 	bic.w	r2, r2, #1
 8006d1c:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	681b      	ldr	r3, [r3, #0]
 8006d22:	699b      	ldr	r3, [r3, #24]
 8006d24:	60bb      	str	r3, [r7, #8]

      /* Set the filter */
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006d26:	68bb      	ldr	r3, [r7, #8]
 8006d28:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006d2c:	60bb      	str	r3, [r7, #8]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 8006d2e:	683b      	ldr	r3, [r7, #0]
 8006d30:	691b      	ldr	r3, [r3, #16]
 8006d32:	011b      	lsls	r3, r3, #4
 8006d34:	68ba      	ldr	r2, [r7, #8]
 8006d36:	4313      	orrs	r3, r2
 8006d38:	60bb      	str	r3, [r7, #8]

      /* Write to TIMx CCMR1 and CCER registers */
      htim->Instance->CCMR1 = tmpccmr1;
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	681b      	ldr	r3, [r3, #0]
 8006d3e:	68ba      	ldr	r2, [r7, #8]
 8006d40:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	681b      	ldr	r3, [r3, #0]
 8006d46:	68fa      	ldr	r2, [r7, #12]
 8006d48:	621a      	str	r2, [r3, #32]
      break;
 8006d4a:	e017      	b.n	8006d7c <TIM_SlaveTimer_SetConfig+0x11c>
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI1 Filter and Polarity */
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	6818      	ldr	r0, [r3, #0]
 8006d50:	683b      	ldr	r3, [r7, #0]
 8006d52:	6899      	ldr	r1, [r3, #8]
 8006d54:	683b      	ldr	r3, [r7, #0]
 8006d56:	691b      	ldr	r3, [r3, #16]
 8006d58:	461a      	mov	r2, r3
 8006d5a:	f000 f871 	bl	8006e40 <TIM_TI1_ConfigInputStage>
                               sSlaveConfig->TriggerPolarity,
                               sSlaveConfig->TriggerFilter);
      break;
 8006d5e:	e00d      	b.n	8006d7c <TIM_SlaveTimer_SetConfig+0x11c>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI2 Filter and Polarity */
      TIM_TI2_ConfigInputStage(htim->Instance,
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	6818      	ldr	r0, [r3, #0]
 8006d64:	683b      	ldr	r3, [r7, #0]
 8006d66:	6899      	ldr	r1, [r3, #8]
 8006d68:	683b      	ldr	r3, [r7, #0]
 8006d6a:	691b      	ldr	r3, [r3, #16]
 8006d6c:	461a      	mov	r2, r3
 8006d6e:	f000 f8d3 	bl	8006f18 <TIM_TI2_ConfigInputStage>
                               sSlaveConfig->TriggerPolarity,
                               sSlaveConfig->TriggerFilter);
      break;
 8006d72:	e003      	b.n	8006d7c <TIM_SlaveTimer_SetConfig+0x11c>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      break;
    }

    default:
      status = HAL_ERROR;
 8006d74:	2301      	movs	r3, #1
 8006d76:	75fb      	strb	r3, [r7, #23]
      break;
 8006d78:	e000      	b.n	8006d7c <TIM_SlaveTimer_SetConfig+0x11c>
      break;
 8006d7a:	bf00      	nop
  }

  return status;
 8006d7c:	7dfb      	ldrb	r3, [r7, #23]
}
 8006d7e:	4618      	mov	r0, r3
 8006d80:	3718      	adds	r7, #24
 8006d82:	46bd      	mov	sp, r7
 8006d84:	bd80      	pop	{r7, pc}
	...

08006d88 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8006d88:	b480      	push	{r7}
 8006d8a:	b087      	sub	sp, #28
 8006d8c:	af00      	add	r7, sp, #0
 8006d8e:	60f8      	str	r0, [r7, #12]
 8006d90:	60b9      	str	r1, [r7, #8]
 8006d92:	607a      	str	r2, [r7, #4]
 8006d94:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006d96:	68fb      	ldr	r3, [r7, #12]
 8006d98:	6a1b      	ldr	r3, [r3, #32]
 8006d9a:	f023 0201 	bic.w	r2, r3, #1
 8006d9e:	68fb      	ldr	r3, [r7, #12]
 8006da0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006da2:	68fb      	ldr	r3, [r7, #12]
 8006da4:	699b      	ldr	r3, [r3, #24]
 8006da6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006da8:	68fb      	ldr	r3, [r7, #12]
 8006daa:	6a1b      	ldr	r3, [r3, #32]
 8006dac:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8006dae:	68fb      	ldr	r3, [r7, #12]
 8006db0:	4a20      	ldr	r2, [pc, #128]	; (8006e34 <TIM_TI1_SetConfig+0xac>)
 8006db2:	4293      	cmp	r3, r2
 8006db4:	d00b      	beq.n	8006dce <TIM_TI1_SetConfig+0x46>
 8006db6:	68fb      	ldr	r3, [r7, #12]
 8006db8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006dbc:	d007      	beq.n	8006dce <TIM_TI1_SetConfig+0x46>
 8006dbe:	68fb      	ldr	r3, [r7, #12]
 8006dc0:	4a1d      	ldr	r2, [pc, #116]	; (8006e38 <TIM_TI1_SetConfig+0xb0>)
 8006dc2:	4293      	cmp	r3, r2
 8006dc4:	d003      	beq.n	8006dce <TIM_TI1_SetConfig+0x46>
 8006dc6:	68fb      	ldr	r3, [r7, #12]
 8006dc8:	4a1c      	ldr	r2, [pc, #112]	; (8006e3c <TIM_TI1_SetConfig+0xb4>)
 8006dca:	4293      	cmp	r3, r2
 8006dcc:	d101      	bne.n	8006dd2 <TIM_TI1_SetConfig+0x4a>
 8006dce:	2301      	movs	r3, #1
 8006dd0:	e000      	b.n	8006dd4 <TIM_TI1_SetConfig+0x4c>
 8006dd2:	2300      	movs	r3, #0
 8006dd4:	2b00      	cmp	r3, #0
 8006dd6:	d008      	beq.n	8006dea <TIM_TI1_SetConfig+0x62>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8006dd8:	697b      	ldr	r3, [r7, #20]
 8006dda:	f023 0303 	bic.w	r3, r3, #3
 8006dde:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8006de0:	697a      	ldr	r2, [r7, #20]
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	4313      	orrs	r3, r2
 8006de6:	617b      	str	r3, [r7, #20]
 8006de8:	e003      	b.n	8006df2 <TIM_TI1_SetConfig+0x6a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8006dea:	697b      	ldr	r3, [r7, #20]
 8006dec:	f043 0301 	orr.w	r3, r3, #1
 8006df0:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006df2:	697b      	ldr	r3, [r7, #20]
 8006df4:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006df8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8006dfa:	683b      	ldr	r3, [r7, #0]
 8006dfc:	011b      	lsls	r3, r3, #4
 8006dfe:	b2db      	uxtb	r3, r3
 8006e00:	697a      	ldr	r2, [r7, #20]
 8006e02:	4313      	orrs	r3, r2
 8006e04:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006e06:	693b      	ldr	r3, [r7, #16]
 8006e08:	f023 030a 	bic.w	r3, r3, #10
 8006e0c:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8006e0e:	68bb      	ldr	r3, [r7, #8]
 8006e10:	f003 030a 	and.w	r3, r3, #10
 8006e14:	693a      	ldr	r2, [r7, #16]
 8006e16:	4313      	orrs	r3, r2
 8006e18:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006e1a:	68fb      	ldr	r3, [r7, #12]
 8006e1c:	697a      	ldr	r2, [r7, #20]
 8006e1e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006e20:	68fb      	ldr	r3, [r7, #12]
 8006e22:	693a      	ldr	r2, [r7, #16]
 8006e24:	621a      	str	r2, [r3, #32]
}
 8006e26:	bf00      	nop
 8006e28:	371c      	adds	r7, #28
 8006e2a:	46bd      	mov	sp, r7
 8006e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e30:	4770      	bx	lr
 8006e32:	bf00      	nop
 8006e34:	40012c00 	.word	0x40012c00
 8006e38:	40000400 	.word	0x40000400
 8006e3c:	40014000 	.word	0x40014000

08006e40 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006e40:	b480      	push	{r7}
 8006e42:	b087      	sub	sp, #28
 8006e44:	af00      	add	r7, sp, #0
 8006e46:	60f8      	str	r0, [r7, #12]
 8006e48:	60b9      	str	r1, [r7, #8]
 8006e4a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006e4c:	68fb      	ldr	r3, [r7, #12]
 8006e4e:	6a1b      	ldr	r3, [r3, #32]
 8006e50:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006e52:	68fb      	ldr	r3, [r7, #12]
 8006e54:	6a1b      	ldr	r3, [r3, #32]
 8006e56:	f023 0201 	bic.w	r2, r3, #1
 8006e5a:	68fb      	ldr	r3, [r7, #12]
 8006e5c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006e5e:	68fb      	ldr	r3, [r7, #12]
 8006e60:	699b      	ldr	r3, [r3, #24]
 8006e62:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006e64:	693b      	ldr	r3, [r7, #16]
 8006e66:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006e6a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	011b      	lsls	r3, r3, #4
 8006e70:	693a      	ldr	r2, [r7, #16]
 8006e72:	4313      	orrs	r3, r2
 8006e74:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006e76:	697b      	ldr	r3, [r7, #20]
 8006e78:	f023 030a 	bic.w	r3, r3, #10
 8006e7c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006e7e:	697a      	ldr	r2, [r7, #20]
 8006e80:	68bb      	ldr	r3, [r7, #8]
 8006e82:	4313      	orrs	r3, r2
 8006e84:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006e86:	68fb      	ldr	r3, [r7, #12]
 8006e88:	693a      	ldr	r2, [r7, #16]
 8006e8a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006e8c:	68fb      	ldr	r3, [r7, #12]
 8006e8e:	697a      	ldr	r2, [r7, #20]
 8006e90:	621a      	str	r2, [r3, #32]
}
 8006e92:	bf00      	nop
 8006e94:	371c      	adds	r7, #28
 8006e96:	46bd      	mov	sp, r7
 8006e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e9c:	4770      	bx	lr

08006e9e <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8006e9e:	b480      	push	{r7}
 8006ea0:	b087      	sub	sp, #28
 8006ea2:	af00      	add	r7, sp, #0
 8006ea4:	60f8      	str	r0, [r7, #12]
 8006ea6:	60b9      	str	r1, [r7, #8]
 8006ea8:	607a      	str	r2, [r7, #4]
 8006eaa:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006eac:	68fb      	ldr	r3, [r7, #12]
 8006eae:	6a1b      	ldr	r3, [r3, #32]
 8006eb0:	f023 0210 	bic.w	r2, r3, #16
 8006eb4:	68fb      	ldr	r3, [r7, #12]
 8006eb6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006eb8:	68fb      	ldr	r3, [r7, #12]
 8006eba:	699b      	ldr	r3, [r3, #24]
 8006ebc:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006ebe:	68fb      	ldr	r3, [r7, #12]
 8006ec0:	6a1b      	ldr	r3, [r3, #32]
 8006ec2:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8006ec4:	697b      	ldr	r3, [r7, #20]
 8006ec6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006eca:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	021b      	lsls	r3, r3, #8
 8006ed0:	697a      	ldr	r2, [r7, #20]
 8006ed2:	4313      	orrs	r3, r2
 8006ed4:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006ed6:	697b      	ldr	r3, [r7, #20]
 8006ed8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006edc:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8006ede:	683b      	ldr	r3, [r7, #0]
 8006ee0:	031b      	lsls	r3, r3, #12
 8006ee2:	b29b      	uxth	r3, r3
 8006ee4:	697a      	ldr	r2, [r7, #20]
 8006ee6:	4313      	orrs	r3, r2
 8006ee8:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006eea:	693b      	ldr	r3, [r7, #16]
 8006eec:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8006ef0:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8006ef2:	68bb      	ldr	r3, [r7, #8]
 8006ef4:	011b      	lsls	r3, r3, #4
 8006ef6:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8006efa:	693a      	ldr	r2, [r7, #16]
 8006efc:	4313      	orrs	r3, r2
 8006efe:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006f00:	68fb      	ldr	r3, [r7, #12]
 8006f02:	697a      	ldr	r2, [r7, #20]
 8006f04:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006f06:	68fb      	ldr	r3, [r7, #12]
 8006f08:	693a      	ldr	r2, [r7, #16]
 8006f0a:	621a      	str	r2, [r3, #32]
}
 8006f0c:	bf00      	nop
 8006f0e:	371c      	adds	r7, #28
 8006f10:	46bd      	mov	sp, r7
 8006f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f16:	4770      	bx	lr

08006f18 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006f18:	b480      	push	{r7}
 8006f1a:	b087      	sub	sp, #28
 8006f1c:	af00      	add	r7, sp, #0
 8006f1e:	60f8      	str	r0, [r7, #12]
 8006f20:	60b9      	str	r1, [r7, #8]
 8006f22:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006f24:	68fb      	ldr	r3, [r7, #12]
 8006f26:	6a1b      	ldr	r3, [r3, #32]
 8006f28:	f023 0210 	bic.w	r2, r3, #16
 8006f2c:	68fb      	ldr	r3, [r7, #12]
 8006f2e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006f30:	68fb      	ldr	r3, [r7, #12]
 8006f32:	699b      	ldr	r3, [r3, #24]
 8006f34:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006f36:	68fb      	ldr	r3, [r7, #12]
 8006f38:	6a1b      	ldr	r3, [r3, #32]
 8006f3a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006f3c:	697b      	ldr	r3, [r7, #20]
 8006f3e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006f42:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	031b      	lsls	r3, r3, #12
 8006f48:	697a      	ldr	r2, [r7, #20]
 8006f4a:	4313      	orrs	r3, r2
 8006f4c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006f4e:	693b      	ldr	r3, [r7, #16]
 8006f50:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8006f54:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006f56:	68bb      	ldr	r3, [r7, #8]
 8006f58:	011b      	lsls	r3, r3, #4
 8006f5a:	693a      	ldr	r2, [r7, #16]
 8006f5c:	4313      	orrs	r3, r2
 8006f5e:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006f60:	68fb      	ldr	r3, [r7, #12]
 8006f62:	697a      	ldr	r2, [r7, #20]
 8006f64:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006f66:	68fb      	ldr	r3, [r7, #12]
 8006f68:	693a      	ldr	r2, [r7, #16]
 8006f6a:	621a      	str	r2, [r3, #32]
}
 8006f6c:	bf00      	nop
 8006f6e:	371c      	adds	r7, #28
 8006f70:	46bd      	mov	sp, r7
 8006f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f76:	4770      	bx	lr

08006f78 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8006f78:	b480      	push	{r7}
 8006f7a:	b087      	sub	sp, #28
 8006f7c:	af00      	add	r7, sp, #0
 8006f7e:	60f8      	str	r0, [r7, #12]
 8006f80:	60b9      	str	r1, [r7, #8]
 8006f82:	607a      	str	r2, [r7, #4]
 8006f84:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006f86:	68fb      	ldr	r3, [r7, #12]
 8006f88:	6a1b      	ldr	r3, [r3, #32]
 8006f8a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006f8e:	68fb      	ldr	r3, [r7, #12]
 8006f90:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8006f92:	68fb      	ldr	r3, [r7, #12]
 8006f94:	69db      	ldr	r3, [r3, #28]
 8006f96:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006f98:	68fb      	ldr	r3, [r7, #12]
 8006f9a:	6a1b      	ldr	r3, [r3, #32]
 8006f9c:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8006f9e:	697b      	ldr	r3, [r7, #20]
 8006fa0:	f023 0303 	bic.w	r3, r3, #3
 8006fa4:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 8006fa6:	697a      	ldr	r2, [r7, #20]
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	4313      	orrs	r3, r2
 8006fac:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8006fae:	697b      	ldr	r3, [r7, #20]
 8006fb0:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006fb4:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8006fb6:	683b      	ldr	r3, [r7, #0]
 8006fb8:	011b      	lsls	r3, r3, #4
 8006fba:	b2db      	uxtb	r3, r3
 8006fbc:	697a      	ldr	r2, [r7, #20]
 8006fbe:	4313      	orrs	r3, r2
 8006fc0:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8006fc2:	693b      	ldr	r3, [r7, #16]
 8006fc4:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 8006fc8:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8006fca:	68bb      	ldr	r3, [r7, #8]
 8006fcc:	021b      	lsls	r3, r3, #8
 8006fce:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 8006fd2:	693a      	ldr	r2, [r7, #16]
 8006fd4:	4313      	orrs	r3, r2
 8006fd6:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8006fd8:	68fb      	ldr	r3, [r7, #12]
 8006fda:	697a      	ldr	r2, [r7, #20]
 8006fdc:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8006fde:	68fb      	ldr	r3, [r7, #12]
 8006fe0:	693a      	ldr	r2, [r7, #16]
 8006fe2:	621a      	str	r2, [r3, #32]
}
 8006fe4:	bf00      	nop
 8006fe6:	371c      	adds	r7, #28
 8006fe8:	46bd      	mov	sp, r7
 8006fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fee:	4770      	bx	lr

08006ff0 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8006ff0:	b480      	push	{r7}
 8006ff2:	b087      	sub	sp, #28
 8006ff4:	af00      	add	r7, sp, #0
 8006ff6:	60f8      	str	r0, [r7, #12]
 8006ff8:	60b9      	str	r1, [r7, #8]
 8006ffa:	607a      	str	r2, [r7, #4]
 8006ffc:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006ffe:	68fb      	ldr	r3, [r7, #12]
 8007000:	6a1b      	ldr	r3, [r3, #32]
 8007002:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8007006:	68fb      	ldr	r3, [r7, #12]
 8007008:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800700a:	68fb      	ldr	r3, [r7, #12]
 800700c:	69db      	ldr	r3, [r3, #28]
 800700e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007010:	68fb      	ldr	r3, [r7, #12]
 8007012:	6a1b      	ldr	r3, [r3, #32]
 8007014:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8007016:	697b      	ldr	r3, [r7, #20]
 8007018:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800701c:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	021b      	lsls	r3, r3, #8
 8007022:	697a      	ldr	r2, [r7, #20]
 8007024:	4313      	orrs	r3, r2
 8007026:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8007028:	697b      	ldr	r3, [r7, #20]
 800702a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800702e:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8007030:	683b      	ldr	r3, [r7, #0]
 8007032:	031b      	lsls	r3, r3, #12
 8007034:	b29b      	uxth	r3, r3
 8007036:	697a      	ldr	r2, [r7, #20]
 8007038:	4313      	orrs	r3, r2
 800703a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 800703c:	693b      	ldr	r3, [r7, #16]
 800703e:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 8007042:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8007044:	68bb      	ldr	r3, [r7, #8]
 8007046:	031b      	lsls	r3, r3, #12
 8007048:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 800704c:	693a      	ldr	r2, [r7, #16]
 800704e:	4313      	orrs	r3, r2
 8007050:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8007052:	68fb      	ldr	r3, [r7, #12]
 8007054:	697a      	ldr	r2, [r7, #20]
 8007056:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8007058:	68fb      	ldr	r3, [r7, #12]
 800705a:	693a      	ldr	r2, [r7, #16]
 800705c:	621a      	str	r2, [r3, #32]
}
 800705e:	bf00      	nop
 8007060:	371c      	adds	r7, #28
 8007062:	46bd      	mov	sp, r7
 8007064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007068:	4770      	bx	lr

0800706a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800706a:	b480      	push	{r7}
 800706c:	b085      	sub	sp, #20
 800706e:	af00      	add	r7, sp, #0
 8007070:	6078      	str	r0, [r7, #4]
 8007072:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	689b      	ldr	r3, [r3, #8]
 8007078:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800707a:	68fb      	ldr	r3, [r7, #12]
 800707c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007080:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8007082:	683a      	ldr	r2, [r7, #0]
 8007084:	68fb      	ldr	r3, [r7, #12]
 8007086:	4313      	orrs	r3, r2
 8007088:	f043 0307 	orr.w	r3, r3, #7
 800708c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	68fa      	ldr	r2, [r7, #12]
 8007092:	609a      	str	r2, [r3, #8]
}
 8007094:	bf00      	nop
 8007096:	3714      	adds	r7, #20
 8007098:	46bd      	mov	sp, r7
 800709a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800709e:	4770      	bx	lr

080070a0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80070a0:	b480      	push	{r7}
 80070a2:	b087      	sub	sp, #28
 80070a4:	af00      	add	r7, sp, #0
 80070a6:	60f8      	str	r0, [r7, #12]
 80070a8:	60b9      	str	r1, [r7, #8]
 80070aa:	607a      	str	r2, [r7, #4]
 80070ac:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80070ae:	68fb      	ldr	r3, [r7, #12]
 80070b0:	689b      	ldr	r3, [r3, #8]
 80070b2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80070b4:	697b      	ldr	r3, [r7, #20]
 80070b6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80070ba:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80070bc:	683b      	ldr	r3, [r7, #0]
 80070be:	021a      	lsls	r2, r3, #8
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	431a      	orrs	r2, r3
 80070c4:	68bb      	ldr	r3, [r7, #8]
 80070c6:	4313      	orrs	r3, r2
 80070c8:	697a      	ldr	r2, [r7, #20]
 80070ca:	4313      	orrs	r3, r2
 80070cc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80070ce:	68fb      	ldr	r3, [r7, #12]
 80070d0:	697a      	ldr	r2, [r7, #20]
 80070d2:	609a      	str	r2, [r3, #8]
}
 80070d4:	bf00      	nop
 80070d6:	371c      	adds	r7, #28
 80070d8:	46bd      	mov	sp, r7
 80070da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070de:	4770      	bx	lr

080070e0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80070e0:	b480      	push	{r7}
 80070e2:	b087      	sub	sp, #28
 80070e4:	af00      	add	r7, sp, #0
 80070e6:	60f8      	str	r0, [r7, #12]
 80070e8:	60b9      	str	r1, [r7, #8]
 80070ea:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80070ec:	68bb      	ldr	r3, [r7, #8]
 80070ee:	f003 031f 	and.w	r3, r3, #31
 80070f2:	2201      	movs	r2, #1
 80070f4:	fa02 f303 	lsl.w	r3, r2, r3
 80070f8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80070fa:	68fb      	ldr	r3, [r7, #12]
 80070fc:	6a1a      	ldr	r2, [r3, #32]
 80070fe:	697b      	ldr	r3, [r7, #20]
 8007100:	43db      	mvns	r3, r3
 8007102:	401a      	ands	r2, r3
 8007104:	68fb      	ldr	r3, [r7, #12]
 8007106:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8007108:	68fb      	ldr	r3, [r7, #12]
 800710a:	6a1a      	ldr	r2, [r3, #32]
 800710c:	68bb      	ldr	r3, [r7, #8]
 800710e:	f003 031f 	and.w	r3, r3, #31
 8007112:	6879      	ldr	r1, [r7, #4]
 8007114:	fa01 f303 	lsl.w	r3, r1, r3
 8007118:	431a      	orrs	r2, r3
 800711a:	68fb      	ldr	r3, [r7, #12]
 800711c:	621a      	str	r2, [r3, #32]
}
 800711e:	bf00      	nop
 8007120:	371c      	adds	r7, #28
 8007122:	46bd      	mov	sp, r7
 8007124:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007128:	4770      	bx	lr
	...

0800712c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800712c:	b480      	push	{r7}
 800712e:	b085      	sub	sp, #20
 8007130:	af00      	add	r7, sp, #0
 8007132:	6078      	str	r0, [r7, #4]
 8007134:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800713c:	2b01      	cmp	r3, #1
 800713e:	d101      	bne.n	8007144 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007140:	2302      	movs	r3, #2
 8007142:	e054      	b.n	80071ee <HAL_TIMEx_MasterConfigSynchronization+0xc2>
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	2201      	movs	r2, #1
 8007148:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	2202      	movs	r2, #2
 8007150:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	681b      	ldr	r3, [r3, #0]
 8007158:	685b      	ldr	r3, [r3, #4]
 800715a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	681b      	ldr	r3, [r3, #0]
 8007160:	689b      	ldr	r3, [r3, #8]
 8007162:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	681b      	ldr	r3, [r3, #0]
 8007168:	4a24      	ldr	r2, [pc, #144]	; (80071fc <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 800716a:	4293      	cmp	r3, r2
 800716c:	d108      	bne.n	8007180 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800716e:	68fb      	ldr	r3, [r7, #12]
 8007170:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8007174:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8007176:	683b      	ldr	r3, [r7, #0]
 8007178:	685b      	ldr	r3, [r3, #4]
 800717a:	68fa      	ldr	r2, [r7, #12]
 800717c:	4313      	orrs	r3, r2
 800717e:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007180:	68fb      	ldr	r3, [r7, #12]
 8007182:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007186:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007188:	683b      	ldr	r3, [r7, #0]
 800718a:	681b      	ldr	r3, [r3, #0]
 800718c:	68fa      	ldr	r2, [r7, #12]
 800718e:	4313      	orrs	r3, r2
 8007190:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007192:	687b      	ldr	r3, [r7, #4]
 8007194:	681b      	ldr	r3, [r3, #0]
 8007196:	68fa      	ldr	r2, [r7, #12]
 8007198:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800719a:	687b      	ldr	r3, [r7, #4]
 800719c:	681b      	ldr	r3, [r3, #0]
 800719e:	4a17      	ldr	r2, [pc, #92]	; (80071fc <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 80071a0:	4293      	cmp	r3, r2
 80071a2:	d00e      	beq.n	80071c2 <HAL_TIMEx_MasterConfigSynchronization+0x96>
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	681b      	ldr	r3, [r3, #0]
 80071a8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80071ac:	d009      	beq.n	80071c2 <HAL_TIMEx_MasterConfigSynchronization+0x96>
 80071ae:	687b      	ldr	r3, [r7, #4]
 80071b0:	681b      	ldr	r3, [r3, #0]
 80071b2:	4a13      	ldr	r2, [pc, #76]	; (8007200 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 80071b4:	4293      	cmp	r3, r2
 80071b6:	d004      	beq.n	80071c2 <HAL_TIMEx_MasterConfigSynchronization+0x96>
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	681b      	ldr	r3, [r3, #0]
 80071bc:	4a11      	ldr	r2, [pc, #68]	; (8007204 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 80071be:	4293      	cmp	r3, r2
 80071c0:	d10c      	bne.n	80071dc <HAL_TIMEx_MasterConfigSynchronization+0xb0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80071c2:	68bb      	ldr	r3, [r7, #8]
 80071c4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80071c8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80071ca:	683b      	ldr	r3, [r7, #0]
 80071cc:	689b      	ldr	r3, [r3, #8]
 80071ce:	68ba      	ldr	r2, [r7, #8]
 80071d0:	4313      	orrs	r3, r2
 80071d2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	681b      	ldr	r3, [r3, #0]
 80071d8:	68ba      	ldr	r2, [r7, #8]
 80071da:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	2201      	movs	r2, #1
 80071e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	2200      	movs	r2, #0
 80071e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80071ec:	2300      	movs	r3, #0
}
 80071ee:	4618      	mov	r0, r3
 80071f0:	3714      	adds	r7, #20
 80071f2:	46bd      	mov	sp, r7
 80071f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071f8:	4770      	bx	lr
 80071fa:	bf00      	nop
 80071fc:	40012c00 	.word	0x40012c00
 8007200:	40000400 	.word	0x40000400
 8007204:	40014000 	.word	0x40014000

08007208 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8007208:	b480      	push	{r7}
 800720a:	b085      	sub	sp, #20
 800720c:	af00      	add	r7, sp, #0
 800720e:	6078      	str	r0, [r7, #4]
 8007210:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8007212:	2300      	movs	r3, #0
 8007214:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800721c:	2b01      	cmp	r3, #1
 800721e:	d101      	bne.n	8007224 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8007220:	2302      	movs	r3, #2
 8007222:	e060      	b.n	80072e6 <HAL_TIMEx_ConfigBreakDeadTime+0xde>
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	2201      	movs	r2, #1
 8007228:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800722c:	68fb      	ldr	r3, [r7, #12]
 800722e:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8007232:	683b      	ldr	r3, [r7, #0]
 8007234:	68db      	ldr	r3, [r3, #12]
 8007236:	4313      	orrs	r3, r2
 8007238:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800723a:	68fb      	ldr	r3, [r7, #12]
 800723c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8007240:	683b      	ldr	r3, [r7, #0]
 8007242:	689b      	ldr	r3, [r3, #8]
 8007244:	4313      	orrs	r3, r2
 8007246:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8007248:	68fb      	ldr	r3, [r7, #12]
 800724a:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800724e:	683b      	ldr	r3, [r7, #0]
 8007250:	685b      	ldr	r3, [r3, #4]
 8007252:	4313      	orrs	r3, r2
 8007254:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8007256:	68fb      	ldr	r3, [r7, #12]
 8007258:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800725c:	683b      	ldr	r3, [r7, #0]
 800725e:	681b      	ldr	r3, [r3, #0]
 8007260:	4313      	orrs	r3, r2
 8007262:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8007264:	68fb      	ldr	r3, [r7, #12]
 8007266:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800726a:	683b      	ldr	r3, [r7, #0]
 800726c:	691b      	ldr	r3, [r3, #16]
 800726e:	4313      	orrs	r3, r2
 8007270:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8007272:	68fb      	ldr	r3, [r7, #12]
 8007274:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8007278:	683b      	ldr	r3, [r7, #0]
 800727a:	695b      	ldr	r3, [r3, #20]
 800727c:	4313      	orrs	r3, r2
 800727e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8007280:	68fb      	ldr	r3, [r7, #12]
 8007282:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8007286:	683b      	ldr	r3, [r7, #0]
 8007288:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800728a:	4313      	orrs	r3, r2
 800728c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800728e:	68fb      	ldr	r3, [r7, #12]
 8007290:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8007294:	683b      	ldr	r3, [r7, #0]
 8007296:	699b      	ldr	r3, [r3, #24]
 8007298:	041b      	lsls	r3, r3, #16
 800729a:	4313      	orrs	r3, r2
 800729c:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800729e:	687b      	ldr	r3, [r7, #4]
 80072a0:	681b      	ldr	r3, [r3, #0]
 80072a2:	4a14      	ldr	r2, [pc, #80]	; (80072f4 <HAL_TIMEx_ConfigBreakDeadTime+0xec>)
 80072a4:	4293      	cmp	r3, r2
 80072a6:	d115      	bne.n	80072d4 <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 80072a8:	68fb      	ldr	r3, [r7, #12]
 80072aa:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 80072ae:	683b      	ldr	r3, [r7, #0]
 80072b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80072b2:	051b      	lsls	r3, r3, #20
 80072b4:	4313      	orrs	r3, r2
 80072b6:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 80072b8:	68fb      	ldr	r3, [r7, #12]
 80072ba:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 80072be:	683b      	ldr	r3, [r7, #0]
 80072c0:	69db      	ldr	r3, [r3, #28]
 80072c2:	4313      	orrs	r3, r2
 80072c4:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 80072c6:	68fb      	ldr	r3, [r7, #12]
 80072c8:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 80072cc:	683b      	ldr	r3, [r7, #0]
 80072ce:	6a1b      	ldr	r3, [r3, #32]
 80072d0:	4313      	orrs	r3, r2
 80072d2:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	681b      	ldr	r3, [r3, #0]
 80072d8:	68fa      	ldr	r2, [r7, #12]
 80072da:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	2200      	movs	r2, #0
 80072e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80072e4:	2300      	movs	r3, #0
}
 80072e6:	4618      	mov	r0, r3
 80072e8:	3714      	adds	r7, #20
 80072ea:	46bd      	mov	sp, r7
 80072ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072f0:	4770      	bx	lr
 80072f2:	bf00      	nop
 80072f4:	40012c00 	.word	0x40012c00

080072f8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80072f8:	b580      	push	{r7, lr}
 80072fa:	b082      	sub	sp, #8
 80072fc:	af00      	add	r7, sp, #0
 80072fe:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	2b00      	cmp	r3, #0
 8007304:	d101      	bne.n	800730a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007306:	2301      	movs	r3, #1
 8007308:	e040      	b.n	800738c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800730a:	687b      	ldr	r3, [r7, #4]
 800730c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800730e:	2b00      	cmp	r3, #0
 8007310:	d106      	bne.n	8007320 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007312:	687b      	ldr	r3, [r7, #4]
 8007314:	2200      	movs	r2, #0
 8007316:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800731a:	6878      	ldr	r0, [r7, #4]
 800731c:	f7fa fedc 	bl	80020d8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	2224      	movs	r2, #36	; 0x24
 8007324:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	681b      	ldr	r3, [r3, #0]
 800732a:	681a      	ldr	r2, [r3, #0]
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	681b      	ldr	r3, [r3, #0]
 8007330:	f022 0201 	bic.w	r2, r2, #1
 8007334:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8007336:	6878      	ldr	r0, [r7, #4]
 8007338:	f000 f8c0 	bl	80074bc <UART_SetConfig>
 800733c:	4603      	mov	r3, r0
 800733e:	2b01      	cmp	r3, #1
 8007340:	d101      	bne.n	8007346 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8007342:	2301      	movs	r3, #1
 8007344:	e022      	b.n	800738c <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800734a:	2b00      	cmp	r3, #0
 800734c:	d002      	beq.n	8007354 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800734e:	6878      	ldr	r0, [r7, #4]
 8007350:	f000 fb3a 	bl	80079c8 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	681b      	ldr	r3, [r3, #0]
 8007358:	685a      	ldr	r2, [r3, #4]
 800735a:	687b      	ldr	r3, [r7, #4]
 800735c:	681b      	ldr	r3, [r3, #0]
 800735e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8007362:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	681b      	ldr	r3, [r3, #0]
 8007368:	689a      	ldr	r2, [r3, #8]
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	681b      	ldr	r3, [r3, #0]
 800736e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8007372:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	681b      	ldr	r3, [r3, #0]
 8007378:	681a      	ldr	r2, [r3, #0]
 800737a:	687b      	ldr	r3, [r7, #4]
 800737c:	681b      	ldr	r3, [r3, #0]
 800737e:	f042 0201 	orr.w	r2, r2, #1
 8007382:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8007384:	6878      	ldr	r0, [r7, #4]
 8007386:	f000 fbc1 	bl	8007b0c <UART_CheckIdleState>
 800738a:	4603      	mov	r3, r0
}
 800738c:	4618      	mov	r0, r3
 800738e:	3708      	adds	r7, #8
 8007390:	46bd      	mov	sp, r7
 8007392:	bd80      	pop	{r7, pc}

08007394 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007394:	b580      	push	{r7, lr}
 8007396:	b08a      	sub	sp, #40	; 0x28
 8007398:	af02      	add	r7, sp, #8
 800739a:	60f8      	str	r0, [r7, #12]
 800739c:	60b9      	str	r1, [r7, #8]
 800739e:	603b      	str	r3, [r7, #0]
 80073a0:	4613      	mov	r3, r2
 80073a2:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80073a4:	68fb      	ldr	r3, [r7, #12]
 80073a6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80073a8:	2b20      	cmp	r3, #32
 80073aa:	f040 8082 	bne.w	80074b2 <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 80073ae:	68bb      	ldr	r3, [r7, #8]
 80073b0:	2b00      	cmp	r3, #0
 80073b2:	d002      	beq.n	80073ba <HAL_UART_Transmit+0x26>
 80073b4:	88fb      	ldrh	r3, [r7, #6]
 80073b6:	2b00      	cmp	r3, #0
 80073b8:	d101      	bne.n	80073be <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 80073ba:	2301      	movs	r3, #1
 80073bc:	e07a      	b.n	80074b4 <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 80073be:	68fb      	ldr	r3, [r7, #12]
 80073c0:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 80073c4:	2b01      	cmp	r3, #1
 80073c6:	d101      	bne.n	80073cc <HAL_UART_Transmit+0x38>
 80073c8:	2302      	movs	r3, #2
 80073ca:	e073      	b.n	80074b4 <HAL_UART_Transmit+0x120>
 80073cc:	68fb      	ldr	r3, [r7, #12]
 80073ce:	2201      	movs	r2, #1
 80073d0:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80073d4:	68fb      	ldr	r3, [r7, #12]
 80073d6:	2200      	movs	r2, #0
 80073d8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80073dc:	68fb      	ldr	r3, [r7, #12]
 80073de:	2221      	movs	r2, #33	; 0x21
 80073e0:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80073e2:	f7fb f887 	bl	80024f4 <HAL_GetTick>
 80073e6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80073e8:	68fb      	ldr	r3, [r7, #12]
 80073ea:	88fa      	ldrh	r2, [r7, #6]
 80073ec:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 80073f0:	68fb      	ldr	r3, [r7, #12]
 80073f2:	88fa      	ldrh	r2, [r7, #6]
 80073f4:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80073f8:	68fb      	ldr	r3, [r7, #12]
 80073fa:	689b      	ldr	r3, [r3, #8]
 80073fc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007400:	d108      	bne.n	8007414 <HAL_UART_Transmit+0x80>
 8007402:	68fb      	ldr	r3, [r7, #12]
 8007404:	691b      	ldr	r3, [r3, #16]
 8007406:	2b00      	cmp	r3, #0
 8007408:	d104      	bne.n	8007414 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 800740a:	2300      	movs	r3, #0
 800740c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800740e:	68bb      	ldr	r3, [r7, #8]
 8007410:	61bb      	str	r3, [r7, #24]
 8007412:	e003      	b.n	800741c <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 8007414:	68bb      	ldr	r3, [r7, #8]
 8007416:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8007418:	2300      	movs	r3, #0
 800741a:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 800741c:	68fb      	ldr	r3, [r7, #12]
 800741e:	2200      	movs	r2, #0
 8007420:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 8007424:	e02d      	b.n	8007482 <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8007426:	683b      	ldr	r3, [r7, #0]
 8007428:	9300      	str	r3, [sp, #0]
 800742a:	697b      	ldr	r3, [r7, #20]
 800742c:	2200      	movs	r2, #0
 800742e:	2180      	movs	r1, #128	; 0x80
 8007430:	68f8      	ldr	r0, [r7, #12]
 8007432:	f000 fbb4 	bl	8007b9e <UART_WaitOnFlagUntilTimeout>
 8007436:	4603      	mov	r3, r0
 8007438:	2b00      	cmp	r3, #0
 800743a:	d001      	beq.n	8007440 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 800743c:	2303      	movs	r3, #3
 800743e:	e039      	b.n	80074b4 <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 8007440:	69fb      	ldr	r3, [r7, #28]
 8007442:	2b00      	cmp	r3, #0
 8007444:	d10b      	bne.n	800745e <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8007446:	69bb      	ldr	r3, [r7, #24]
 8007448:	881a      	ldrh	r2, [r3, #0]
 800744a:	68fb      	ldr	r3, [r7, #12]
 800744c:	681b      	ldr	r3, [r3, #0]
 800744e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007452:	b292      	uxth	r2, r2
 8007454:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8007456:	69bb      	ldr	r3, [r7, #24]
 8007458:	3302      	adds	r3, #2
 800745a:	61bb      	str	r3, [r7, #24]
 800745c:	e008      	b.n	8007470 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800745e:	69fb      	ldr	r3, [r7, #28]
 8007460:	781a      	ldrb	r2, [r3, #0]
 8007462:	68fb      	ldr	r3, [r7, #12]
 8007464:	681b      	ldr	r3, [r3, #0]
 8007466:	b292      	uxth	r2, r2
 8007468:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800746a:	69fb      	ldr	r3, [r7, #28]
 800746c:	3301      	adds	r3, #1
 800746e:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8007470:	68fb      	ldr	r3, [r7, #12]
 8007472:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8007476:	b29b      	uxth	r3, r3
 8007478:	3b01      	subs	r3, #1
 800747a:	b29a      	uxth	r2, r3
 800747c:	68fb      	ldr	r3, [r7, #12]
 800747e:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8007482:	68fb      	ldr	r3, [r7, #12]
 8007484:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8007488:	b29b      	uxth	r3, r3
 800748a:	2b00      	cmp	r3, #0
 800748c:	d1cb      	bne.n	8007426 <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800748e:	683b      	ldr	r3, [r7, #0]
 8007490:	9300      	str	r3, [sp, #0]
 8007492:	697b      	ldr	r3, [r7, #20]
 8007494:	2200      	movs	r2, #0
 8007496:	2140      	movs	r1, #64	; 0x40
 8007498:	68f8      	ldr	r0, [r7, #12]
 800749a:	f000 fb80 	bl	8007b9e <UART_WaitOnFlagUntilTimeout>
 800749e:	4603      	mov	r3, r0
 80074a0:	2b00      	cmp	r3, #0
 80074a2:	d001      	beq.n	80074a8 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 80074a4:	2303      	movs	r3, #3
 80074a6:	e005      	b.n	80074b4 <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80074a8:	68fb      	ldr	r3, [r7, #12]
 80074aa:	2220      	movs	r2, #32
 80074ac:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 80074ae:	2300      	movs	r3, #0
 80074b0:	e000      	b.n	80074b4 <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 80074b2:	2302      	movs	r3, #2
  }
}
 80074b4:	4618      	mov	r0, r3
 80074b6:	3720      	adds	r7, #32
 80074b8:	46bd      	mov	sp, r7
 80074ba:	bd80      	pop	{r7, pc}

080074bc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80074bc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80074c0:	b08a      	sub	sp, #40	; 0x28
 80074c2:	af00      	add	r7, sp, #0
 80074c4:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80074c6:	2300      	movs	r3, #0
 80074c8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80074cc:	68fb      	ldr	r3, [r7, #12]
 80074ce:	689a      	ldr	r2, [r3, #8]
 80074d0:	68fb      	ldr	r3, [r7, #12]
 80074d2:	691b      	ldr	r3, [r3, #16]
 80074d4:	431a      	orrs	r2, r3
 80074d6:	68fb      	ldr	r3, [r7, #12]
 80074d8:	695b      	ldr	r3, [r3, #20]
 80074da:	431a      	orrs	r2, r3
 80074dc:	68fb      	ldr	r3, [r7, #12]
 80074de:	69db      	ldr	r3, [r3, #28]
 80074e0:	4313      	orrs	r3, r2
 80074e2:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80074e4:	68fb      	ldr	r3, [r7, #12]
 80074e6:	681b      	ldr	r3, [r3, #0]
 80074e8:	681a      	ldr	r2, [r3, #0]
 80074ea:	4ba5      	ldr	r3, [pc, #660]	; (8007780 <UART_SetConfig+0x2c4>)
 80074ec:	4013      	ands	r3, r2
 80074ee:	68fa      	ldr	r2, [r7, #12]
 80074f0:	6812      	ldr	r2, [r2, #0]
 80074f2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80074f4:	430b      	orrs	r3, r1
 80074f6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80074f8:	68fb      	ldr	r3, [r7, #12]
 80074fa:	681b      	ldr	r3, [r3, #0]
 80074fc:	685b      	ldr	r3, [r3, #4]
 80074fe:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8007502:	68fb      	ldr	r3, [r7, #12]
 8007504:	68da      	ldr	r2, [r3, #12]
 8007506:	68fb      	ldr	r3, [r7, #12]
 8007508:	681b      	ldr	r3, [r3, #0]
 800750a:	430a      	orrs	r2, r1
 800750c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800750e:	68fb      	ldr	r3, [r7, #12]
 8007510:	699b      	ldr	r3, [r3, #24]
 8007512:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8007514:	68fb      	ldr	r3, [r7, #12]
 8007516:	681b      	ldr	r3, [r3, #0]
 8007518:	4a9a      	ldr	r2, [pc, #616]	; (8007784 <UART_SetConfig+0x2c8>)
 800751a:	4293      	cmp	r3, r2
 800751c:	d004      	beq.n	8007528 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800751e:	68fb      	ldr	r3, [r7, #12]
 8007520:	6a1b      	ldr	r3, [r3, #32]
 8007522:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007524:	4313      	orrs	r3, r2
 8007526:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8007528:	68fb      	ldr	r3, [r7, #12]
 800752a:	681b      	ldr	r3, [r3, #0]
 800752c:	689b      	ldr	r3, [r3, #8]
 800752e:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8007532:	68fb      	ldr	r3, [r7, #12]
 8007534:	681b      	ldr	r3, [r3, #0]
 8007536:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007538:	430a      	orrs	r2, r1
 800753a:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800753c:	68fb      	ldr	r3, [r7, #12]
 800753e:	681b      	ldr	r3, [r3, #0]
 8007540:	4a91      	ldr	r2, [pc, #580]	; (8007788 <UART_SetConfig+0x2cc>)
 8007542:	4293      	cmp	r3, r2
 8007544:	d126      	bne.n	8007594 <UART_SetConfig+0xd8>
 8007546:	4b91      	ldr	r3, [pc, #580]	; (800778c <UART_SetConfig+0x2d0>)
 8007548:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800754c:	f003 0303 	and.w	r3, r3, #3
 8007550:	2b03      	cmp	r3, #3
 8007552:	d81b      	bhi.n	800758c <UART_SetConfig+0xd0>
 8007554:	a201      	add	r2, pc, #4	; (adr r2, 800755c <UART_SetConfig+0xa0>)
 8007556:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800755a:	bf00      	nop
 800755c:	0800756d 	.word	0x0800756d
 8007560:	0800757d 	.word	0x0800757d
 8007564:	08007575 	.word	0x08007575
 8007568:	08007585 	.word	0x08007585
 800756c:	2301      	movs	r3, #1
 800756e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007572:	e0d6      	b.n	8007722 <UART_SetConfig+0x266>
 8007574:	2302      	movs	r3, #2
 8007576:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800757a:	e0d2      	b.n	8007722 <UART_SetConfig+0x266>
 800757c:	2304      	movs	r3, #4
 800757e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007582:	e0ce      	b.n	8007722 <UART_SetConfig+0x266>
 8007584:	2308      	movs	r3, #8
 8007586:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800758a:	e0ca      	b.n	8007722 <UART_SetConfig+0x266>
 800758c:	2310      	movs	r3, #16
 800758e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007592:	e0c6      	b.n	8007722 <UART_SetConfig+0x266>
 8007594:	68fb      	ldr	r3, [r7, #12]
 8007596:	681b      	ldr	r3, [r3, #0]
 8007598:	4a7d      	ldr	r2, [pc, #500]	; (8007790 <UART_SetConfig+0x2d4>)
 800759a:	4293      	cmp	r3, r2
 800759c:	d138      	bne.n	8007610 <UART_SetConfig+0x154>
 800759e:	4b7b      	ldr	r3, [pc, #492]	; (800778c <UART_SetConfig+0x2d0>)
 80075a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80075a4:	f003 030c 	and.w	r3, r3, #12
 80075a8:	2b0c      	cmp	r3, #12
 80075aa:	d82d      	bhi.n	8007608 <UART_SetConfig+0x14c>
 80075ac:	a201      	add	r2, pc, #4	; (adr r2, 80075b4 <UART_SetConfig+0xf8>)
 80075ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80075b2:	bf00      	nop
 80075b4:	080075e9 	.word	0x080075e9
 80075b8:	08007609 	.word	0x08007609
 80075bc:	08007609 	.word	0x08007609
 80075c0:	08007609 	.word	0x08007609
 80075c4:	080075f9 	.word	0x080075f9
 80075c8:	08007609 	.word	0x08007609
 80075cc:	08007609 	.word	0x08007609
 80075d0:	08007609 	.word	0x08007609
 80075d4:	080075f1 	.word	0x080075f1
 80075d8:	08007609 	.word	0x08007609
 80075dc:	08007609 	.word	0x08007609
 80075e0:	08007609 	.word	0x08007609
 80075e4:	08007601 	.word	0x08007601
 80075e8:	2300      	movs	r3, #0
 80075ea:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80075ee:	e098      	b.n	8007722 <UART_SetConfig+0x266>
 80075f0:	2302      	movs	r3, #2
 80075f2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80075f6:	e094      	b.n	8007722 <UART_SetConfig+0x266>
 80075f8:	2304      	movs	r3, #4
 80075fa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80075fe:	e090      	b.n	8007722 <UART_SetConfig+0x266>
 8007600:	2308      	movs	r3, #8
 8007602:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007606:	e08c      	b.n	8007722 <UART_SetConfig+0x266>
 8007608:	2310      	movs	r3, #16
 800760a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800760e:	e088      	b.n	8007722 <UART_SetConfig+0x266>
 8007610:	68fb      	ldr	r3, [r7, #12]
 8007612:	681b      	ldr	r3, [r3, #0]
 8007614:	4a5f      	ldr	r2, [pc, #380]	; (8007794 <UART_SetConfig+0x2d8>)
 8007616:	4293      	cmp	r3, r2
 8007618:	d125      	bne.n	8007666 <UART_SetConfig+0x1aa>
 800761a:	4b5c      	ldr	r3, [pc, #368]	; (800778c <UART_SetConfig+0x2d0>)
 800761c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007620:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8007624:	2b30      	cmp	r3, #48	; 0x30
 8007626:	d016      	beq.n	8007656 <UART_SetConfig+0x19a>
 8007628:	2b30      	cmp	r3, #48	; 0x30
 800762a:	d818      	bhi.n	800765e <UART_SetConfig+0x1a2>
 800762c:	2b20      	cmp	r3, #32
 800762e:	d00a      	beq.n	8007646 <UART_SetConfig+0x18a>
 8007630:	2b20      	cmp	r3, #32
 8007632:	d814      	bhi.n	800765e <UART_SetConfig+0x1a2>
 8007634:	2b00      	cmp	r3, #0
 8007636:	d002      	beq.n	800763e <UART_SetConfig+0x182>
 8007638:	2b10      	cmp	r3, #16
 800763a:	d008      	beq.n	800764e <UART_SetConfig+0x192>
 800763c:	e00f      	b.n	800765e <UART_SetConfig+0x1a2>
 800763e:	2300      	movs	r3, #0
 8007640:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007644:	e06d      	b.n	8007722 <UART_SetConfig+0x266>
 8007646:	2302      	movs	r3, #2
 8007648:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800764c:	e069      	b.n	8007722 <UART_SetConfig+0x266>
 800764e:	2304      	movs	r3, #4
 8007650:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007654:	e065      	b.n	8007722 <UART_SetConfig+0x266>
 8007656:	2308      	movs	r3, #8
 8007658:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800765c:	e061      	b.n	8007722 <UART_SetConfig+0x266>
 800765e:	2310      	movs	r3, #16
 8007660:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007664:	e05d      	b.n	8007722 <UART_SetConfig+0x266>
 8007666:	68fb      	ldr	r3, [r7, #12]
 8007668:	681b      	ldr	r3, [r3, #0]
 800766a:	4a4b      	ldr	r2, [pc, #300]	; (8007798 <UART_SetConfig+0x2dc>)
 800766c:	4293      	cmp	r3, r2
 800766e:	d125      	bne.n	80076bc <UART_SetConfig+0x200>
 8007670:	4b46      	ldr	r3, [pc, #280]	; (800778c <UART_SetConfig+0x2d0>)
 8007672:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007676:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800767a:	2bc0      	cmp	r3, #192	; 0xc0
 800767c:	d016      	beq.n	80076ac <UART_SetConfig+0x1f0>
 800767e:	2bc0      	cmp	r3, #192	; 0xc0
 8007680:	d818      	bhi.n	80076b4 <UART_SetConfig+0x1f8>
 8007682:	2b80      	cmp	r3, #128	; 0x80
 8007684:	d00a      	beq.n	800769c <UART_SetConfig+0x1e0>
 8007686:	2b80      	cmp	r3, #128	; 0x80
 8007688:	d814      	bhi.n	80076b4 <UART_SetConfig+0x1f8>
 800768a:	2b00      	cmp	r3, #0
 800768c:	d002      	beq.n	8007694 <UART_SetConfig+0x1d8>
 800768e:	2b40      	cmp	r3, #64	; 0x40
 8007690:	d008      	beq.n	80076a4 <UART_SetConfig+0x1e8>
 8007692:	e00f      	b.n	80076b4 <UART_SetConfig+0x1f8>
 8007694:	2300      	movs	r3, #0
 8007696:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800769a:	e042      	b.n	8007722 <UART_SetConfig+0x266>
 800769c:	2302      	movs	r3, #2
 800769e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80076a2:	e03e      	b.n	8007722 <UART_SetConfig+0x266>
 80076a4:	2304      	movs	r3, #4
 80076a6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80076aa:	e03a      	b.n	8007722 <UART_SetConfig+0x266>
 80076ac:	2308      	movs	r3, #8
 80076ae:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80076b2:	e036      	b.n	8007722 <UART_SetConfig+0x266>
 80076b4:	2310      	movs	r3, #16
 80076b6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80076ba:	e032      	b.n	8007722 <UART_SetConfig+0x266>
 80076bc:	68fb      	ldr	r3, [r7, #12]
 80076be:	681b      	ldr	r3, [r3, #0]
 80076c0:	4a30      	ldr	r2, [pc, #192]	; (8007784 <UART_SetConfig+0x2c8>)
 80076c2:	4293      	cmp	r3, r2
 80076c4:	d12a      	bne.n	800771c <UART_SetConfig+0x260>
 80076c6:	4b31      	ldr	r3, [pc, #196]	; (800778c <UART_SetConfig+0x2d0>)
 80076c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80076cc:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80076d0:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80076d4:	d01a      	beq.n	800770c <UART_SetConfig+0x250>
 80076d6:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80076da:	d81b      	bhi.n	8007714 <UART_SetConfig+0x258>
 80076dc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80076e0:	d00c      	beq.n	80076fc <UART_SetConfig+0x240>
 80076e2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80076e6:	d815      	bhi.n	8007714 <UART_SetConfig+0x258>
 80076e8:	2b00      	cmp	r3, #0
 80076ea:	d003      	beq.n	80076f4 <UART_SetConfig+0x238>
 80076ec:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80076f0:	d008      	beq.n	8007704 <UART_SetConfig+0x248>
 80076f2:	e00f      	b.n	8007714 <UART_SetConfig+0x258>
 80076f4:	2300      	movs	r3, #0
 80076f6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80076fa:	e012      	b.n	8007722 <UART_SetConfig+0x266>
 80076fc:	2302      	movs	r3, #2
 80076fe:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007702:	e00e      	b.n	8007722 <UART_SetConfig+0x266>
 8007704:	2304      	movs	r3, #4
 8007706:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800770a:	e00a      	b.n	8007722 <UART_SetConfig+0x266>
 800770c:	2308      	movs	r3, #8
 800770e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007712:	e006      	b.n	8007722 <UART_SetConfig+0x266>
 8007714:	2310      	movs	r3, #16
 8007716:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800771a:	e002      	b.n	8007722 <UART_SetConfig+0x266>
 800771c:	2310      	movs	r3, #16
 800771e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8007722:	68fb      	ldr	r3, [r7, #12]
 8007724:	681b      	ldr	r3, [r3, #0]
 8007726:	4a17      	ldr	r2, [pc, #92]	; (8007784 <UART_SetConfig+0x2c8>)
 8007728:	4293      	cmp	r3, r2
 800772a:	f040 808b 	bne.w	8007844 <UART_SetConfig+0x388>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800772e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8007732:	2b08      	cmp	r3, #8
 8007734:	d834      	bhi.n	80077a0 <UART_SetConfig+0x2e4>
 8007736:	a201      	add	r2, pc, #4	; (adr r2, 800773c <UART_SetConfig+0x280>)
 8007738:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800773c:	08007761 	.word	0x08007761
 8007740:	080077a1 	.word	0x080077a1
 8007744:	08007769 	.word	0x08007769
 8007748:	080077a1 	.word	0x080077a1
 800774c:	0800776f 	.word	0x0800776f
 8007750:	080077a1 	.word	0x080077a1
 8007754:	080077a1 	.word	0x080077a1
 8007758:	080077a1 	.word	0x080077a1
 800775c:	08007777 	.word	0x08007777
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007760:	f7fd fb94 	bl	8004e8c <HAL_RCC_GetPCLK1Freq>
 8007764:	61f8      	str	r0, [r7, #28]
        break;
 8007766:	e021      	b.n	80077ac <UART_SetConfig+0x2f0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007768:	4b0c      	ldr	r3, [pc, #48]	; (800779c <UART_SetConfig+0x2e0>)
 800776a:	61fb      	str	r3, [r7, #28]
        break;
 800776c:	e01e      	b.n	80077ac <UART_SetConfig+0x2f0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800776e:	f7fd faf5 	bl	8004d5c <HAL_RCC_GetSysClockFreq>
 8007772:	61f8      	str	r0, [r7, #28]
        break;
 8007774:	e01a      	b.n	80077ac <UART_SetConfig+0x2f0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007776:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800777a:	61fb      	str	r3, [r7, #28]
        break;
 800777c:	e016      	b.n	80077ac <UART_SetConfig+0x2f0>
 800777e:	bf00      	nop
 8007780:	efff69f3 	.word	0xefff69f3
 8007784:	40008000 	.word	0x40008000
 8007788:	40013800 	.word	0x40013800
 800778c:	40021000 	.word	0x40021000
 8007790:	40004400 	.word	0x40004400
 8007794:	40004800 	.word	0x40004800
 8007798:	40004c00 	.word	0x40004c00
 800779c:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 80077a0:	2300      	movs	r3, #0
 80077a2:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80077a4:	2301      	movs	r3, #1
 80077a6:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 80077aa:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80077ac:	69fb      	ldr	r3, [r7, #28]
 80077ae:	2b00      	cmp	r3, #0
 80077b0:	f000 80fa 	beq.w	80079a8 <UART_SetConfig+0x4ec>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80077b4:	68fb      	ldr	r3, [r7, #12]
 80077b6:	685a      	ldr	r2, [r3, #4]
 80077b8:	4613      	mov	r3, r2
 80077ba:	005b      	lsls	r3, r3, #1
 80077bc:	4413      	add	r3, r2
 80077be:	69fa      	ldr	r2, [r7, #28]
 80077c0:	429a      	cmp	r2, r3
 80077c2:	d305      	bcc.n	80077d0 <UART_SetConfig+0x314>
          (pclk > (4096U * huart->Init.BaudRate)))
 80077c4:	68fb      	ldr	r3, [r7, #12]
 80077c6:	685b      	ldr	r3, [r3, #4]
 80077c8:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80077ca:	69fa      	ldr	r2, [r7, #28]
 80077cc:	429a      	cmp	r2, r3
 80077ce:	d903      	bls.n	80077d8 <UART_SetConfig+0x31c>
      {
        ret = HAL_ERROR;
 80077d0:	2301      	movs	r3, #1
 80077d2:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80077d6:	e0e7      	b.n	80079a8 <UART_SetConfig+0x4ec>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 80077d8:	69fb      	ldr	r3, [r7, #28]
 80077da:	2200      	movs	r2, #0
 80077dc:	461c      	mov	r4, r3
 80077de:	4615      	mov	r5, r2
 80077e0:	f04f 0200 	mov.w	r2, #0
 80077e4:	f04f 0300 	mov.w	r3, #0
 80077e8:	022b      	lsls	r3, r5, #8
 80077ea:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 80077ee:	0222      	lsls	r2, r4, #8
 80077f0:	68f9      	ldr	r1, [r7, #12]
 80077f2:	6849      	ldr	r1, [r1, #4]
 80077f4:	0849      	lsrs	r1, r1, #1
 80077f6:	2000      	movs	r0, #0
 80077f8:	4688      	mov	r8, r1
 80077fa:	4681      	mov	r9, r0
 80077fc:	eb12 0a08 	adds.w	sl, r2, r8
 8007800:	eb43 0b09 	adc.w	fp, r3, r9
 8007804:	68fb      	ldr	r3, [r7, #12]
 8007806:	685b      	ldr	r3, [r3, #4]
 8007808:	2200      	movs	r2, #0
 800780a:	603b      	str	r3, [r7, #0]
 800780c:	607a      	str	r2, [r7, #4]
 800780e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007812:	4650      	mov	r0, sl
 8007814:	4659      	mov	r1, fp
 8007816:	f7f9 fa3f 	bl	8000c98 <__aeabi_uldivmod>
 800781a:	4602      	mov	r2, r0
 800781c:	460b      	mov	r3, r1
 800781e:	4613      	mov	r3, r2
 8007820:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8007822:	69bb      	ldr	r3, [r7, #24]
 8007824:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007828:	d308      	bcc.n	800783c <UART_SetConfig+0x380>
 800782a:	69bb      	ldr	r3, [r7, #24]
 800782c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007830:	d204      	bcs.n	800783c <UART_SetConfig+0x380>
        {
          huart->Instance->BRR = usartdiv;
 8007832:	68fb      	ldr	r3, [r7, #12]
 8007834:	681b      	ldr	r3, [r3, #0]
 8007836:	69ba      	ldr	r2, [r7, #24]
 8007838:	60da      	str	r2, [r3, #12]
 800783a:	e0b5      	b.n	80079a8 <UART_SetConfig+0x4ec>
        }
        else
        {
          ret = HAL_ERROR;
 800783c:	2301      	movs	r3, #1
 800783e:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8007842:	e0b1      	b.n	80079a8 <UART_SetConfig+0x4ec>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007844:	68fb      	ldr	r3, [r7, #12]
 8007846:	69db      	ldr	r3, [r3, #28]
 8007848:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800784c:	d15d      	bne.n	800790a <UART_SetConfig+0x44e>
  {
    switch (clocksource)
 800784e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8007852:	2b08      	cmp	r3, #8
 8007854:	d827      	bhi.n	80078a6 <UART_SetConfig+0x3ea>
 8007856:	a201      	add	r2, pc, #4	; (adr r2, 800785c <UART_SetConfig+0x3a0>)
 8007858:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800785c:	08007881 	.word	0x08007881
 8007860:	08007889 	.word	0x08007889
 8007864:	08007891 	.word	0x08007891
 8007868:	080078a7 	.word	0x080078a7
 800786c:	08007897 	.word	0x08007897
 8007870:	080078a7 	.word	0x080078a7
 8007874:	080078a7 	.word	0x080078a7
 8007878:	080078a7 	.word	0x080078a7
 800787c:	0800789f 	.word	0x0800789f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007880:	f7fd fb04 	bl	8004e8c <HAL_RCC_GetPCLK1Freq>
 8007884:	61f8      	str	r0, [r7, #28]
        break;
 8007886:	e014      	b.n	80078b2 <UART_SetConfig+0x3f6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007888:	f7fd fb16 	bl	8004eb8 <HAL_RCC_GetPCLK2Freq>
 800788c:	61f8      	str	r0, [r7, #28]
        break;
 800788e:	e010      	b.n	80078b2 <UART_SetConfig+0x3f6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007890:	4b4c      	ldr	r3, [pc, #304]	; (80079c4 <UART_SetConfig+0x508>)
 8007892:	61fb      	str	r3, [r7, #28]
        break;
 8007894:	e00d      	b.n	80078b2 <UART_SetConfig+0x3f6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007896:	f7fd fa61 	bl	8004d5c <HAL_RCC_GetSysClockFreq>
 800789a:	61f8      	str	r0, [r7, #28]
        break;
 800789c:	e009      	b.n	80078b2 <UART_SetConfig+0x3f6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800789e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80078a2:	61fb      	str	r3, [r7, #28]
        break;
 80078a4:	e005      	b.n	80078b2 <UART_SetConfig+0x3f6>
      default:
        pclk = 0U;
 80078a6:	2300      	movs	r3, #0
 80078a8:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80078aa:	2301      	movs	r3, #1
 80078ac:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 80078b0:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80078b2:	69fb      	ldr	r3, [r7, #28]
 80078b4:	2b00      	cmp	r3, #0
 80078b6:	d077      	beq.n	80079a8 <UART_SetConfig+0x4ec>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80078b8:	69fb      	ldr	r3, [r7, #28]
 80078ba:	005a      	lsls	r2, r3, #1
 80078bc:	68fb      	ldr	r3, [r7, #12]
 80078be:	685b      	ldr	r3, [r3, #4]
 80078c0:	085b      	lsrs	r3, r3, #1
 80078c2:	441a      	add	r2, r3
 80078c4:	68fb      	ldr	r3, [r7, #12]
 80078c6:	685b      	ldr	r3, [r3, #4]
 80078c8:	fbb2 f3f3 	udiv	r3, r2, r3
 80078cc:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80078ce:	69bb      	ldr	r3, [r7, #24]
 80078d0:	2b0f      	cmp	r3, #15
 80078d2:	d916      	bls.n	8007902 <UART_SetConfig+0x446>
 80078d4:	69bb      	ldr	r3, [r7, #24]
 80078d6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80078da:	d212      	bcs.n	8007902 <UART_SetConfig+0x446>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80078dc:	69bb      	ldr	r3, [r7, #24]
 80078de:	b29b      	uxth	r3, r3
 80078e0:	f023 030f 	bic.w	r3, r3, #15
 80078e4:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80078e6:	69bb      	ldr	r3, [r7, #24]
 80078e8:	085b      	lsrs	r3, r3, #1
 80078ea:	b29b      	uxth	r3, r3
 80078ec:	f003 0307 	and.w	r3, r3, #7
 80078f0:	b29a      	uxth	r2, r3
 80078f2:	8afb      	ldrh	r3, [r7, #22]
 80078f4:	4313      	orrs	r3, r2
 80078f6:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 80078f8:	68fb      	ldr	r3, [r7, #12]
 80078fa:	681b      	ldr	r3, [r3, #0]
 80078fc:	8afa      	ldrh	r2, [r7, #22]
 80078fe:	60da      	str	r2, [r3, #12]
 8007900:	e052      	b.n	80079a8 <UART_SetConfig+0x4ec>
      }
      else
      {
        ret = HAL_ERROR;
 8007902:	2301      	movs	r3, #1
 8007904:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8007908:	e04e      	b.n	80079a8 <UART_SetConfig+0x4ec>
      }
    }
  }
  else
  {
    switch (clocksource)
 800790a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800790e:	2b08      	cmp	r3, #8
 8007910:	d827      	bhi.n	8007962 <UART_SetConfig+0x4a6>
 8007912:	a201      	add	r2, pc, #4	; (adr r2, 8007918 <UART_SetConfig+0x45c>)
 8007914:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007918:	0800793d 	.word	0x0800793d
 800791c:	08007945 	.word	0x08007945
 8007920:	0800794d 	.word	0x0800794d
 8007924:	08007963 	.word	0x08007963
 8007928:	08007953 	.word	0x08007953
 800792c:	08007963 	.word	0x08007963
 8007930:	08007963 	.word	0x08007963
 8007934:	08007963 	.word	0x08007963
 8007938:	0800795b 	.word	0x0800795b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800793c:	f7fd faa6 	bl	8004e8c <HAL_RCC_GetPCLK1Freq>
 8007940:	61f8      	str	r0, [r7, #28]
        break;
 8007942:	e014      	b.n	800796e <UART_SetConfig+0x4b2>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007944:	f7fd fab8 	bl	8004eb8 <HAL_RCC_GetPCLK2Freq>
 8007948:	61f8      	str	r0, [r7, #28]
        break;
 800794a:	e010      	b.n	800796e <UART_SetConfig+0x4b2>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800794c:	4b1d      	ldr	r3, [pc, #116]	; (80079c4 <UART_SetConfig+0x508>)
 800794e:	61fb      	str	r3, [r7, #28]
        break;
 8007950:	e00d      	b.n	800796e <UART_SetConfig+0x4b2>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007952:	f7fd fa03 	bl	8004d5c <HAL_RCC_GetSysClockFreq>
 8007956:	61f8      	str	r0, [r7, #28]
        break;
 8007958:	e009      	b.n	800796e <UART_SetConfig+0x4b2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800795a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800795e:	61fb      	str	r3, [r7, #28]
        break;
 8007960:	e005      	b.n	800796e <UART_SetConfig+0x4b2>
      default:
        pclk = 0U;
 8007962:	2300      	movs	r3, #0
 8007964:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8007966:	2301      	movs	r3, #1
 8007968:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 800796c:	bf00      	nop
    }

    if (pclk != 0U)
 800796e:	69fb      	ldr	r3, [r7, #28]
 8007970:	2b00      	cmp	r3, #0
 8007972:	d019      	beq.n	80079a8 <UART_SetConfig+0x4ec>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8007974:	68fb      	ldr	r3, [r7, #12]
 8007976:	685b      	ldr	r3, [r3, #4]
 8007978:	085a      	lsrs	r2, r3, #1
 800797a:	69fb      	ldr	r3, [r7, #28]
 800797c:	441a      	add	r2, r3
 800797e:	68fb      	ldr	r3, [r7, #12]
 8007980:	685b      	ldr	r3, [r3, #4]
 8007982:	fbb2 f3f3 	udiv	r3, r2, r3
 8007986:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007988:	69bb      	ldr	r3, [r7, #24]
 800798a:	2b0f      	cmp	r3, #15
 800798c:	d909      	bls.n	80079a2 <UART_SetConfig+0x4e6>
 800798e:	69bb      	ldr	r3, [r7, #24]
 8007990:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007994:	d205      	bcs.n	80079a2 <UART_SetConfig+0x4e6>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8007996:	69bb      	ldr	r3, [r7, #24]
 8007998:	b29a      	uxth	r2, r3
 800799a:	68fb      	ldr	r3, [r7, #12]
 800799c:	681b      	ldr	r3, [r3, #0]
 800799e:	60da      	str	r2, [r3, #12]
 80079a0:	e002      	b.n	80079a8 <UART_SetConfig+0x4ec>
      }
      else
      {
        ret = HAL_ERROR;
 80079a2:	2301      	movs	r3, #1
 80079a4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80079a8:	68fb      	ldr	r3, [r7, #12]
 80079aa:	2200      	movs	r2, #0
 80079ac:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 80079ae:	68fb      	ldr	r3, [r7, #12]
 80079b0:	2200      	movs	r2, #0
 80079b2:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 80079b4:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 80079b8:	4618      	mov	r0, r3
 80079ba:	3728      	adds	r7, #40	; 0x28
 80079bc:	46bd      	mov	sp, r7
 80079be:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80079c2:	bf00      	nop
 80079c4:	00f42400 	.word	0x00f42400

080079c8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80079c8:	b480      	push	{r7}
 80079ca:	b083      	sub	sp, #12
 80079cc:	af00      	add	r7, sp, #0
 80079ce:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80079d0:	687b      	ldr	r3, [r7, #4]
 80079d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80079d4:	f003 0301 	and.w	r3, r3, #1
 80079d8:	2b00      	cmp	r3, #0
 80079da:	d00a      	beq.n	80079f2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80079dc:	687b      	ldr	r3, [r7, #4]
 80079de:	681b      	ldr	r3, [r3, #0]
 80079e0:	685b      	ldr	r3, [r3, #4]
 80079e2:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80079e6:	687b      	ldr	r3, [r7, #4]
 80079e8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80079ea:	687b      	ldr	r3, [r7, #4]
 80079ec:	681b      	ldr	r3, [r3, #0]
 80079ee:	430a      	orrs	r2, r1
 80079f0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80079f2:	687b      	ldr	r3, [r7, #4]
 80079f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80079f6:	f003 0302 	and.w	r3, r3, #2
 80079fa:	2b00      	cmp	r3, #0
 80079fc:	d00a      	beq.n	8007a14 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80079fe:	687b      	ldr	r3, [r7, #4]
 8007a00:	681b      	ldr	r3, [r3, #0]
 8007a02:	685b      	ldr	r3, [r3, #4]
 8007a04:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8007a08:	687b      	ldr	r3, [r7, #4]
 8007a0a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007a0c:	687b      	ldr	r3, [r7, #4]
 8007a0e:	681b      	ldr	r3, [r3, #0]
 8007a10:	430a      	orrs	r2, r1
 8007a12:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8007a14:	687b      	ldr	r3, [r7, #4]
 8007a16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a18:	f003 0304 	and.w	r3, r3, #4
 8007a1c:	2b00      	cmp	r3, #0
 8007a1e:	d00a      	beq.n	8007a36 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8007a20:	687b      	ldr	r3, [r7, #4]
 8007a22:	681b      	ldr	r3, [r3, #0]
 8007a24:	685b      	ldr	r3, [r3, #4]
 8007a26:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8007a2a:	687b      	ldr	r3, [r7, #4]
 8007a2c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007a2e:	687b      	ldr	r3, [r7, #4]
 8007a30:	681b      	ldr	r3, [r3, #0]
 8007a32:	430a      	orrs	r2, r1
 8007a34:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8007a36:	687b      	ldr	r3, [r7, #4]
 8007a38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a3a:	f003 0308 	and.w	r3, r3, #8
 8007a3e:	2b00      	cmp	r3, #0
 8007a40:	d00a      	beq.n	8007a58 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8007a42:	687b      	ldr	r3, [r7, #4]
 8007a44:	681b      	ldr	r3, [r3, #0]
 8007a46:	685b      	ldr	r3, [r3, #4]
 8007a48:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8007a4c:	687b      	ldr	r3, [r7, #4]
 8007a4e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007a50:	687b      	ldr	r3, [r7, #4]
 8007a52:	681b      	ldr	r3, [r3, #0]
 8007a54:	430a      	orrs	r2, r1
 8007a56:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8007a58:	687b      	ldr	r3, [r7, #4]
 8007a5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a5c:	f003 0310 	and.w	r3, r3, #16
 8007a60:	2b00      	cmp	r3, #0
 8007a62:	d00a      	beq.n	8007a7a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007a64:	687b      	ldr	r3, [r7, #4]
 8007a66:	681b      	ldr	r3, [r3, #0]
 8007a68:	689b      	ldr	r3, [r3, #8]
 8007a6a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8007a6e:	687b      	ldr	r3, [r7, #4]
 8007a70:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007a72:	687b      	ldr	r3, [r7, #4]
 8007a74:	681b      	ldr	r3, [r3, #0]
 8007a76:	430a      	orrs	r2, r1
 8007a78:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8007a7a:	687b      	ldr	r3, [r7, #4]
 8007a7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a7e:	f003 0320 	and.w	r3, r3, #32
 8007a82:	2b00      	cmp	r3, #0
 8007a84:	d00a      	beq.n	8007a9c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8007a86:	687b      	ldr	r3, [r7, #4]
 8007a88:	681b      	ldr	r3, [r3, #0]
 8007a8a:	689b      	ldr	r3, [r3, #8]
 8007a8c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8007a90:	687b      	ldr	r3, [r7, #4]
 8007a92:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007a94:	687b      	ldr	r3, [r7, #4]
 8007a96:	681b      	ldr	r3, [r3, #0]
 8007a98:	430a      	orrs	r2, r1
 8007a9a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8007a9c:	687b      	ldr	r3, [r7, #4]
 8007a9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007aa0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007aa4:	2b00      	cmp	r3, #0
 8007aa6:	d01a      	beq.n	8007ade <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8007aa8:	687b      	ldr	r3, [r7, #4]
 8007aaa:	681b      	ldr	r3, [r3, #0]
 8007aac:	685b      	ldr	r3, [r3, #4]
 8007aae:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8007ab2:	687b      	ldr	r3, [r7, #4]
 8007ab4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007ab6:	687b      	ldr	r3, [r7, #4]
 8007ab8:	681b      	ldr	r3, [r3, #0]
 8007aba:	430a      	orrs	r2, r1
 8007abc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8007abe:	687b      	ldr	r3, [r7, #4]
 8007ac0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007ac2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007ac6:	d10a      	bne.n	8007ade <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8007ac8:	687b      	ldr	r3, [r7, #4]
 8007aca:	681b      	ldr	r3, [r3, #0]
 8007acc:	685b      	ldr	r3, [r3, #4]
 8007ace:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8007ad2:	687b      	ldr	r3, [r7, #4]
 8007ad4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007ad6:	687b      	ldr	r3, [r7, #4]
 8007ad8:	681b      	ldr	r3, [r3, #0]
 8007ada:	430a      	orrs	r2, r1
 8007adc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8007ade:	687b      	ldr	r3, [r7, #4]
 8007ae0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ae2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007ae6:	2b00      	cmp	r3, #0
 8007ae8:	d00a      	beq.n	8007b00 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8007aea:	687b      	ldr	r3, [r7, #4]
 8007aec:	681b      	ldr	r3, [r3, #0]
 8007aee:	685b      	ldr	r3, [r3, #4]
 8007af0:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8007af4:	687b      	ldr	r3, [r7, #4]
 8007af6:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8007af8:	687b      	ldr	r3, [r7, #4]
 8007afa:	681b      	ldr	r3, [r3, #0]
 8007afc:	430a      	orrs	r2, r1
 8007afe:	605a      	str	r2, [r3, #4]
  }
}
 8007b00:	bf00      	nop
 8007b02:	370c      	adds	r7, #12
 8007b04:	46bd      	mov	sp, r7
 8007b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b0a:	4770      	bx	lr

08007b0c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8007b0c:	b580      	push	{r7, lr}
 8007b0e:	b086      	sub	sp, #24
 8007b10:	af02      	add	r7, sp, #8
 8007b12:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007b14:	687b      	ldr	r3, [r7, #4]
 8007b16:	2200      	movs	r2, #0
 8007b18:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8007b1c:	f7fa fcea 	bl	80024f4 <HAL_GetTick>
 8007b20:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8007b22:	687b      	ldr	r3, [r7, #4]
 8007b24:	681b      	ldr	r3, [r3, #0]
 8007b26:	681b      	ldr	r3, [r3, #0]
 8007b28:	f003 0308 	and.w	r3, r3, #8
 8007b2c:	2b08      	cmp	r3, #8
 8007b2e:	d10e      	bne.n	8007b4e <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007b30:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007b34:	9300      	str	r3, [sp, #0]
 8007b36:	68fb      	ldr	r3, [r7, #12]
 8007b38:	2200      	movs	r2, #0
 8007b3a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8007b3e:	6878      	ldr	r0, [r7, #4]
 8007b40:	f000 f82d 	bl	8007b9e <UART_WaitOnFlagUntilTimeout>
 8007b44:	4603      	mov	r3, r0
 8007b46:	2b00      	cmp	r3, #0
 8007b48:	d001      	beq.n	8007b4e <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007b4a:	2303      	movs	r3, #3
 8007b4c:	e023      	b.n	8007b96 <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8007b4e:	687b      	ldr	r3, [r7, #4]
 8007b50:	681b      	ldr	r3, [r3, #0]
 8007b52:	681b      	ldr	r3, [r3, #0]
 8007b54:	f003 0304 	and.w	r3, r3, #4
 8007b58:	2b04      	cmp	r3, #4
 8007b5a:	d10e      	bne.n	8007b7a <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007b5c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007b60:	9300      	str	r3, [sp, #0]
 8007b62:	68fb      	ldr	r3, [r7, #12]
 8007b64:	2200      	movs	r2, #0
 8007b66:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8007b6a:	6878      	ldr	r0, [r7, #4]
 8007b6c:	f000 f817 	bl	8007b9e <UART_WaitOnFlagUntilTimeout>
 8007b70:	4603      	mov	r3, r0
 8007b72:	2b00      	cmp	r3, #0
 8007b74:	d001      	beq.n	8007b7a <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007b76:	2303      	movs	r3, #3
 8007b78:	e00d      	b.n	8007b96 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8007b7a:	687b      	ldr	r3, [r7, #4]
 8007b7c:	2220      	movs	r2, #32
 8007b7e:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8007b80:	687b      	ldr	r3, [r7, #4]
 8007b82:	2220      	movs	r2, #32
 8007b84:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007b86:	687b      	ldr	r3, [r7, #4]
 8007b88:	2200      	movs	r2, #0
 8007b8a:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8007b8c:	687b      	ldr	r3, [r7, #4]
 8007b8e:	2200      	movs	r2, #0
 8007b90:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8007b94:	2300      	movs	r3, #0
}
 8007b96:	4618      	mov	r0, r3
 8007b98:	3710      	adds	r7, #16
 8007b9a:	46bd      	mov	sp, r7
 8007b9c:	bd80      	pop	{r7, pc}

08007b9e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8007b9e:	b580      	push	{r7, lr}
 8007ba0:	b09c      	sub	sp, #112	; 0x70
 8007ba2:	af00      	add	r7, sp, #0
 8007ba4:	60f8      	str	r0, [r7, #12]
 8007ba6:	60b9      	str	r1, [r7, #8]
 8007ba8:	603b      	str	r3, [r7, #0]
 8007baa:	4613      	mov	r3, r2
 8007bac:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007bae:	e0a5      	b.n	8007cfc <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007bb0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007bb2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007bb6:	f000 80a1 	beq.w	8007cfc <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007bba:	f7fa fc9b 	bl	80024f4 <HAL_GetTick>
 8007bbe:	4602      	mov	r2, r0
 8007bc0:	683b      	ldr	r3, [r7, #0]
 8007bc2:	1ad3      	subs	r3, r2, r3
 8007bc4:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8007bc6:	429a      	cmp	r2, r3
 8007bc8:	d302      	bcc.n	8007bd0 <UART_WaitOnFlagUntilTimeout+0x32>
 8007bca:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007bcc:	2b00      	cmp	r3, #0
 8007bce:	d13e      	bne.n	8007c4e <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8007bd0:	68fb      	ldr	r3, [r7, #12]
 8007bd2:	681b      	ldr	r3, [r3, #0]
 8007bd4:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007bd6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007bd8:	e853 3f00 	ldrex	r3, [r3]
 8007bdc:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8007bde:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007be0:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8007be4:	667b      	str	r3, [r7, #100]	; 0x64
 8007be6:	68fb      	ldr	r3, [r7, #12]
 8007be8:	681b      	ldr	r3, [r3, #0]
 8007bea:	461a      	mov	r2, r3
 8007bec:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007bee:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007bf0:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007bf2:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8007bf4:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8007bf6:	e841 2300 	strex	r3, r2, [r1]
 8007bfa:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8007bfc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007bfe:	2b00      	cmp	r3, #0
 8007c00:	d1e6      	bne.n	8007bd0 <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007c02:	68fb      	ldr	r3, [r7, #12]
 8007c04:	681b      	ldr	r3, [r3, #0]
 8007c06:	3308      	adds	r3, #8
 8007c08:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c0a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007c0c:	e853 3f00 	ldrex	r3, [r3]
 8007c10:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007c12:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007c14:	f023 0301 	bic.w	r3, r3, #1
 8007c18:	663b      	str	r3, [r7, #96]	; 0x60
 8007c1a:	68fb      	ldr	r3, [r7, #12]
 8007c1c:	681b      	ldr	r3, [r3, #0]
 8007c1e:	3308      	adds	r3, #8
 8007c20:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8007c22:	64ba      	str	r2, [r7, #72]	; 0x48
 8007c24:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c26:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8007c28:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007c2a:	e841 2300 	strex	r3, r2, [r1]
 8007c2e:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8007c30:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007c32:	2b00      	cmp	r3, #0
 8007c34:	d1e5      	bne.n	8007c02 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8007c36:	68fb      	ldr	r3, [r7, #12]
 8007c38:	2220      	movs	r2, #32
 8007c3a:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8007c3c:	68fb      	ldr	r3, [r7, #12]
 8007c3e:	2220      	movs	r2, #32
 8007c40:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8007c42:	68fb      	ldr	r3, [r7, #12]
 8007c44:	2200      	movs	r2, #0
 8007c46:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8007c4a:	2303      	movs	r3, #3
 8007c4c:	e067      	b.n	8007d1e <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8007c4e:	68fb      	ldr	r3, [r7, #12]
 8007c50:	681b      	ldr	r3, [r3, #0]
 8007c52:	681b      	ldr	r3, [r3, #0]
 8007c54:	f003 0304 	and.w	r3, r3, #4
 8007c58:	2b00      	cmp	r3, #0
 8007c5a:	d04f      	beq.n	8007cfc <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8007c5c:	68fb      	ldr	r3, [r7, #12]
 8007c5e:	681b      	ldr	r3, [r3, #0]
 8007c60:	69db      	ldr	r3, [r3, #28]
 8007c62:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007c66:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007c6a:	d147      	bne.n	8007cfc <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007c6c:	68fb      	ldr	r3, [r7, #12]
 8007c6e:	681b      	ldr	r3, [r3, #0]
 8007c70:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007c74:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8007c76:	68fb      	ldr	r3, [r7, #12]
 8007c78:	681b      	ldr	r3, [r3, #0]
 8007c7a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c7e:	e853 3f00 	ldrex	r3, [r3]
 8007c82:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007c84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c86:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8007c8a:	66fb      	str	r3, [r7, #108]	; 0x6c
 8007c8c:	68fb      	ldr	r3, [r7, #12]
 8007c8e:	681b      	ldr	r3, [r3, #0]
 8007c90:	461a      	mov	r2, r3
 8007c92:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007c94:	637b      	str	r3, [r7, #52]	; 0x34
 8007c96:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c98:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8007c9a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007c9c:	e841 2300 	strex	r3, r2, [r1]
 8007ca0:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8007ca2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007ca4:	2b00      	cmp	r3, #0
 8007ca6:	d1e6      	bne.n	8007c76 <UART_WaitOnFlagUntilTimeout+0xd8>
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007ca8:	68fb      	ldr	r3, [r7, #12]
 8007caa:	681b      	ldr	r3, [r3, #0]
 8007cac:	3308      	adds	r3, #8
 8007cae:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007cb0:	697b      	ldr	r3, [r7, #20]
 8007cb2:	e853 3f00 	ldrex	r3, [r3]
 8007cb6:	613b      	str	r3, [r7, #16]
   return(result);
 8007cb8:	693b      	ldr	r3, [r7, #16]
 8007cba:	f023 0301 	bic.w	r3, r3, #1
 8007cbe:	66bb      	str	r3, [r7, #104]	; 0x68
 8007cc0:	68fb      	ldr	r3, [r7, #12]
 8007cc2:	681b      	ldr	r3, [r3, #0]
 8007cc4:	3308      	adds	r3, #8
 8007cc6:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8007cc8:	623a      	str	r2, [r7, #32]
 8007cca:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ccc:	69f9      	ldr	r1, [r7, #28]
 8007cce:	6a3a      	ldr	r2, [r7, #32]
 8007cd0:	e841 2300 	strex	r3, r2, [r1]
 8007cd4:	61bb      	str	r3, [r7, #24]
   return(result);
 8007cd6:	69bb      	ldr	r3, [r7, #24]
 8007cd8:	2b00      	cmp	r3, #0
 8007cda:	d1e5      	bne.n	8007ca8 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8007cdc:	68fb      	ldr	r3, [r7, #12]
 8007cde:	2220      	movs	r2, #32
 8007ce0:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8007ce2:	68fb      	ldr	r3, [r7, #12]
 8007ce4:	2220      	movs	r2, #32
 8007ce6:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8007ce8:	68fb      	ldr	r3, [r7, #12]
 8007cea:	2220      	movs	r2, #32
 8007cec:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007cf0:	68fb      	ldr	r3, [r7, #12]
 8007cf2:	2200      	movs	r2, #0
 8007cf4:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8007cf8:	2303      	movs	r3, #3
 8007cfa:	e010      	b.n	8007d1e <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007cfc:	68fb      	ldr	r3, [r7, #12]
 8007cfe:	681b      	ldr	r3, [r3, #0]
 8007d00:	69da      	ldr	r2, [r3, #28]
 8007d02:	68bb      	ldr	r3, [r7, #8]
 8007d04:	4013      	ands	r3, r2
 8007d06:	68ba      	ldr	r2, [r7, #8]
 8007d08:	429a      	cmp	r2, r3
 8007d0a:	bf0c      	ite	eq
 8007d0c:	2301      	moveq	r3, #1
 8007d0e:	2300      	movne	r3, #0
 8007d10:	b2db      	uxtb	r3, r3
 8007d12:	461a      	mov	r2, r3
 8007d14:	79fb      	ldrb	r3, [r7, #7]
 8007d16:	429a      	cmp	r2, r3
 8007d18:	f43f af4a 	beq.w	8007bb0 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007d1c:	2300      	movs	r3, #0
}
 8007d1e:	4618      	mov	r0, r3
 8007d20:	3770      	adds	r7, #112	; 0x70
 8007d22:	46bd      	mov	sp, r7
 8007d24:	bd80      	pop	{r7, pc}
	...

08007d28 <__errno>:
 8007d28:	4b01      	ldr	r3, [pc, #4]	; (8007d30 <__errno+0x8>)
 8007d2a:	6818      	ldr	r0, [r3, #0]
 8007d2c:	4770      	bx	lr
 8007d2e:	bf00      	nop
 8007d30:	20000014 	.word	0x20000014

08007d34 <__libc_init_array>:
 8007d34:	b570      	push	{r4, r5, r6, lr}
 8007d36:	4d0d      	ldr	r5, [pc, #52]	; (8007d6c <__libc_init_array+0x38>)
 8007d38:	4c0d      	ldr	r4, [pc, #52]	; (8007d70 <__libc_init_array+0x3c>)
 8007d3a:	1b64      	subs	r4, r4, r5
 8007d3c:	10a4      	asrs	r4, r4, #2
 8007d3e:	2600      	movs	r6, #0
 8007d40:	42a6      	cmp	r6, r4
 8007d42:	d109      	bne.n	8007d58 <__libc_init_array+0x24>
 8007d44:	4d0b      	ldr	r5, [pc, #44]	; (8007d74 <__libc_init_array+0x40>)
 8007d46:	4c0c      	ldr	r4, [pc, #48]	; (8007d78 <__libc_init_array+0x44>)
 8007d48:	f004 fcaa 	bl	800c6a0 <_init>
 8007d4c:	1b64      	subs	r4, r4, r5
 8007d4e:	10a4      	asrs	r4, r4, #2
 8007d50:	2600      	movs	r6, #0
 8007d52:	42a6      	cmp	r6, r4
 8007d54:	d105      	bne.n	8007d62 <__libc_init_array+0x2e>
 8007d56:	bd70      	pop	{r4, r5, r6, pc}
 8007d58:	f855 3b04 	ldr.w	r3, [r5], #4
 8007d5c:	4798      	blx	r3
 8007d5e:	3601      	adds	r6, #1
 8007d60:	e7ee      	b.n	8007d40 <__libc_init_array+0xc>
 8007d62:	f855 3b04 	ldr.w	r3, [r5], #4
 8007d66:	4798      	blx	r3
 8007d68:	3601      	adds	r6, #1
 8007d6a:	e7f2      	b.n	8007d52 <__libc_init_array+0x1e>
 8007d6c:	0800cbc4 	.word	0x0800cbc4
 8007d70:	0800cbc4 	.word	0x0800cbc4
 8007d74:	0800cbc4 	.word	0x0800cbc4
 8007d78:	0800cbc8 	.word	0x0800cbc8

08007d7c <memset>:
 8007d7c:	4402      	add	r2, r0
 8007d7e:	4603      	mov	r3, r0
 8007d80:	4293      	cmp	r3, r2
 8007d82:	d100      	bne.n	8007d86 <memset+0xa>
 8007d84:	4770      	bx	lr
 8007d86:	f803 1b01 	strb.w	r1, [r3], #1
 8007d8a:	e7f9      	b.n	8007d80 <memset+0x4>

08007d8c <__cvt>:
 8007d8c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007d90:	ec55 4b10 	vmov	r4, r5, d0
 8007d94:	2d00      	cmp	r5, #0
 8007d96:	460e      	mov	r6, r1
 8007d98:	4619      	mov	r1, r3
 8007d9a:	462b      	mov	r3, r5
 8007d9c:	bfbb      	ittet	lt
 8007d9e:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8007da2:	461d      	movlt	r5, r3
 8007da4:	2300      	movge	r3, #0
 8007da6:	232d      	movlt	r3, #45	; 0x2d
 8007da8:	700b      	strb	r3, [r1, #0]
 8007daa:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007dac:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8007db0:	4691      	mov	r9, r2
 8007db2:	f023 0820 	bic.w	r8, r3, #32
 8007db6:	bfbc      	itt	lt
 8007db8:	4622      	movlt	r2, r4
 8007dba:	4614      	movlt	r4, r2
 8007dbc:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8007dc0:	d005      	beq.n	8007dce <__cvt+0x42>
 8007dc2:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8007dc6:	d100      	bne.n	8007dca <__cvt+0x3e>
 8007dc8:	3601      	adds	r6, #1
 8007dca:	2102      	movs	r1, #2
 8007dcc:	e000      	b.n	8007dd0 <__cvt+0x44>
 8007dce:	2103      	movs	r1, #3
 8007dd0:	ab03      	add	r3, sp, #12
 8007dd2:	9301      	str	r3, [sp, #4]
 8007dd4:	ab02      	add	r3, sp, #8
 8007dd6:	9300      	str	r3, [sp, #0]
 8007dd8:	ec45 4b10 	vmov	d0, r4, r5
 8007ddc:	4653      	mov	r3, sl
 8007dde:	4632      	mov	r2, r6
 8007de0:	f001 fdc6 	bl	8009970 <_dtoa_r>
 8007de4:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8007de8:	4607      	mov	r7, r0
 8007dea:	d102      	bne.n	8007df2 <__cvt+0x66>
 8007dec:	f019 0f01 	tst.w	r9, #1
 8007df0:	d022      	beq.n	8007e38 <__cvt+0xac>
 8007df2:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8007df6:	eb07 0906 	add.w	r9, r7, r6
 8007dfa:	d110      	bne.n	8007e1e <__cvt+0x92>
 8007dfc:	783b      	ldrb	r3, [r7, #0]
 8007dfe:	2b30      	cmp	r3, #48	; 0x30
 8007e00:	d10a      	bne.n	8007e18 <__cvt+0x8c>
 8007e02:	2200      	movs	r2, #0
 8007e04:	2300      	movs	r3, #0
 8007e06:	4620      	mov	r0, r4
 8007e08:	4629      	mov	r1, r5
 8007e0a:	f7f8 fe65 	bl	8000ad8 <__aeabi_dcmpeq>
 8007e0e:	b918      	cbnz	r0, 8007e18 <__cvt+0x8c>
 8007e10:	f1c6 0601 	rsb	r6, r6, #1
 8007e14:	f8ca 6000 	str.w	r6, [sl]
 8007e18:	f8da 3000 	ldr.w	r3, [sl]
 8007e1c:	4499      	add	r9, r3
 8007e1e:	2200      	movs	r2, #0
 8007e20:	2300      	movs	r3, #0
 8007e22:	4620      	mov	r0, r4
 8007e24:	4629      	mov	r1, r5
 8007e26:	f7f8 fe57 	bl	8000ad8 <__aeabi_dcmpeq>
 8007e2a:	b108      	cbz	r0, 8007e30 <__cvt+0xa4>
 8007e2c:	f8cd 900c 	str.w	r9, [sp, #12]
 8007e30:	2230      	movs	r2, #48	; 0x30
 8007e32:	9b03      	ldr	r3, [sp, #12]
 8007e34:	454b      	cmp	r3, r9
 8007e36:	d307      	bcc.n	8007e48 <__cvt+0xbc>
 8007e38:	9b03      	ldr	r3, [sp, #12]
 8007e3a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8007e3c:	1bdb      	subs	r3, r3, r7
 8007e3e:	4638      	mov	r0, r7
 8007e40:	6013      	str	r3, [r2, #0]
 8007e42:	b004      	add	sp, #16
 8007e44:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007e48:	1c59      	adds	r1, r3, #1
 8007e4a:	9103      	str	r1, [sp, #12]
 8007e4c:	701a      	strb	r2, [r3, #0]
 8007e4e:	e7f0      	b.n	8007e32 <__cvt+0xa6>

08007e50 <__exponent>:
 8007e50:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007e52:	4603      	mov	r3, r0
 8007e54:	2900      	cmp	r1, #0
 8007e56:	bfb8      	it	lt
 8007e58:	4249      	neglt	r1, r1
 8007e5a:	f803 2b02 	strb.w	r2, [r3], #2
 8007e5e:	bfb4      	ite	lt
 8007e60:	222d      	movlt	r2, #45	; 0x2d
 8007e62:	222b      	movge	r2, #43	; 0x2b
 8007e64:	2909      	cmp	r1, #9
 8007e66:	7042      	strb	r2, [r0, #1]
 8007e68:	dd2a      	ble.n	8007ec0 <__exponent+0x70>
 8007e6a:	f10d 0407 	add.w	r4, sp, #7
 8007e6e:	46a4      	mov	ip, r4
 8007e70:	270a      	movs	r7, #10
 8007e72:	46a6      	mov	lr, r4
 8007e74:	460a      	mov	r2, r1
 8007e76:	fb91 f6f7 	sdiv	r6, r1, r7
 8007e7a:	fb07 1516 	mls	r5, r7, r6, r1
 8007e7e:	3530      	adds	r5, #48	; 0x30
 8007e80:	2a63      	cmp	r2, #99	; 0x63
 8007e82:	f104 34ff 	add.w	r4, r4, #4294967295
 8007e86:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8007e8a:	4631      	mov	r1, r6
 8007e8c:	dcf1      	bgt.n	8007e72 <__exponent+0x22>
 8007e8e:	3130      	adds	r1, #48	; 0x30
 8007e90:	f1ae 0502 	sub.w	r5, lr, #2
 8007e94:	f804 1c01 	strb.w	r1, [r4, #-1]
 8007e98:	1c44      	adds	r4, r0, #1
 8007e9a:	4629      	mov	r1, r5
 8007e9c:	4561      	cmp	r1, ip
 8007e9e:	d30a      	bcc.n	8007eb6 <__exponent+0x66>
 8007ea0:	f10d 0209 	add.w	r2, sp, #9
 8007ea4:	eba2 020e 	sub.w	r2, r2, lr
 8007ea8:	4565      	cmp	r5, ip
 8007eaa:	bf88      	it	hi
 8007eac:	2200      	movhi	r2, #0
 8007eae:	4413      	add	r3, r2
 8007eb0:	1a18      	subs	r0, r3, r0
 8007eb2:	b003      	add	sp, #12
 8007eb4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007eb6:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007eba:	f804 2f01 	strb.w	r2, [r4, #1]!
 8007ebe:	e7ed      	b.n	8007e9c <__exponent+0x4c>
 8007ec0:	2330      	movs	r3, #48	; 0x30
 8007ec2:	3130      	adds	r1, #48	; 0x30
 8007ec4:	7083      	strb	r3, [r0, #2]
 8007ec6:	70c1      	strb	r1, [r0, #3]
 8007ec8:	1d03      	adds	r3, r0, #4
 8007eca:	e7f1      	b.n	8007eb0 <__exponent+0x60>

08007ecc <_printf_float>:
 8007ecc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007ed0:	ed2d 8b02 	vpush	{d8}
 8007ed4:	b08d      	sub	sp, #52	; 0x34
 8007ed6:	460c      	mov	r4, r1
 8007ed8:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8007edc:	4616      	mov	r6, r2
 8007ede:	461f      	mov	r7, r3
 8007ee0:	4605      	mov	r5, r0
 8007ee2:	f002 ff97 	bl	800ae14 <_localeconv_r>
 8007ee6:	f8d0 a000 	ldr.w	sl, [r0]
 8007eea:	4650      	mov	r0, sl
 8007eec:	f7f8 f978 	bl	80001e0 <strlen>
 8007ef0:	2300      	movs	r3, #0
 8007ef2:	930a      	str	r3, [sp, #40]	; 0x28
 8007ef4:	6823      	ldr	r3, [r4, #0]
 8007ef6:	9305      	str	r3, [sp, #20]
 8007ef8:	f8d8 3000 	ldr.w	r3, [r8]
 8007efc:	f894 b018 	ldrb.w	fp, [r4, #24]
 8007f00:	3307      	adds	r3, #7
 8007f02:	f023 0307 	bic.w	r3, r3, #7
 8007f06:	f103 0208 	add.w	r2, r3, #8
 8007f0a:	f8c8 2000 	str.w	r2, [r8]
 8007f0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f12:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8007f16:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8007f1a:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8007f1e:	9307      	str	r3, [sp, #28]
 8007f20:	f8cd 8018 	str.w	r8, [sp, #24]
 8007f24:	ee08 0a10 	vmov	s16, r0
 8007f28:	4b9f      	ldr	r3, [pc, #636]	; (80081a8 <_printf_float+0x2dc>)
 8007f2a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007f2e:	f04f 32ff 	mov.w	r2, #4294967295
 8007f32:	f7f8 fe03 	bl	8000b3c <__aeabi_dcmpun>
 8007f36:	bb88      	cbnz	r0, 8007f9c <_printf_float+0xd0>
 8007f38:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007f3c:	4b9a      	ldr	r3, [pc, #616]	; (80081a8 <_printf_float+0x2dc>)
 8007f3e:	f04f 32ff 	mov.w	r2, #4294967295
 8007f42:	f7f8 fddd 	bl	8000b00 <__aeabi_dcmple>
 8007f46:	bb48      	cbnz	r0, 8007f9c <_printf_float+0xd0>
 8007f48:	2200      	movs	r2, #0
 8007f4a:	2300      	movs	r3, #0
 8007f4c:	4640      	mov	r0, r8
 8007f4e:	4649      	mov	r1, r9
 8007f50:	f7f8 fdcc 	bl	8000aec <__aeabi_dcmplt>
 8007f54:	b110      	cbz	r0, 8007f5c <_printf_float+0x90>
 8007f56:	232d      	movs	r3, #45	; 0x2d
 8007f58:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007f5c:	4b93      	ldr	r3, [pc, #588]	; (80081ac <_printf_float+0x2e0>)
 8007f5e:	4894      	ldr	r0, [pc, #592]	; (80081b0 <_printf_float+0x2e4>)
 8007f60:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8007f64:	bf94      	ite	ls
 8007f66:	4698      	movls	r8, r3
 8007f68:	4680      	movhi	r8, r0
 8007f6a:	2303      	movs	r3, #3
 8007f6c:	6123      	str	r3, [r4, #16]
 8007f6e:	9b05      	ldr	r3, [sp, #20]
 8007f70:	f023 0204 	bic.w	r2, r3, #4
 8007f74:	6022      	str	r2, [r4, #0]
 8007f76:	f04f 0900 	mov.w	r9, #0
 8007f7a:	9700      	str	r7, [sp, #0]
 8007f7c:	4633      	mov	r3, r6
 8007f7e:	aa0b      	add	r2, sp, #44	; 0x2c
 8007f80:	4621      	mov	r1, r4
 8007f82:	4628      	mov	r0, r5
 8007f84:	f000 f9d8 	bl	8008338 <_printf_common>
 8007f88:	3001      	adds	r0, #1
 8007f8a:	f040 8090 	bne.w	80080ae <_printf_float+0x1e2>
 8007f8e:	f04f 30ff 	mov.w	r0, #4294967295
 8007f92:	b00d      	add	sp, #52	; 0x34
 8007f94:	ecbd 8b02 	vpop	{d8}
 8007f98:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007f9c:	4642      	mov	r2, r8
 8007f9e:	464b      	mov	r3, r9
 8007fa0:	4640      	mov	r0, r8
 8007fa2:	4649      	mov	r1, r9
 8007fa4:	f7f8 fdca 	bl	8000b3c <__aeabi_dcmpun>
 8007fa8:	b140      	cbz	r0, 8007fbc <_printf_float+0xf0>
 8007faa:	464b      	mov	r3, r9
 8007fac:	2b00      	cmp	r3, #0
 8007fae:	bfbc      	itt	lt
 8007fb0:	232d      	movlt	r3, #45	; 0x2d
 8007fb2:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8007fb6:	487f      	ldr	r0, [pc, #508]	; (80081b4 <_printf_float+0x2e8>)
 8007fb8:	4b7f      	ldr	r3, [pc, #508]	; (80081b8 <_printf_float+0x2ec>)
 8007fba:	e7d1      	b.n	8007f60 <_printf_float+0x94>
 8007fbc:	6863      	ldr	r3, [r4, #4]
 8007fbe:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8007fc2:	9206      	str	r2, [sp, #24]
 8007fc4:	1c5a      	adds	r2, r3, #1
 8007fc6:	d13f      	bne.n	8008048 <_printf_float+0x17c>
 8007fc8:	2306      	movs	r3, #6
 8007fca:	6063      	str	r3, [r4, #4]
 8007fcc:	9b05      	ldr	r3, [sp, #20]
 8007fce:	6861      	ldr	r1, [r4, #4]
 8007fd0:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8007fd4:	2300      	movs	r3, #0
 8007fd6:	9303      	str	r3, [sp, #12]
 8007fd8:	ab0a      	add	r3, sp, #40	; 0x28
 8007fda:	e9cd b301 	strd	fp, r3, [sp, #4]
 8007fde:	ab09      	add	r3, sp, #36	; 0x24
 8007fe0:	ec49 8b10 	vmov	d0, r8, r9
 8007fe4:	9300      	str	r3, [sp, #0]
 8007fe6:	6022      	str	r2, [r4, #0]
 8007fe8:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8007fec:	4628      	mov	r0, r5
 8007fee:	f7ff fecd 	bl	8007d8c <__cvt>
 8007ff2:	9b06      	ldr	r3, [sp, #24]
 8007ff4:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007ff6:	2b47      	cmp	r3, #71	; 0x47
 8007ff8:	4680      	mov	r8, r0
 8007ffa:	d108      	bne.n	800800e <_printf_float+0x142>
 8007ffc:	1cc8      	adds	r0, r1, #3
 8007ffe:	db02      	blt.n	8008006 <_printf_float+0x13a>
 8008000:	6863      	ldr	r3, [r4, #4]
 8008002:	4299      	cmp	r1, r3
 8008004:	dd41      	ble.n	800808a <_printf_float+0x1be>
 8008006:	f1ab 0b02 	sub.w	fp, fp, #2
 800800a:	fa5f fb8b 	uxtb.w	fp, fp
 800800e:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8008012:	d820      	bhi.n	8008056 <_printf_float+0x18a>
 8008014:	3901      	subs	r1, #1
 8008016:	465a      	mov	r2, fp
 8008018:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800801c:	9109      	str	r1, [sp, #36]	; 0x24
 800801e:	f7ff ff17 	bl	8007e50 <__exponent>
 8008022:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008024:	1813      	adds	r3, r2, r0
 8008026:	2a01      	cmp	r2, #1
 8008028:	4681      	mov	r9, r0
 800802a:	6123      	str	r3, [r4, #16]
 800802c:	dc02      	bgt.n	8008034 <_printf_float+0x168>
 800802e:	6822      	ldr	r2, [r4, #0]
 8008030:	07d2      	lsls	r2, r2, #31
 8008032:	d501      	bpl.n	8008038 <_printf_float+0x16c>
 8008034:	3301      	adds	r3, #1
 8008036:	6123      	str	r3, [r4, #16]
 8008038:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800803c:	2b00      	cmp	r3, #0
 800803e:	d09c      	beq.n	8007f7a <_printf_float+0xae>
 8008040:	232d      	movs	r3, #45	; 0x2d
 8008042:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008046:	e798      	b.n	8007f7a <_printf_float+0xae>
 8008048:	9a06      	ldr	r2, [sp, #24]
 800804a:	2a47      	cmp	r2, #71	; 0x47
 800804c:	d1be      	bne.n	8007fcc <_printf_float+0x100>
 800804e:	2b00      	cmp	r3, #0
 8008050:	d1bc      	bne.n	8007fcc <_printf_float+0x100>
 8008052:	2301      	movs	r3, #1
 8008054:	e7b9      	b.n	8007fca <_printf_float+0xfe>
 8008056:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800805a:	d118      	bne.n	800808e <_printf_float+0x1c2>
 800805c:	2900      	cmp	r1, #0
 800805e:	6863      	ldr	r3, [r4, #4]
 8008060:	dd0b      	ble.n	800807a <_printf_float+0x1ae>
 8008062:	6121      	str	r1, [r4, #16]
 8008064:	b913      	cbnz	r3, 800806c <_printf_float+0x1a0>
 8008066:	6822      	ldr	r2, [r4, #0]
 8008068:	07d0      	lsls	r0, r2, #31
 800806a:	d502      	bpl.n	8008072 <_printf_float+0x1a6>
 800806c:	3301      	adds	r3, #1
 800806e:	440b      	add	r3, r1
 8008070:	6123      	str	r3, [r4, #16]
 8008072:	65a1      	str	r1, [r4, #88]	; 0x58
 8008074:	f04f 0900 	mov.w	r9, #0
 8008078:	e7de      	b.n	8008038 <_printf_float+0x16c>
 800807a:	b913      	cbnz	r3, 8008082 <_printf_float+0x1b6>
 800807c:	6822      	ldr	r2, [r4, #0]
 800807e:	07d2      	lsls	r2, r2, #31
 8008080:	d501      	bpl.n	8008086 <_printf_float+0x1ba>
 8008082:	3302      	adds	r3, #2
 8008084:	e7f4      	b.n	8008070 <_printf_float+0x1a4>
 8008086:	2301      	movs	r3, #1
 8008088:	e7f2      	b.n	8008070 <_printf_float+0x1a4>
 800808a:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800808e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008090:	4299      	cmp	r1, r3
 8008092:	db05      	blt.n	80080a0 <_printf_float+0x1d4>
 8008094:	6823      	ldr	r3, [r4, #0]
 8008096:	6121      	str	r1, [r4, #16]
 8008098:	07d8      	lsls	r0, r3, #31
 800809a:	d5ea      	bpl.n	8008072 <_printf_float+0x1a6>
 800809c:	1c4b      	adds	r3, r1, #1
 800809e:	e7e7      	b.n	8008070 <_printf_float+0x1a4>
 80080a0:	2900      	cmp	r1, #0
 80080a2:	bfd4      	ite	le
 80080a4:	f1c1 0202 	rsble	r2, r1, #2
 80080a8:	2201      	movgt	r2, #1
 80080aa:	4413      	add	r3, r2
 80080ac:	e7e0      	b.n	8008070 <_printf_float+0x1a4>
 80080ae:	6823      	ldr	r3, [r4, #0]
 80080b0:	055a      	lsls	r2, r3, #21
 80080b2:	d407      	bmi.n	80080c4 <_printf_float+0x1f8>
 80080b4:	6923      	ldr	r3, [r4, #16]
 80080b6:	4642      	mov	r2, r8
 80080b8:	4631      	mov	r1, r6
 80080ba:	4628      	mov	r0, r5
 80080bc:	47b8      	blx	r7
 80080be:	3001      	adds	r0, #1
 80080c0:	d12c      	bne.n	800811c <_printf_float+0x250>
 80080c2:	e764      	b.n	8007f8e <_printf_float+0xc2>
 80080c4:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80080c8:	f240 80e0 	bls.w	800828c <_printf_float+0x3c0>
 80080cc:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80080d0:	2200      	movs	r2, #0
 80080d2:	2300      	movs	r3, #0
 80080d4:	f7f8 fd00 	bl	8000ad8 <__aeabi_dcmpeq>
 80080d8:	2800      	cmp	r0, #0
 80080da:	d034      	beq.n	8008146 <_printf_float+0x27a>
 80080dc:	4a37      	ldr	r2, [pc, #220]	; (80081bc <_printf_float+0x2f0>)
 80080de:	2301      	movs	r3, #1
 80080e0:	4631      	mov	r1, r6
 80080e2:	4628      	mov	r0, r5
 80080e4:	47b8      	blx	r7
 80080e6:	3001      	adds	r0, #1
 80080e8:	f43f af51 	beq.w	8007f8e <_printf_float+0xc2>
 80080ec:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80080f0:	429a      	cmp	r2, r3
 80080f2:	db02      	blt.n	80080fa <_printf_float+0x22e>
 80080f4:	6823      	ldr	r3, [r4, #0]
 80080f6:	07d8      	lsls	r0, r3, #31
 80080f8:	d510      	bpl.n	800811c <_printf_float+0x250>
 80080fa:	ee18 3a10 	vmov	r3, s16
 80080fe:	4652      	mov	r2, sl
 8008100:	4631      	mov	r1, r6
 8008102:	4628      	mov	r0, r5
 8008104:	47b8      	blx	r7
 8008106:	3001      	adds	r0, #1
 8008108:	f43f af41 	beq.w	8007f8e <_printf_float+0xc2>
 800810c:	f04f 0800 	mov.w	r8, #0
 8008110:	f104 091a 	add.w	r9, r4, #26
 8008114:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008116:	3b01      	subs	r3, #1
 8008118:	4543      	cmp	r3, r8
 800811a:	dc09      	bgt.n	8008130 <_printf_float+0x264>
 800811c:	6823      	ldr	r3, [r4, #0]
 800811e:	079b      	lsls	r3, r3, #30
 8008120:	f100 8105 	bmi.w	800832e <_printf_float+0x462>
 8008124:	68e0      	ldr	r0, [r4, #12]
 8008126:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008128:	4298      	cmp	r0, r3
 800812a:	bfb8      	it	lt
 800812c:	4618      	movlt	r0, r3
 800812e:	e730      	b.n	8007f92 <_printf_float+0xc6>
 8008130:	2301      	movs	r3, #1
 8008132:	464a      	mov	r2, r9
 8008134:	4631      	mov	r1, r6
 8008136:	4628      	mov	r0, r5
 8008138:	47b8      	blx	r7
 800813a:	3001      	adds	r0, #1
 800813c:	f43f af27 	beq.w	8007f8e <_printf_float+0xc2>
 8008140:	f108 0801 	add.w	r8, r8, #1
 8008144:	e7e6      	b.n	8008114 <_printf_float+0x248>
 8008146:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008148:	2b00      	cmp	r3, #0
 800814a:	dc39      	bgt.n	80081c0 <_printf_float+0x2f4>
 800814c:	4a1b      	ldr	r2, [pc, #108]	; (80081bc <_printf_float+0x2f0>)
 800814e:	2301      	movs	r3, #1
 8008150:	4631      	mov	r1, r6
 8008152:	4628      	mov	r0, r5
 8008154:	47b8      	blx	r7
 8008156:	3001      	adds	r0, #1
 8008158:	f43f af19 	beq.w	8007f8e <_printf_float+0xc2>
 800815c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008160:	4313      	orrs	r3, r2
 8008162:	d102      	bne.n	800816a <_printf_float+0x29e>
 8008164:	6823      	ldr	r3, [r4, #0]
 8008166:	07d9      	lsls	r1, r3, #31
 8008168:	d5d8      	bpl.n	800811c <_printf_float+0x250>
 800816a:	ee18 3a10 	vmov	r3, s16
 800816e:	4652      	mov	r2, sl
 8008170:	4631      	mov	r1, r6
 8008172:	4628      	mov	r0, r5
 8008174:	47b8      	blx	r7
 8008176:	3001      	adds	r0, #1
 8008178:	f43f af09 	beq.w	8007f8e <_printf_float+0xc2>
 800817c:	f04f 0900 	mov.w	r9, #0
 8008180:	f104 0a1a 	add.w	sl, r4, #26
 8008184:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008186:	425b      	negs	r3, r3
 8008188:	454b      	cmp	r3, r9
 800818a:	dc01      	bgt.n	8008190 <_printf_float+0x2c4>
 800818c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800818e:	e792      	b.n	80080b6 <_printf_float+0x1ea>
 8008190:	2301      	movs	r3, #1
 8008192:	4652      	mov	r2, sl
 8008194:	4631      	mov	r1, r6
 8008196:	4628      	mov	r0, r5
 8008198:	47b8      	blx	r7
 800819a:	3001      	adds	r0, #1
 800819c:	f43f aef7 	beq.w	8007f8e <_printf_float+0xc2>
 80081a0:	f109 0901 	add.w	r9, r9, #1
 80081a4:	e7ee      	b.n	8008184 <_printf_float+0x2b8>
 80081a6:	bf00      	nop
 80081a8:	7fefffff 	.word	0x7fefffff
 80081ac:	0800c710 	.word	0x0800c710
 80081b0:	0800c714 	.word	0x0800c714
 80081b4:	0800c71c 	.word	0x0800c71c
 80081b8:	0800c718 	.word	0x0800c718
 80081bc:	0800c720 	.word	0x0800c720
 80081c0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80081c2:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80081c4:	429a      	cmp	r2, r3
 80081c6:	bfa8      	it	ge
 80081c8:	461a      	movge	r2, r3
 80081ca:	2a00      	cmp	r2, #0
 80081cc:	4691      	mov	r9, r2
 80081ce:	dc37      	bgt.n	8008240 <_printf_float+0x374>
 80081d0:	f04f 0b00 	mov.w	fp, #0
 80081d4:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80081d8:	f104 021a 	add.w	r2, r4, #26
 80081dc:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80081de:	9305      	str	r3, [sp, #20]
 80081e0:	eba3 0309 	sub.w	r3, r3, r9
 80081e4:	455b      	cmp	r3, fp
 80081e6:	dc33      	bgt.n	8008250 <_printf_float+0x384>
 80081e8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80081ec:	429a      	cmp	r2, r3
 80081ee:	db3b      	blt.n	8008268 <_printf_float+0x39c>
 80081f0:	6823      	ldr	r3, [r4, #0]
 80081f2:	07da      	lsls	r2, r3, #31
 80081f4:	d438      	bmi.n	8008268 <_printf_float+0x39c>
 80081f6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80081f8:	9a05      	ldr	r2, [sp, #20]
 80081fa:	9909      	ldr	r1, [sp, #36]	; 0x24
 80081fc:	1a9a      	subs	r2, r3, r2
 80081fe:	eba3 0901 	sub.w	r9, r3, r1
 8008202:	4591      	cmp	r9, r2
 8008204:	bfa8      	it	ge
 8008206:	4691      	movge	r9, r2
 8008208:	f1b9 0f00 	cmp.w	r9, #0
 800820c:	dc35      	bgt.n	800827a <_printf_float+0x3ae>
 800820e:	f04f 0800 	mov.w	r8, #0
 8008212:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8008216:	f104 0a1a 	add.w	sl, r4, #26
 800821a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800821e:	1a9b      	subs	r3, r3, r2
 8008220:	eba3 0309 	sub.w	r3, r3, r9
 8008224:	4543      	cmp	r3, r8
 8008226:	f77f af79 	ble.w	800811c <_printf_float+0x250>
 800822a:	2301      	movs	r3, #1
 800822c:	4652      	mov	r2, sl
 800822e:	4631      	mov	r1, r6
 8008230:	4628      	mov	r0, r5
 8008232:	47b8      	blx	r7
 8008234:	3001      	adds	r0, #1
 8008236:	f43f aeaa 	beq.w	8007f8e <_printf_float+0xc2>
 800823a:	f108 0801 	add.w	r8, r8, #1
 800823e:	e7ec      	b.n	800821a <_printf_float+0x34e>
 8008240:	4613      	mov	r3, r2
 8008242:	4631      	mov	r1, r6
 8008244:	4642      	mov	r2, r8
 8008246:	4628      	mov	r0, r5
 8008248:	47b8      	blx	r7
 800824a:	3001      	adds	r0, #1
 800824c:	d1c0      	bne.n	80081d0 <_printf_float+0x304>
 800824e:	e69e      	b.n	8007f8e <_printf_float+0xc2>
 8008250:	2301      	movs	r3, #1
 8008252:	4631      	mov	r1, r6
 8008254:	4628      	mov	r0, r5
 8008256:	9205      	str	r2, [sp, #20]
 8008258:	47b8      	blx	r7
 800825a:	3001      	adds	r0, #1
 800825c:	f43f ae97 	beq.w	8007f8e <_printf_float+0xc2>
 8008260:	9a05      	ldr	r2, [sp, #20]
 8008262:	f10b 0b01 	add.w	fp, fp, #1
 8008266:	e7b9      	b.n	80081dc <_printf_float+0x310>
 8008268:	ee18 3a10 	vmov	r3, s16
 800826c:	4652      	mov	r2, sl
 800826e:	4631      	mov	r1, r6
 8008270:	4628      	mov	r0, r5
 8008272:	47b8      	blx	r7
 8008274:	3001      	adds	r0, #1
 8008276:	d1be      	bne.n	80081f6 <_printf_float+0x32a>
 8008278:	e689      	b.n	8007f8e <_printf_float+0xc2>
 800827a:	9a05      	ldr	r2, [sp, #20]
 800827c:	464b      	mov	r3, r9
 800827e:	4442      	add	r2, r8
 8008280:	4631      	mov	r1, r6
 8008282:	4628      	mov	r0, r5
 8008284:	47b8      	blx	r7
 8008286:	3001      	adds	r0, #1
 8008288:	d1c1      	bne.n	800820e <_printf_float+0x342>
 800828a:	e680      	b.n	8007f8e <_printf_float+0xc2>
 800828c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800828e:	2a01      	cmp	r2, #1
 8008290:	dc01      	bgt.n	8008296 <_printf_float+0x3ca>
 8008292:	07db      	lsls	r3, r3, #31
 8008294:	d538      	bpl.n	8008308 <_printf_float+0x43c>
 8008296:	2301      	movs	r3, #1
 8008298:	4642      	mov	r2, r8
 800829a:	4631      	mov	r1, r6
 800829c:	4628      	mov	r0, r5
 800829e:	47b8      	blx	r7
 80082a0:	3001      	adds	r0, #1
 80082a2:	f43f ae74 	beq.w	8007f8e <_printf_float+0xc2>
 80082a6:	ee18 3a10 	vmov	r3, s16
 80082aa:	4652      	mov	r2, sl
 80082ac:	4631      	mov	r1, r6
 80082ae:	4628      	mov	r0, r5
 80082b0:	47b8      	blx	r7
 80082b2:	3001      	adds	r0, #1
 80082b4:	f43f ae6b 	beq.w	8007f8e <_printf_float+0xc2>
 80082b8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80082bc:	2200      	movs	r2, #0
 80082be:	2300      	movs	r3, #0
 80082c0:	f7f8 fc0a 	bl	8000ad8 <__aeabi_dcmpeq>
 80082c4:	b9d8      	cbnz	r0, 80082fe <_printf_float+0x432>
 80082c6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80082c8:	f108 0201 	add.w	r2, r8, #1
 80082cc:	3b01      	subs	r3, #1
 80082ce:	4631      	mov	r1, r6
 80082d0:	4628      	mov	r0, r5
 80082d2:	47b8      	blx	r7
 80082d4:	3001      	adds	r0, #1
 80082d6:	d10e      	bne.n	80082f6 <_printf_float+0x42a>
 80082d8:	e659      	b.n	8007f8e <_printf_float+0xc2>
 80082da:	2301      	movs	r3, #1
 80082dc:	4652      	mov	r2, sl
 80082de:	4631      	mov	r1, r6
 80082e0:	4628      	mov	r0, r5
 80082e2:	47b8      	blx	r7
 80082e4:	3001      	adds	r0, #1
 80082e6:	f43f ae52 	beq.w	8007f8e <_printf_float+0xc2>
 80082ea:	f108 0801 	add.w	r8, r8, #1
 80082ee:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80082f0:	3b01      	subs	r3, #1
 80082f2:	4543      	cmp	r3, r8
 80082f4:	dcf1      	bgt.n	80082da <_printf_float+0x40e>
 80082f6:	464b      	mov	r3, r9
 80082f8:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80082fc:	e6dc      	b.n	80080b8 <_printf_float+0x1ec>
 80082fe:	f04f 0800 	mov.w	r8, #0
 8008302:	f104 0a1a 	add.w	sl, r4, #26
 8008306:	e7f2      	b.n	80082ee <_printf_float+0x422>
 8008308:	2301      	movs	r3, #1
 800830a:	4642      	mov	r2, r8
 800830c:	e7df      	b.n	80082ce <_printf_float+0x402>
 800830e:	2301      	movs	r3, #1
 8008310:	464a      	mov	r2, r9
 8008312:	4631      	mov	r1, r6
 8008314:	4628      	mov	r0, r5
 8008316:	47b8      	blx	r7
 8008318:	3001      	adds	r0, #1
 800831a:	f43f ae38 	beq.w	8007f8e <_printf_float+0xc2>
 800831e:	f108 0801 	add.w	r8, r8, #1
 8008322:	68e3      	ldr	r3, [r4, #12]
 8008324:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8008326:	1a5b      	subs	r3, r3, r1
 8008328:	4543      	cmp	r3, r8
 800832a:	dcf0      	bgt.n	800830e <_printf_float+0x442>
 800832c:	e6fa      	b.n	8008124 <_printf_float+0x258>
 800832e:	f04f 0800 	mov.w	r8, #0
 8008332:	f104 0919 	add.w	r9, r4, #25
 8008336:	e7f4      	b.n	8008322 <_printf_float+0x456>

08008338 <_printf_common>:
 8008338:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800833c:	4616      	mov	r6, r2
 800833e:	4699      	mov	r9, r3
 8008340:	688a      	ldr	r2, [r1, #8]
 8008342:	690b      	ldr	r3, [r1, #16]
 8008344:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8008348:	4293      	cmp	r3, r2
 800834a:	bfb8      	it	lt
 800834c:	4613      	movlt	r3, r2
 800834e:	6033      	str	r3, [r6, #0]
 8008350:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8008354:	4607      	mov	r7, r0
 8008356:	460c      	mov	r4, r1
 8008358:	b10a      	cbz	r2, 800835e <_printf_common+0x26>
 800835a:	3301      	adds	r3, #1
 800835c:	6033      	str	r3, [r6, #0]
 800835e:	6823      	ldr	r3, [r4, #0]
 8008360:	0699      	lsls	r1, r3, #26
 8008362:	bf42      	ittt	mi
 8008364:	6833      	ldrmi	r3, [r6, #0]
 8008366:	3302      	addmi	r3, #2
 8008368:	6033      	strmi	r3, [r6, #0]
 800836a:	6825      	ldr	r5, [r4, #0]
 800836c:	f015 0506 	ands.w	r5, r5, #6
 8008370:	d106      	bne.n	8008380 <_printf_common+0x48>
 8008372:	f104 0a19 	add.w	sl, r4, #25
 8008376:	68e3      	ldr	r3, [r4, #12]
 8008378:	6832      	ldr	r2, [r6, #0]
 800837a:	1a9b      	subs	r3, r3, r2
 800837c:	42ab      	cmp	r3, r5
 800837e:	dc26      	bgt.n	80083ce <_printf_common+0x96>
 8008380:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8008384:	1e13      	subs	r3, r2, #0
 8008386:	6822      	ldr	r2, [r4, #0]
 8008388:	bf18      	it	ne
 800838a:	2301      	movne	r3, #1
 800838c:	0692      	lsls	r2, r2, #26
 800838e:	d42b      	bmi.n	80083e8 <_printf_common+0xb0>
 8008390:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008394:	4649      	mov	r1, r9
 8008396:	4638      	mov	r0, r7
 8008398:	47c0      	blx	r8
 800839a:	3001      	adds	r0, #1
 800839c:	d01e      	beq.n	80083dc <_printf_common+0xa4>
 800839e:	6823      	ldr	r3, [r4, #0]
 80083a0:	68e5      	ldr	r5, [r4, #12]
 80083a2:	6832      	ldr	r2, [r6, #0]
 80083a4:	f003 0306 	and.w	r3, r3, #6
 80083a8:	2b04      	cmp	r3, #4
 80083aa:	bf08      	it	eq
 80083ac:	1aad      	subeq	r5, r5, r2
 80083ae:	68a3      	ldr	r3, [r4, #8]
 80083b0:	6922      	ldr	r2, [r4, #16]
 80083b2:	bf0c      	ite	eq
 80083b4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80083b8:	2500      	movne	r5, #0
 80083ba:	4293      	cmp	r3, r2
 80083bc:	bfc4      	itt	gt
 80083be:	1a9b      	subgt	r3, r3, r2
 80083c0:	18ed      	addgt	r5, r5, r3
 80083c2:	2600      	movs	r6, #0
 80083c4:	341a      	adds	r4, #26
 80083c6:	42b5      	cmp	r5, r6
 80083c8:	d11a      	bne.n	8008400 <_printf_common+0xc8>
 80083ca:	2000      	movs	r0, #0
 80083cc:	e008      	b.n	80083e0 <_printf_common+0xa8>
 80083ce:	2301      	movs	r3, #1
 80083d0:	4652      	mov	r2, sl
 80083d2:	4649      	mov	r1, r9
 80083d4:	4638      	mov	r0, r7
 80083d6:	47c0      	blx	r8
 80083d8:	3001      	adds	r0, #1
 80083da:	d103      	bne.n	80083e4 <_printf_common+0xac>
 80083dc:	f04f 30ff 	mov.w	r0, #4294967295
 80083e0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80083e4:	3501      	adds	r5, #1
 80083e6:	e7c6      	b.n	8008376 <_printf_common+0x3e>
 80083e8:	18e1      	adds	r1, r4, r3
 80083ea:	1c5a      	adds	r2, r3, #1
 80083ec:	2030      	movs	r0, #48	; 0x30
 80083ee:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80083f2:	4422      	add	r2, r4
 80083f4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80083f8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80083fc:	3302      	adds	r3, #2
 80083fe:	e7c7      	b.n	8008390 <_printf_common+0x58>
 8008400:	2301      	movs	r3, #1
 8008402:	4622      	mov	r2, r4
 8008404:	4649      	mov	r1, r9
 8008406:	4638      	mov	r0, r7
 8008408:	47c0      	blx	r8
 800840a:	3001      	adds	r0, #1
 800840c:	d0e6      	beq.n	80083dc <_printf_common+0xa4>
 800840e:	3601      	adds	r6, #1
 8008410:	e7d9      	b.n	80083c6 <_printf_common+0x8e>
	...

08008414 <_printf_i>:
 8008414:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008418:	7e0f      	ldrb	r7, [r1, #24]
 800841a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800841c:	2f78      	cmp	r7, #120	; 0x78
 800841e:	4691      	mov	r9, r2
 8008420:	4680      	mov	r8, r0
 8008422:	460c      	mov	r4, r1
 8008424:	469a      	mov	sl, r3
 8008426:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800842a:	d807      	bhi.n	800843c <_printf_i+0x28>
 800842c:	2f62      	cmp	r7, #98	; 0x62
 800842e:	d80a      	bhi.n	8008446 <_printf_i+0x32>
 8008430:	2f00      	cmp	r7, #0
 8008432:	f000 80d8 	beq.w	80085e6 <_printf_i+0x1d2>
 8008436:	2f58      	cmp	r7, #88	; 0x58
 8008438:	f000 80a3 	beq.w	8008582 <_printf_i+0x16e>
 800843c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008440:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8008444:	e03a      	b.n	80084bc <_printf_i+0xa8>
 8008446:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800844a:	2b15      	cmp	r3, #21
 800844c:	d8f6      	bhi.n	800843c <_printf_i+0x28>
 800844e:	a101      	add	r1, pc, #4	; (adr r1, 8008454 <_printf_i+0x40>)
 8008450:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8008454:	080084ad 	.word	0x080084ad
 8008458:	080084c1 	.word	0x080084c1
 800845c:	0800843d 	.word	0x0800843d
 8008460:	0800843d 	.word	0x0800843d
 8008464:	0800843d 	.word	0x0800843d
 8008468:	0800843d 	.word	0x0800843d
 800846c:	080084c1 	.word	0x080084c1
 8008470:	0800843d 	.word	0x0800843d
 8008474:	0800843d 	.word	0x0800843d
 8008478:	0800843d 	.word	0x0800843d
 800847c:	0800843d 	.word	0x0800843d
 8008480:	080085cd 	.word	0x080085cd
 8008484:	080084f1 	.word	0x080084f1
 8008488:	080085af 	.word	0x080085af
 800848c:	0800843d 	.word	0x0800843d
 8008490:	0800843d 	.word	0x0800843d
 8008494:	080085ef 	.word	0x080085ef
 8008498:	0800843d 	.word	0x0800843d
 800849c:	080084f1 	.word	0x080084f1
 80084a0:	0800843d 	.word	0x0800843d
 80084a4:	0800843d 	.word	0x0800843d
 80084a8:	080085b7 	.word	0x080085b7
 80084ac:	682b      	ldr	r3, [r5, #0]
 80084ae:	1d1a      	adds	r2, r3, #4
 80084b0:	681b      	ldr	r3, [r3, #0]
 80084b2:	602a      	str	r2, [r5, #0]
 80084b4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80084b8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80084bc:	2301      	movs	r3, #1
 80084be:	e0a3      	b.n	8008608 <_printf_i+0x1f4>
 80084c0:	6820      	ldr	r0, [r4, #0]
 80084c2:	6829      	ldr	r1, [r5, #0]
 80084c4:	0606      	lsls	r6, r0, #24
 80084c6:	f101 0304 	add.w	r3, r1, #4
 80084ca:	d50a      	bpl.n	80084e2 <_printf_i+0xce>
 80084cc:	680e      	ldr	r6, [r1, #0]
 80084ce:	602b      	str	r3, [r5, #0]
 80084d0:	2e00      	cmp	r6, #0
 80084d2:	da03      	bge.n	80084dc <_printf_i+0xc8>
 80084d4:	232d      	movs	r3, #45	; 0x2d
 80084d6:	4276      	negs	r6, r6
 80084d8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80084dc:	485e      	ldr	r0, [pc, #376]	; (8008658 <_printf_i+0x244>)
 80084de:	230a      	movs	r3, #10
 80084e0:	e019      	b.n	8008516 <_printf_i+0x102>
 80084e2:	680e      	ldr	r6, [r1, #0]
 80084e4:	602b      	str	r3, [r5, #0]
 80084e6:	f010 0f40 	tst.w	r0, #64	; 0x40
 80084ea:	bf18      	it	ne
 80084ec:	b236      	sxthne	r6, r6
 80084ee:	e7ef      	b.n	80084d0 <_printf_i+0xbc>
 80084f0:	682b      	ldr	r3, [r5, #0]
 80084f2:	6820      	ldr	r0, [r4, #0]
 80084f4:	1d19      	adds	r1, r3, #4
 80084f6:	6029      	str	r1, [r5, #0]
 80084f8:	0601      	lsls	r1, r0, #24
 80084fa:	d501      	bpl.n	8008500 <_printf_i+0xec>
 80084fc:	681e      	ldr	r6, [r3, #0]
 80084fe:	e002      	b.n	8008506 <_printf_i+0xf2>
 8008500:	0646      	lsls	r6, r0, #25
 8008502:	d5fb      	bpl.n	80084fc <_printf_i+0xe8>
 8008504:	881e      	ldrh	r6, [r3, #0]
 8008506:	4854      	ldr	r0, [pc, #336]	; (8008658 <_printf_i+0x244>)
 8008508:	2f6f      	cmp	r7, #111	; 0x6f
 800850a:	bf0c      	ite	eq
 800850c:	2308      	moveq	r3, #8
 800850e:	230a      	movne	r3, #10
 8008510:	2100      	movs	r1, #0
 8008512:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8008516:	6865      	ldr	r5, [r4, #4]
 8008518:	60a5      	str	r5, [r4, #8]
 800851a:	2d00      	cmp	r5, #0
 800851c:	bfa2      	ittt	ge
 800851e:	6821      	ldrge	r1, [r4, #0]
 8008520:	f021 0104 	bicge.w	r1, r1, #4
 8008524:	6021      	strge	r1, [r4, #0]
 8008526:	b90e      	cbnz	r6, 800852c <_printf_i+0x118>
 8008528:	2d00      	cmp	r5, #0
 800852a:	d04d      	beq.n	80085c8 <_printf_i+0x1b4>
 800852c:	4615      	mov	r5, r2
 800852e:	fbb6 f1f3 	udiv	r1, r6, r3
 8008532:	fb03 6711 	mls	r7, r3, r1, r6
 8008536:	5dc7      	ldrb	r7, [r0, r7]
 8008538:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800853c:	4637      	mov	r7, r6
 800853e:	42bb      	cmp	r3, r7
 8008540:	460e      	mov	r6, r1
 8008542:	d9f4      	bls.n	800852e <_printf_i+0x11a>
 8008544:	2b08      	cmp	r3, #8
 8008546:	d10b      	bne.n	8008560 <_printf_i+0x14c>
 8008548:	6823      	ldr	r3, [r4, #0]
 800854a:	07de      	lsls	r6, r3, #31
 800854c:	d508      	bpl.n	8008560 <_printf_i+0x14c>
 800854e:	6923      	ldr	r3, [r4, #16]
 8008550:	6861      	ldr	r1, [r4, #4]
 8008552:	4299      	cmp	r1, r3
 8008554:	bfde      	ittt	le
 8008556:	2330      	movle	r3, #48	; 0x30
 8008558:	f805 3c01 	strble.w	r3, [r5, #-1]
 800855c:	f105 35ff 	addle.w	r5, r5, #4294967295
 8008560:	1b52      	subs	r2, r2, r5
 8008562:	6122      	str	r2, [r4, #16]
 8008564:	f8cd a000 	str.w	sl, [sp]
 8008568:	464b      	mov	r3, r9
 800856a:	aa03      	add	r2, sp, #12
 800856c:	4621      	mov	r1, r4
 800856e:	4640      	mov	r0, r8
 8008570:	f7ff fee2 	bl	8008338 <_printf_common>
 8008574:	3001      	adds	r0, #1
 8008576:	d14c      	bne.n	8008612 <_printf_i+0x1fe>
 8008578:	f04f 30ff 	mov.w	r0, #4294967295
 800857c:	b004      	add	sp, #16
 800857e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008582:	4835      	ldr	r0, [pc, #212]	; (8008658 <_printf_i+0x244>)
 8008584:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8008588:	6829      	ldr	r1, [r5, #0]
 800858a:	6823      	ldr	r3, [r4, #0]
 800858c:	f851 6b04 	ldr.w	r6, [r1], #4
 8008590:	6029      	str	r1, [r5, #0]
 8008592:	061d      	lsls	r5, r3, #24
 8008594:	d514      	bpl.n	80085c0 <_printf_i+0x1ac>
 8008596:	07df      	lsls	r7, r3, #31
 8008598:	bf44      	itt	mi
 800859a:	f043 0320 	orrmi.w	r3, r3, #32
 800859e:	6023      	strmi	r3, [r4, #0]
 80085a0:	b91e      	cbnz	r6, 80085aa <_printf_i+0x196>
 80085a2:	6823      	ldr	r3, [r4, #0]
 80085a4:	f023 0320 	bic.w	r3, r3, #32
 80085a8:	6023      	str	r3, [r4, #0]
 80085aa:	2310      	movs	r3, #16
 80085ac:	e7b0      	b.n	8008510 <_printf_i+0xfc>
 80085ae:	6823      	ldr	r3, [r4, #0]
 80085b0:	f043 0320 	orr.w	r3, r3, #32
 80085b4:	6023      	str	r3, [r4, #0]
 80085b6:	2378      	movs	r3, #120	; 0x78
 80085b8:	4828      	ldr	r0, [pc, #160]	; (800865c <_printf_i+0x248>)
 80085ba:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80085be:	e7e3      	b.n	8008588 <_printf_i+0x174>
 80085c0:	0659      	lsls	r1, r3, #25
 80085c2:	bf48      	it	mi
 80085c4:	b2b6      	uxthmi	r6, r6
 80085c6:	e7e6      	b.n	8008596 <_printf_i+0x182>
 80085c8:	4615      	mov	r5, r2
 80085ca:	e7bb      	b.n	8008544 <_printf_i+0x130>
 80085cc:	682b      	ldr	r3, [r5, #0]
 80085ce:	6826      	ldr	r6, [r4, #0]
 80085d0:	6961      	ldr	r1, [r4, #20]
 80085d2:	1d18      	adds	r0, r3, #4
 80085d4:	6028      	str	r0, [r5, #0]
 80085d6:	0635      	lsls	r5, r6, #24
 80085d8:	681b      	ldr	r3, [r3, #0]
 80085da:	d501      	bpl.n	80085e0 <_printf_i+0x1cc>
 80085dc:	6019      	str	r1, [r3, #0]
 80085de:	e002      	b.n	80085e6 <_printf_i+0x1d2>
 80085e0:	0670      	lsls	r0, r6, #25
 80085e2:	d5fb      	bpl.n	80085dc <_printf_i+0x1c8>
 80085e4:	8019      	strh	r1, [r3, #0]
 80085e6:	2300      	movs	r3, #0
 80085e8:	6123      	str	r3, [r4, #16]
 80085ea:	4615      	mov	r5, r2
 80085ec:	e7ba      	b.n	8008564 <_printf_i+0x150>
 80085ee:	682b      	ldr	r3, [r5, #0]
 80085f0:	1d1a      	adds	r2, r3, #4
 80085f2:	602a      	str	r2, [r5, #0]
 80085f4:	681d      	ldr	r5, [r3, #0]
 80085f6:	6862      	ldr	r2, [r4, #4]
 80085f8:	2100      	movs	r1, #0
 80085fa:	4628      	mov	r0, r5
 80085fc:	f7f7 fdf8 	bl	80001f0 <memchr>
 8008600:	b108      	cbz	r0, 8008606 <_printf_i+0x1f2>
 8008602:	1b40      	subs	r0, r0, r5
 8008604:	6060      	str	r0, [r4, #4]
 8008606:	6863      	ldr	r3, [r4, #4]
 8008608:	6123      	str	r3, [r4, #16]
 800860a:	2300      	movs	r3, #0
 800860c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008610:	e7a8      	b.n	8008564 <_printf_i+0x150>
 8008612:	6923      	ldr	r3, [r4, #16]
 8008614:	462a      	mov	r2, r5
 8008616:	4649      	mov	r1, r9
 8008618:	4640      	mov	r0, r8
 800861a:	47d0      	blx	sl
 800861c:	3001      	adds	r0, #1
 800861e:	d0ab      	beq.n	8008578 <_printf_i+0x164>
 8008620:	6823      	ldr	r3, [r4, #0]
 8008622:	079b      	lsls	r3, r3, #30
 8008624:	d413      	bmi.n	800864e <_printf_i+0x23a>
 8008626:	68e0      	ldr	r0, [r4, #12]
 8008628:	9b03      	ldr	r3, [sp, #12]
 800862a:	4298      	cmp	r0, r3
 800862c:	bfb8      	it	lt
 800862e:	4618      	movlt	r0, r3
 8008630:	e7a4      	b.n	800857c <_printf_i+0x168>
 8008632:	2301      	movs	r3, #1
 8008634:	4632      	mov	r2, r6
 8008636:	4649      	mov	r1, r9
 8008638:	4640      	mov	r0, r8
 800863a:	47d0      	blx	sl
 800863c:	3001      	adds	r0, #1
 800863e:	d09b      	beq.n	8008578 <_printf_i+0x164>
 8008640:	3501      	adds	r5, #1
 8008642:	68e3      	ldr	r3, [r4, #12]
 8008644:	9903      	ldr	r1, [sp, #12]
 8008646:	1a5b      	subs	r3, r3, r1
 8008648:	42ab      	cmp	r3, r5
 800864a:	dcf2      	bgt.n	8008632 <_printf_i+0x21e>
 800864c:	e7eb      	b.n	8008626 <_printf_i+0x212>
 800864e:	2500      	movs	r5, #0
 8008650:	f104 0619 	add.w	r6, r4, #25
 8008654:	e7f5      	b.n	8008642 <_printf_i+0x22e>
 8008656:	bf00      	nop
 8008658:	0800c722 	.word	0x0800c722
 800865c:	0800c733 	.word	0x0800c733

08008660 <_scanf_float>:
 8008660:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008664:	b087      	sub	sp, #28
 8008666:	4617      	mov	r7, r2
 8008668:	9303      	str	r3, [sp, #12]
 800866a:	688b      	ldr	r3, [r1, #8]
 800866c:	1e5a      	subs	r2, r3, #1
 800866e:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8008672:	bf83      	ittte	hi
 8008674:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8008678:	195b      	addhi	r3, r3, r5
 800867a:	9302      	strhi	r3, [sp, #8]
 800867c:	2300      	movls	r3, #0
 800867e:	bf86      	itte	hi
 8008680:	f240 135d 	movwhi	r3, #349	; 0x15d
 8008684:	608b      	strhi	r3, [r1, #8]
 8008686:	9302      	strls	r3, [sp, #8]
 8008688:	680b      	ldr	r3, [r1, #0]
 800868a:	468b      	mov	fp, r1
 800868c:	2500      	movs	r5, #0
 800868e:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 8008692:	f84b 3b1c 	str.w	r3, [fp], #28
 8008696:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800869a:	4680      	mov	r8, r0
 800869c:	460c      	mov	r4, r1
 800869e:	465e      	mov	r6, fp
 80086a0:	46aa      	mov	sl, r5
 80086a2:	46a9      	mov	r9, r5
 80086a4:	9501      	str	r5, [sp, #4]
 80086a6:	68a2      	ldr	r2, [r4, #8]
 80086a8:	b152      	cbz	r2, 80086c0 <_scanf_float+0x60>
 80086aa:	683b      	ldr	r3, [r7, #0]
 80086ac:	781b      	ldrb	r3, [r3, #0]
 80086ae:	2b4e      	cmp	r3, #78	; 0x4e
 80086b0:	d864      	bhi.n	800877c <_scanf_float+0x11c>
 80086b2:	2b40      	cmp	r3, #64	; 0x40
 80086b4:	d83c      	bhi.n	8008730 <_scanf_float+0xd0>
 80086b6:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 80086ba:	b2c8      	uxtb	r0, r1
 80086bc:	280e      	cmp	r0, #14
 80086be:	d93a      	bls.n	8008736 <_scanf_float+0xd6>
 80086c0:	f1b9 0f00 	cmp.w	r9, #0
 80086c4:	d003      	beq.n	80086ce <_scanf_float+0x6e>
 80086c6:	6823      	ldr	r3, [r4, #0]
 80086c8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80086cc:	6023      	str	r3, [r4, #0]
 80086ce:	f10a 3aff 	add.w	sl, sl, #4294967295
 80086d2:	f1ba 0f01 	cmp.w	sl, #1
 80086d6:	f200 8113 	bhi.w	8008900 <_scanf_float+0x2a0>
 80086da:	455e      	cmp	r6, fp
 80086dc:	f200 8105 	bhi.w	80088ea <_scanf_float+0x28a>
 80086e0:	2501      	movs	r5, #1
 80086e2:	4628      	mov	r0, r5
 80086e4:	b007      	add	sp, #28
 80086e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80086ea:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 80086ee:	2a0d      	cmp	r2, #13
 80086f0:	d8e6      	bhi.n	80086c0 <_scanf_float+0x60>
 80086f2:	a101      	add	r1, pc, #4	; (adr r1, 80086f8 <_scanf_float+0x98>)
 80086f4:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 80086f8:	08008837 	.word	0x08008837
 80086fc:	080086c1 	.word	0x080086c1
 8008700:	080086c1 	.word	0x080086c1
 8008704:	080086c1 	.word	0x080086c1
 8008708:	08008897 	.word	0x08008897
 800870c:	0800886f 	.word	0x0800886f
 8008710:	080086c1 	.word	0x080086c1
 8008714:	080086c1 	.word	0x080086c1
 8008718:	08008845 	.word	0x08008845
 800871c:	080086c1 	.word	0x080086c1
 8008720:	080086c1 	.word	0x080086c1
 8008724:	080086c1 	.word	0x080086c1
 8008728:	080086c1 	.word	0x080086c1
 800872c:	080087fd 	.word	0x080087fd
 8008730:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 8008734:	e7db      	b.n	80086ee <_scanf_float+0x8e>
 8008736:	290e      	cmp	r1, #14
 8008738:	d8c2      	bhi.n	80086c0 <_scanf_float+0x60>
 800873a:	a001      	add	r0, pc, #4	; (adr r0, 8008740 <_scanf_float+0xe0>)
 800873c:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8008740:	080087ef 	.word	0x080087ef
 8008744:	080086c1 	.word	0x080086c1
 8008748:	080087ef 	.word	0x080087ef
 800874c:	08008883 	.word	0x08008883
 8008750:	080086c1 	.word	0x080086c1
 8008754:	0800879d 	.word	0x0800879d
 8008758:	080087d9 	.word	0x080087d9
 800875c:	080087d9 	.word	0x080087d9
 8008760:	080087d9 	.word	0x080087d9
 8008764:	080087d9 	.word	0x080087d9
 8008768:	080087d9 	.word	0x080087d9
 800876c:	080087d9 	.word	0x080087d9
 8008770:	080087d9 	.word	0x080087d9
 8008774:	080087d9 	.word	0x080087d9
 8008778:	080087d9 	.word	0x080087d9
 800877c:	2b6e      	cmp	r3, #110	; 0x6e
 800877e:	d809      	bhi.n	8008794 <_scanf_float+0x134>
 8008780:	2b60      	cmp	r3, #96	; 0x60
 8008782:	d8b2      	bhi.n	80086ea <_scanf_float+0x8a>
 8008784:	2b54      	cmp	r3, #84	; 0x54
 8008786:	d077      	beq.n	8008878 <_scanf_float+0x218>
 8008788:	2b59      	cmp	r3, #89	; 0x59
 800878a:	d199      	bne.n	80086c0 <_scanf_float+0x60>
 800878c:	2d07      	cmp	r5, #7
 800878e:	d197      	bne.n	80086c0 <_scanf_float+0x60>
 8008790:	2508      	movs	r5, #8
 8008792:	e029      	b.n	80087e8 <_scanf_float+0x188>
 8008794:	2b74      	cmp	r3, #116	; 0x74
 8008796:	d06f      	beq.n	8008878 <_scanf_float+0x218>
 8008798:	2b79      	cmp	r3, #121	; 0x79
 800879a:	e7f6      	b.n	800878a <_scanf_float+0x12a>
 800879c:	6821      	ldr	r1, [r4, #0]
 800879e:	05c8      	lsls	r0, r1, #23
 80087a0:	d51a      	bpl.n	80087d8 <_scanf_float+0x178>
 80087a2:	9b02      	ldr	r3, [sp, #8]
 80087a4:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 80087a8:	6021      	str	r1, [r4, #0]
 80087aa:	f109 0901 	add.w	r9, r9, #1
 80087ae:	b11b      	cbz	r3, 80087b8 <_scanf_float+0x158>
 80087b0:	3b01      	subs	r3, #1
 80087b2:	3201      	adds	r2, #1
 80087b4:	9302      	str	r3, [sp, #8]
 80087b6:	60a2      	str	r2, [r4, #8]
 80087b8:	68a3      	ldr	r3, [r4, #8]
 80087ba:	3b01      	subs	r3, #1
 80087bc:	60a3      	str	r3, [r4, #8]
 80087be:	6923      	ldr	r3, [r4, #16]
 80087c0:	3301      	adds	r3, #1
 80087c2:	6123      	str	r3, [r4, #16]
 80087c4:	687b      	ldr	r3, [r7, #4]
 80087c6:	3b01      	subs	r3, #1
 80087c8:	2b00      	cmp	r3, #0
 80087ca:	607b      	str	r3, [r7, #4]
 80087cc:	f340 8084 	ble.w	80088d8 <_scanf_float+0x278>
 80087d0:	683b      	ldr	r3, [r7, #0]
 80087d2:	3301      	adds	r3, #1
 80087d4:	603b      	str	r3, [r7, #0]
 80087d6:	e766      	b.n	80086a6 <_scanf_float+0x46>
 80087d8:	eb1a 0f05 	cmn.w	sl, r5
 80087dc:	f47f af70 	bne.w	80086c0 <_scanf_float+0x60>
 80087e0:	6822      	ldr	r2, [r4, #0]
 80087e2:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 80087e6:	6022      	str	r2, [r4, #0]
 80087e8:	f806 3b01 	strb.w	r3, [r6], #1
 80087ec:	e7e4      	b.n	80087b8 <_scanf_float+0x158>
 80087ee:	6822      	ldr	r2, [r4, #0]
 80087f0:	0610      	lsls	r0, r2, #24
 80087f2:	f57f af65 	bpl.w	80086c0 <_scanf_float+0x60>
 80087f6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80087fa:	e7f4      	b.n	80087e6 <_scanf_float+0x186>
 80087fc:	f1ba 0f00 	cmp.w	sl, #0
 8008800:	d10e      	bne.n	8008820 <_scanf_float+0x1c0>
 8008802:	f1b9 0f00 	cmp.w	r9, #0
 8008806:	d10e      	bne.n	8008826 <_scanf_float+0x1c6>
 8008808:	6822      	ldr	r2, [r4, #0]
 800880a:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800880e:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8008812:	d108      	bne.n	8008826 <_scanf_float+0x1c6>
 8008814:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8008818:	6022      	str	r2, [r4, #0]
 800881a:	f04f 0a01 	mov.w	sl, #1
 800881e:	e7e3      	b.n	80087e8 <_scanf_float+0x188>
 8008820:	f1ba 0f02 	cmp.w	sl, #2
 8008824:	d055      	beq.n	80088d2 <_scanf_float+0x272>
 8008826:	2d01      	cmp	r5, #1
 8008828:	d002      	beq.n	8008830 <_scanf_float+0x1d0>
 800882a:	2d04      	cmp	r5, #4
 800882c:	f47f af48 	bne.w	80086c0 <_scanf_float+0x60>
 8008830:	3501      	adds	r5, #1
 8008832:	b2ed      	uxtb	r5, r5
 8008834:	e7d8      	b.n	80087e8 <_scanf_float+0x188>
 8008836:	f1ba 0f01 	cmp.w	sl, #1
 800883a:	f47f af41 	bne.w	80086c0 <_scanf_float+0x60>
 800883e:	f04f 0a02 	mov.w	sl, #2
 8008842:	e7d1      	b.n	80087e8 <_scanf_float+0x188>
 8008844:	b97d      	cbnz	r5, 8008866 <_scanf_float+0x206>
 8008846:	f1b9 0f00 	cmp.w	r9, #0
 800884a:	f47f af3c 	bne.w	80086c6 <_scanf_float+0x66>
 800884e:	6822      	ldr	r2, [r4, #0]
 8008850:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8008854:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8008858:	f47f af39 	bne.w	80086ce <_scanf_float+0x6e>
 800885c:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8008860:	6022      	str	r2, [r4, #0]
 8008862:	2501      	movs	r5, #1
 8008864:	e7c0      	b.n	80087e8 <_scanf_float+0x188>
 8008866:	2d03      	cmp	r5, #3
 8008868:	d0e2      	beq.n	8008830 <_scanf_float+0x1d0>
 800886a:	2d05      	cmp	r5, #5
 800886c:	e7de      	b.n	800882c <_scanf_float+0x1cc>
 800886e:	2d02      	cmp	r5, #2
 8008870:	f47f af26 	bne.w	80086c0 <_scanf_float+0x60>
 8008874:	2503      	movs	r5, #3
 8008876:	e7b7      	b.n	80087e8 <_scanf_float+0x188>
 8008878:	2d06      	cmp	r5, #6
 800887a:	f47f af21 	bne.w	80086c0 <_scanf_float+0x60>
 800887e:	2507      	movs	r5, #7
 8008880:	e7b2      	b.n	80087e8 <_scanf_float+0x188>
 8008882:	6822      	ldr	r2, [r4, #0]
 8008884:	0591      	lsls	r1, r2, #22
 8008886:	f57f af1b 	bpl.w	80086c0 <_scanf_float+0x60>
 800888a:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 800888e:	6022      	str	r2, [r4, #0]
 8008890:	f8cd 9004 	str.w	r9, [sp, #4]
 8008894:	e7a8      	b.n	80087e8 <_scanf_float+0x188>
 8008896:	6822      	ldr	r2, [r4, #0]
 8008898:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 800889c:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 80088a0:	d006      	beq.n	80088b0 <_scanf_float+0x250>
 80088a2:	0550      	lsls	r0, r2, #21
 80088a4:	f57f af0c 	bpl.w	80086c0 <_scanf_float+0x60>
 80088a8:	f1b9 0f00 	cmp.w	r9, #0
 80088ac:	f43f af0f 	beq.w	80086ce <_scanf_float+0x6e>
 80088b0:	0591      	lsls	r1, r2, #22
 80088b2:	bf58      	it	pl
 80088b4:	9901      	ldrpl	r1, [sp, #4]
 80088b6:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 80088ba:	bf58      	it	pl
 80088bc:	eba9 0101 	subpl.w	r1, r9, r1
 80088c0:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 80088c4:	bf58      	it	pl
 80088c6:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 80088ca:	6022      	str	r2, [r4, #0]
 80088cc:	f04f 0900 	mov.w	r9, #0
 80088d0:	e78a      	b.n	80087e8 <_scanf_float+0x188>
 80088d2:	f04f 0a03 	mov.w	sl, #3
 80088d6:	e787      	b.n	80087e8 <_scanf_float+0x188>
 80088d8:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 80088dc:	4639      	mov	r1, r7
 80088de:	4640      	mov	r0, r8
 80088e0:	4798      	blx	r3
 80088e2:	2800      	cmp	r0, #0
 80088e4:	f43f aedf 	beq.w	80086a6 <_scanf_float+0x46>
 80088e8:	e6ea      	b.n	80086c0 <_scanf_float+0x60>
 80088ea:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80088ee:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80088f2:	463a      	mov	r2, r7
 80088f4:	4640      	mov	r0, r8
 80088f6:	4798      	blx	r3
 80088f8:	6923      	ldr	r3, [r4, #16]
 80088fa:	3b01      	subs	r3, #1
 80088fc:	6123      	str	r3, [r4, #16]
 80088fe:	e6ec      	b.n	80086da <_scanf_float+0x7a>
 8008900:	1e6b      	subs	r3, r5, #1
 8008902:	2b06      	cmp	r3, #6
 8008904:	d825      	bhi.n	8008952 <_scanf_float+0x2f2>
 8008906:	2d02      	cmp	r5, #2
 8008908:	d836      	bhi.n	8008978 <_scanf_float+0x318>
 800890a:	455e      	cmp	r6, fp
 800890c:	f67f aee8 	bls.w	80086e0 <_scanf_float+0x80>
 8008910:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8008914:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8008918:	463a      	mov	r2, r7
 800891a:	4640      	mov	r0, r8
 800891c:	4798      	blx	r3
 800891e:	6923      	ldr	r3, [r4, #16]
 8008920:	3b01      	subs	r3, #1
 8008922:	6123      	str	r3, [r4, #16]
 8008924:	e7f1      	b.n	800890a <_scanf_float+0x2aa>
 8008926:	9802      	ldr	r0, [sp, #8]
 8008928:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800892c:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 8008930:	9002      	str	r0, [sp, #8]
 8008932:	463a      	mov	r2, r7
 8008934:	4640      	mov	r0, r8
 8008936:	4798      	blx	r3
 8008938:	6923      	ldr	r3, [r4, #16]
 800893a:	3b01      	subs	r3, #1
 800893c:	6123      	str	r3, [r4, #16]
 800893e:	f10a 3aff 	add.w	sl, sl, #4294967295
 8008942:	fa5f fa8a 	uxtb.w	sl, sl
 8008946:	f1ba 0f02 	cmp.w	sl, #2
 800894a:	d1ec      	bne.n	8008926 <_scanf_float+0x2c6>
 800894c:	3d03      	subs	r5, #3
 800894e:	b2ed      	uxtb	r5, r5
 8008950:	1b76      	subs	r6, r6, r5
 8008952:	6823      	ldr	r3, [r4, #0]
 8008954:	05da      	lsls	r2, r3, #23
 8008956:	d52f      	bpl.n	80089b8 <_scanf_float+0x358>
 8008958:	055b      	lsls	r3, r3, #21
 800895a:	d510      	bpl.n	800897e <_scanf_float+0x31e>
 800895c:	455e      	cmp	r6, fp
 800895e:	f67f aebf 	bls.w	80086e0 <_scanf_float+0x80>
 8008962:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8008966:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800896a:	463a      	mov	r2, r7
 800896c:	4640      	mov	r0, r8
 800896e:	4798      	blx	r3
 8008970:	6923      	ldr	r3, [r4, #16]
 8008972:	3b01      	subs	r3, #1
 8008974:	6123      	str	r3, [r4, #16]
 8008976:	e7f1      	b.n	800895c <_scanf_float+0x2fc>
 8008978:	46aa      	mov	sl, r5
 800897a:	9602      	str	r6, [sp, #8]
 800897c:	e7df      	b.n	800893e <_scanf_float+0x2de>
 800897e:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8008982:	6923      	ldr	r3, [r4, #16]
 8008984:	2965      	cmp	r1, #101	; 0x65
 8008986:	f103 33ff 	add.w	r3, r3, #4294967295
 800898a:	f106 35ff 	add.w	r5, r6, #4294967295
 800898e:	6123      	str	r3, [r4, #16]
 8008990:	d00c      	beq.n	80089ac <_scanf_float+0x34c>
 8008992:	2945      	cmp	r1, #69	; 0x45
 8008994:	d00a      	beq.n	80089ac <_scanf_float+0x34c>
 8008996:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800899a:	463a      	mov	r2, r7
 800899c:	4640      	mov	r0, r8
 800899e:	4798      	blx	r3
 80089a0:	6923      	ldr	r3, [r4, #16]
 80089a2:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 80089a6:	3b01      	subs	r3, #1
 80089a8:	1eb5      	subs	r5, r6, #2
 80089aa:	6123      	str	r3, [r4, #16]
 80089ac:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80089b0:	463a      	mov	r2, r7
 80089b2:	4640      	mov	r0, r8
 80089b4:	4798      	blx	r3
 80089b6:	462e      	mov	r6, r5
 80089b8:	6825      	ldr	r5, [r4, #0]
 80089ba:	f015 0510 	ands.w	r5, r5, #16
 80089be:	d159      	bne.n	8008a74 <_scanf_float+0x414>
 80089c0:	7035      	strb	r5, [r6, #0]
 80089c2:	6823      	ldr	r3, [r4, #0]
 80089c4:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80089c8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80089cc:	d11b      	bne.n	8008a06 <_scanf_float+0x3a6>
 80089ce:	9b01      	ldr	r3, [sp, #4]
 80089d0:	454b      	cmp	r3, r9
 80089d2:	eba3 0209 	sub.w	r2, r3, r9
 80089d6:	d123      	bne.n	8008a20 <_scanf_float+0x3c0>
 80089d8:	2200      	movs	r2, #0
 80089da:	4659      	mov	r1, fp
 80089dc:	4640      	mov	r0, r8
 80089de:	f000 feb1 	bl	8009744 <_strtod_r>
 80089e2:	6822      	ldr	r2, [r4, #0]
 80089e4:	9b03      	ldr	r3, [sp, #12]
 80089e6:	f012 0f02 	tst.w	r2, #2
 80089ea:	ec57 6b10 	vmov	r6, r7, d0
 80089ee:	681b      	ldr	r3, [r3, #0]
 80089f0:	d021      	beq.n	8008a36 <_scanf_float+0x3d6>
 80089f2:	9903      	ldr	r1, [sp, #12]
 80089f4:	1d1a      	adds	r2, r3, #4
 80089f6:	600a      	str	r2, [r1, #0]
 80089f8:	681b      	ldr	r3, [r3, #0]
 80089fa:	e9c3 6700 	strd	r6, r7, [r3]
 80089fe:	68e3      	ldr	r3, [r4, #12]
 8008a00:	3301      	adds	r3, #1
 8008a02:	60e3      	str	r3, [r4, #12]
 8008a04:	e66d      	b.n	80086e2 <_scanf_float+0x82>
 8008a06:	9b04      	ldr	r3, [sp, #16]
 8008a08:	2b00      	cmp	r3, #0
 8008a0a:	d0e5      	beq.n	80089d8 <_scanf_float+0x378>
 8008a0c:	9905      	ldr	r1, [sp, #20]
 8008a0e:	230a      	movs	r3, #10
 8008a10:	462a      	mov	r2, r5
 8008a12:	3101      	adds	r1, #1
 8008a14:	4640      	mov	r0, r8
 8008a16:	f000 ff1d 	bl	8009854 <_strtol_r>
 8008a1a:	9b04      	ldr	r3, [sp, #16]
 8008a1c:	9e05      	ldr	r6, [sp, #20]
 8008a1e:	1ac2      	subs	r2, r0, r3
 8008a20:	f204 136f 	addw	r3, r4, #367	; 0x16f
 8008a24:	429e      	cmp	r6, r3
 8008a26:	bf28      	it	cs
 8008a28:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 8008a2c:	4912      	ldr	r1, [pc, #72]	; (8008a78 <_scanf_float+0x418>)
 8008a2e:	4630      	mov	r0, r6
 8008a30:	f000 f844 	bl	8008abc <siprintf>
 8008a34:	e7d0      	b.n	80089d8 <_scanf_float+0x378>
 8008a36:	9903      	ldr	r1, [sp, #12]
 8008a38:	f012 0f04 	tst.w	r2, #4
 8008a3c:	f103 0204 	add.w	r2, r3, #4
 8008a40:	600a      	str	r2, [r1, #0]
 8008a42:	d1d9      	bne.n	80089f8 <_scanf_float+0x398>
 8008a44:	f8d3 8000 	ldr.w	r8, [r3]
 8008a48:	ee10 2a10 	vmov	r2, s0
 8008a4c:	ee10 0a10 	vmov	r0, s0
 8008a50:	463b      	mov	r3, r7
 8008a52:	4639      	mov	r1, r7
 8008a54:	f7f8 f872 	bl	8000b3c <__aeabi_dcmpun>
 8008a58:	b128      	cbz	r0, 8008a66 <_scanf_float+0x406>
 8008a5a:	4808      	ldr	r0, [pc, #32]	; (8008a7c <_scanf_float+0x41c>)
 8008a5c:	f000 f828 	bl	8008ab0 <nanf>
 8008a60:	ed88 0a00 	vstr	s0, [r8]
 8008a64:	e7cb      	b.n	80089fe <_scanf_float+0x39e>
 8008a66:	4630      	mov	r0, r6
 8008a68:	4639      	mov	r1, r7
 8008a6a:	f7f8 f8c5 	bl	8000bf8 <__aeabi_d2f>
 8008a6e:	f8c8 0000 	str.w	r0, [r8]
 8008a72:	e7c4      	b.n	80089fe <_scanf_float+0x39e>
 8008a74:	2500      	movs	r5, #0
 8008a76:	e634      	b.n	80086e2 <_scanf_float+0x82>
 8008a78:	0800c744 	.word	0x0800c744
 8008a7c:	0800cbb8 	.word	0x0800cbb8

08008a80 <iprintf>:
 8008a80:	b40f      	push	{r0, r1, r2, r3}
 8008a82:	4b0a      	ldr	r3, [pc, #40]	; (8008aac <iprintf+0x2c>)
 8008a84:	b513      	push	{r0, r1, r4, lr}
 8008a86:	681c      	ldr	r4, [r3, #0]
 8008a88:	b124      	cbz	r4, 8008a94 <iprintf+0x14>
 8008a8a:	69a3      	ldr	r3, [r4, #24]
 8008a8c:	b913      	cbnz	r3, 8008a94 <iprintf+0x14>
 8008a8e:	4620      	mov	r0, r4
 8008a90:	f001 fdb4 	bl	800a5fc <__sinit>
 8008a94:	ab05      	add	r3, sp, #20
 8008a96:	9a04      	ldr	r2, [sp, #16]
 8008a98:	68a1      	ldr	r1, [r4, #8]
 8008a9a:	9301      	str	r3, [sp, #4]
 8008a9c:	4620      	mov	r0, r4
 8008a9e:	f003 f927 	bl	800bcf0 <_vfiprintf_r>
 8008aa2:	b002      	add	sp, #8
 8008aa4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008aa8:	b004      	add	sp, #16
 8008aaa:	4770      	bx	lr
 8008aac:	20000014 	.word	0x20000014

08008ab0 <nanf>:
 8008ab0:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8008ab8 <nanf+0x8>
 8008ab4:	4770      	bx	lr
 8008ab6:	bf00      	nop
 8008ab8:	7fc00000 	.word	0x7fc00000

08008abc <siprintf>:
 8008abc:	b40e      	push	{r1, r2, r3}
 8008abe:	b500      	push	{lr}
 8008ac0:	b09c      	sub	sp, #112	; 0x70
 8008ac2:	ab1d      	add	r3, sp, #116	; 0x74
 8008ac4:	9002      	str	r0, [sp, #8]
 8008ac6:	9006      	str	r0, [sp, #24]
 8008ac8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8008acc:	4809      	ldr	r0, [pc, #36]	; (8008af4 <siprintf+0x38>)
 8008ace:	9107      	str	r1, [sp, #28]
 8008ad0:	9104      	str	r1, [sp, #16]
 8008ad2:	4909      	ldr	r1, [pc, #36]	; (8008af8 <siprintf+0x3c>)
 8008ad4:	f853 2b04 	ldr.w	r2, [r3], #4
 8008ad8:	9105      	str	r1, [sp, #20]
 8008ada:	6800      	ldr	r0, [r0, #0]
 8008adc:	9301      	str	r3, [sp, #4]
 8008ade:	a902      	add	r1, sp, #8
 8008ae0:	f002 ffdc 	bl	800ba9c <_svfiprintf_r>
 8008ae4:	9b02      	ldr	r3, [sp, #8]
 8008ae6:	2200      	movs	r2, #0
 8008ae8:	701a      	strb	r2, [r3, #0]
 8008aea:	b01c      	add	sp, #112	; 0x70
 8008aec:	f85d eb04 	ldr.w	lr, [sp], #4
 8008af0:	b003      	add	sp, #12
 8008af2:	4770      	bx	lr
 8008af4:	20000014 	.word	0x20000014
 8008af8:	ffff0208 	.word	0xffff0208

08008afc <sulp>:
 8008afc:	b570      	push	{r4, r5, r6, lr}
 8008afe:	4604      	mov	r4, r0
 8008b00:	460d      	mov	r5, r1
 8008b02:	ec45 4b10 	vmov	d0, r4, r5
 8008b06:	4616      	mov	r6, r2
 8008b08:	f002 fd26 	bl	800b558 <__ulp>
 8008b0c:	ec51 0b10 	vmov	r0, r1, d0
 8008b10:	b17e      	cbz	r6, 8008b32 <sulp+0x36>
 8008b12:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8008b16:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8008b1a:	2b00      	cmp	r3, #0
 8008b1c:	dd09      	ble.n	8008b32 <sulp+0x36>
 8008b1e:	051b      	lsls	r3, r3, #20
 8008b20:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8008b24:	2400      	movs	r4, #0
 8008b26:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8008b2a:	4622      	mov	r2, r4
 8008b2c:	462b      	mov	r3, r5
 8008b2e:	f7f7 fd6b 	bl	8000608 <__aeabi_dmul>
 8008b32:	bd70      	pop	{r4, r5, r6, pc}
 8008b34:	0000      	movs	r0, r0
	...

08008b38 <_strtod_l>:
 8008b38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008b3c:	ed2d 8b02 	vpush	{d8}
 8008b40:	b09d      	sub	sp, #116	; 0x74
 8008b42:	461f      	mov	r7, r3
 8008b44:	2300      	movs	r3, #0
 8008b46:	9318      	str	r3, [sp, #96]	; 0x60
 8008b48:	4ba2      	ldr	r3, [pc, #648]	; (8008dd4 <_strtod_l+0x29c>)
 8008b4a:	9213      	str	r2, [sp, #76]	; 0x4c
 8008b4c:	681b      	ldr	r3, [r3, #0]
 8008b4e:	9305      	str	r3, [sp, #20]
 8008b50:	4604      	mov	r4, r0
 8008b52:	4618      	mov	r0, r3
 8008b54:	4688      	mov	r8, r1
 8008b56:	f7f7 fb43 	bl	80001e0 <strlen>
 8008b5a:	f04f 0a00 	mov.w	sl, #0
 8008b5e:	4605      	mov	r5, r0
 8008b60:	f04f 0b00 	mov.w	fp, #0
 8008b64:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 8008b68:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8008b6a:	781a      	ldrb	r2, [r3, #0]
 8008b6c:	2a2b      	cmp	r2, #43	; 0x2b
 8008b6e:	d04e      	beq.n	8008c0e <_strtod_l+0xd6>
 8008b70:	d83b      	bhi.n	8008bea <_strtod_l+0xb2>
 8008b72:	2a0d      	cmp	r2, #13
 8008b74:	d834      	bhi.n	8008be0 <_strtod_l+0xa8>
 8008b76:	2a08      	cmp	r2, #8
 8008b78:	d834      	bhi.n	8008be4 <_strtod_l+0xac>
 8008b7a:	2a00      	cmp	r2, #0
 8008b7c:	d03e      	beq.n	8008bfc <_strtod_l+0xc4>
 8008b7e:	2300      	movs	r3, #0
 8008b80:	930a      	str	r3, [sp, #40]	; 0x28
 8008b82:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 8008b84:	7833      	ldrb	r3, [r6, #0]
 8008b86:	2b30      	cmp	r3, #48	; 0x30
 8008b88:	f040 80b0 	bne.w	8008cec <_strtod_l+0x1b4>
 8008b8c:	7873      	ldrb	r3, [r6, #1]
 8008b8e:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8008b92:	2b58      	cmp	r3, #88	; 0x58
 8008b94:	d168      	bne.n	8008c68 <_strtod_l+0x130>
 8008b96:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008b98:	9301      	str	r3, [sp, #4]
 8008b9a:	ab18      	add	r3, sp, #96	; 0x60
 8008b9c:	9702      	str	r7, [sp, #8]
 8008b9e:	9300      	str	r3, [sp, #0]
 8008ba0:	4a8d      	ldr	r2, [pc, #564]	; (8008dd8 <_strtod_l+0x2a0>)
 8008ba2:	ab19      	add	r3, sp, #100	; 0x64
 8008ba4:	a917      	add	r1, sp, #92	; 0x5c
 8008ba6:	4620      	mov	r0, r4
 8008ba8:	f001 fe2c 	bl	800a804 <__gethex>
 8008bac:	f010 0707 	ands.w	r7, r0, #7
 8008bb0:	4605      	mov	r5, r0
 8008bb2:	d005      	beq.n	8008bc0 <_strtod_l+0x88>
 8008bb4:	2f06      	cmp	r7, #6
 8008bb6:	d12c      	bne.n	8008c12 <_strtod_l+0xda>
 8008bb8:	3601      	adds	r6, #1
 8008bba:	2300      	movs	r3, #0
 8008bbc:	9617      	str	r6, [sp, #92]	; 0x5c
 8008bbe:	930a      	str	r3, [sp, #40]	; 0x28
 8008bc0:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8008bc2:	2b00      	cmp	r3, #0
 8008bc4:	f040 8590 	bne.w	80096e8 <_strtod_l+0xbb0>
 8008bc8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008bca:	b1eb      	cbz	r3, 8008c08 <_strtod_l+0xd0>
 8008bcc:	4652      	mov	r2, sl
 8008bce:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8008bd2:	ec43 2b10 	vmov	d0, r2, r3
 8008bd6:	b01d      	add	sp, #116	; 0x74
 8008bd8:	ecbd 8b02 	vpop	{d8}
 8008bdc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008be0:	2a20      	cmp	r2, #32
 8008be2:	d1cc      	bne.n	8008b7e <_strtod_l+0x46>
 8008be4:	3301      	adds	r3, #1
 8008be6:	9317      	str	r3, [sp, #92]	; 0x5c
 8008be8:	e7be      	b.n	8008b68 <_strtod_l+0x30>
 8008bea:	2a2d      	cmp	r2, #45	; 0x2d
 8008bec:	d1c7      	bne.n	8008b7e <_strtod_l+0x46>
 8008bee:	2201      	movs	r2, #1
 8008bf0:	920a      	str	r2, [sp, #40]	; 0x28
 8008bf2:	1c5a      	adds	r2, r3, #1
 8008bf4:	9217      	str	r2, [sp, #92]	; 0x5c
 8008bf6:	785b      	ldrb	r3, [r3, #1]
 8008bf8:	2b00      	cmp	r3, #0
 8008bfa:	d1c2      	bne.n	8008b82 <_strtod_l+0x4a>
 8008bfc:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8008bfe:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 8008c02:	2b00      	cmp	r3, #0
 8008c04:	f040 856e 	bne.w	80096e4 <_strtod_l+0xbac>
 8008c08:	4652      	mov	r2, sl
 8008c0a:	465b      	mov	r3, fp
 8008c0c:	e7e1      	b.n	8008bd2 <_strtod_l+0x9a>
 8008c0e:	2200      	movs	r2, #0
 8008c10:	e7ee      	b.n	8008bf0 <_strtod_l+0xb8>
 8008c12:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8008c14:	b13a      	cbz	r2, 8008c26 <_strtod_l+0xee>
 8008c16:	2135      	movs	r1, #53	; 0x35
 8008c18:	a81a      	add	r0, sp, #104	; 0x68
 8008c1a:	f002 fda8 	bl	800b76e <__copybits>
 8008c1e:	9918      	ldr	r1, [sp, #96]	; 0x60
 8008c20:	4620      	mov	r0, r4
 8008c22:	f002 f967 	bl	800aef4 <_Bfree>
 8008c26:	3f01      	subs	r7, #1
 8008c28:	2f04      	cmp	r7, #4
 8008c2a:	d806      	bhi.n	8008c3a <_strtod_l+0x102>
 8008c2c:	e8df f007 	tbb	[pc, r7]
 8008c30:	1714030a 	.word	0x1714030a
 8008c34:	0a          	.byte	0x0a
 8008c35:	00          	.byte	0x00
 8008c36:	e9dd ab1a 	ldrd	sl, fp, [sp, #104]	; 0x68
 8008c3a:	0728      	lsls	r0, r5, #28
 8008c3c:	d5c0      	bpl.n	8008bc0 <_strtod_l+0x88>
 8008c3e:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 8008c42:	e7bd      	b.n	8008bc0 <_strtod_l+0x88>
 8008c44:	e9dd a31a 	ldrd	sl, r3, [sp, #104]	; 0x68
 8008c48:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8008c4a:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8008c4e:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8008c52:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8008c56:	e7f0      	b.n	8008c3a <_strtod_l+0x102>
 8008c58:	f8df b180 	ldr.w	fp, [pc, #384]	; 8008ddc <_strtod_l+0x2a4>
 8008c5c:	e7ed      	b.n	8008c3a <_strtod_l+0x102>
 8008c5e:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 8008c62:	f04f 3aff 	mov.w	sl, #4294967295
 8008c66:	e7e8      	b.n	8008c3a <_strtod_l+0x102>
 8008c68:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8008c6a:	1c5a      	adds	r2, r3, #1
 8008c6c:	9217      	str	r2, [sp, #92]	; 0x5c
 8008c6e:	785b      	ldrb	r3, [r3, #1]
 8008c70:	2b30      	cmp	r3, #48	; 0x30
 8008c72:	d0f9      	beq.n	8008c68 <_strtod_l+0x130>
 8008c74:	2b00      	cmp	r3, #0
 8008c76:	d0a3      	beq.n	8008bc0 <_strtod_l+0x88>
 8008c78:	2301      	movs	r3, #1
 8008c7a:	f04f 0900 	mov.w	r9, #0
 8008c7e:	9304      	str	r3, [sp, #16]
 8008c80:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8008c82:	9308      	str	r3, [sp, #32]
 8008c84:	f8cd 901c 	str.w	r9, [sp, #28]
 8008c88:	464f      	mov	r7, r9
 8008c8a:	220a      	movs	r2, #10
 8008c8c:	9817      	ldr	r0, [sp, #92]	; 0x5c
 8008c8e:	7806      	ldrb	r6, [r0, #0]
 8008c90:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 8008c94:	b2d9      	uxtb	r1, r3
 8008c96:	2909      	cmp	r1, #9
 8008c98:	d92a      	bls.n	8008cf0 <_strtod_l+0x1b8>
 8008c9a:	9905      	ldr	r1, [sp, #20]
 8008c9c:	462a      	mov	r2, r5
 8008c9e:	f003 f9b2 	bl	800c006 <strncmp>
 8008ca2:	b398      	cbz	r0, 8008d0c <_strtod_l+0x1d4>
 8008ca4:	2000      	movs	r0, #0
 8008ca6:	4632      	mov	r2, r6
 8008ca8:	463d      	mov	r5, r7
 8008caa:	9005      	str	r0, [sp, #20]
 8008cac:	4603      	mov	r3, r0
 8008cae:	2a65      	cmp	r2, #101	; 0x65
 8008cb0:	d001      	beq.n	8008cb6 <_strtod_l+0x17e>
 8008cb2:	2a45      	cmp	r2, #69	; 0x45
 8008cb4:	d118      	bne.n	8008ce8 <_strtod_l+0x1b0>
 8008cb6:	b91d      	cbnz	r5, 8008cc0 <_strtod_l+0x188>
 8008cb8:	9a04      	ldr	r2, [sp, #16]
 8008cba:	4302      	orrs	r2, r0
 8008cbc:	d09e      	beq.n	8008bfc <_strtod_l+0xc4>
 8008cbe:	2500      	movs	r5, #0
 8008cc0:	f8dd 805c 	ldr.w	r8, [sp, #92]	; 0x5c
 8008cc4:	f108 0201 	add.w	r2, r8, #1
 8008cc8:	9217      	str	r2, [sp, #92]	; 0x5c
 8008cca:	f898 2001 	ldrb.w	r2, [r8, #1]
 8008cce:	2a2b      	cmp	r2, #43	; 0x2b
 8008cd0:	d075      	beq.n	8008dbe <_strtod_l+0x286>
 8008cd2:	2a2d      	cmp	r2, #45	; 0x2d
 8008cd4:	d07b      	beq.n	8008dce <_strtod_l+0x296>
 8008cd6:	f04f 0c00 	mov.w	ip, #0
 8008cda:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 8008cde:	2909      	cmp	r1, #9
 8008ce0:	f240 8082 	bls.w	8008de8 <_strtod_l+0x2b0>
 8008ce4:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 8008ce8:	2600      	movs	r6, #0
 8008cea:	e09d      	b.n	8008e28 <_strtod_l+0x2f0>
 8008cec:	2300      	movs	r3, #0
 8008cee:	e7c4      	b.n	8008c7a <_strtod_l+0x142>
 8008cf0:	2f08      	cmp	r7, #8
 8008cf2:	bfd8      	it	le
 8008cf4:	9907      	ldrle	r1, [sp, #28]
 8008cf6:	f100 0001 	add.w	r0, r0, #1
 8008cfa:	bfda      	itte	le
 8008cfc:	fb02 3301 	mlale	r3, r2, r1, r3
 8008d00:	9307      	strle	r3, [sp, #28]
 8008d02:	fb02 3909 	mlagt	r9, r2, r9, r3
 8008d06:	3701      	adds	r7, #1
 8008d08:	9017      	str	r0, [sp, #92]	; 0x5c
 8008d0a:	e7bf      	b.n	8008c8c <_strtod_l+0x154>
 8008d0c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8008d0e:	195a      	adds	r2, r3, r5
 8008d10:	9217      	str	r2, [sp, #92]	; 0x5c
 8008d12:	5d5a      	ldrb	r2, [r3, r5]
 8008d14:	2f00      	cmp	r7, #0
 8008d16:	d037      	beq.n	8008d88 <_strtod_l+0x250>
 8008d18:	9005      	str	r0, [sp, #20]
 8008d1a:	463d      	mov	r5, r7
 8008d1c:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 8008d20:	2b09      	cmp	r3, #9
 8008d22:	d912      	bls.n	8008d4a <_strtod_l+0x212>
 8008d24:	2301      	movs	r3, #1
 8008d26:	e7c2      	b.n	8008cae <_strtod_l+0x176>
 8008d28:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8008d2a:	1c5a      	adds	r2, r3, #1
 8008d2c:	9217      	str	r2, [sp, #92]	; 0x5c
 8008d2e:	785a      	ldrb	r2, [r3, #1]
 8008d30:	3001      	adds	r0, #1
 8008d32:	2a30      	cmp	r2, #48	; 0x30
 8008d34:	d0f8      	beq.n	8008d28 <_strtod_l+0x1f0>
 8008d36:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 8008d3a:	2b08      	cmp	r3, #8
 8008d3c:	f200 84d9 	bhi.w	80096f2 <_strtod_l+0xbba>
 8008d40:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8008d42:	9005      	str	r0, [sp, #20]
 8008d44:	2000      	movs	r0, #0
 8008d46:	9308      	str	r3, [sp, #32]
 8008d48:	4605      	mov	r5, r0
 8008d4a:	3a30      	subs	r2, #48	; 0x30
 8008d4c:	f100 0301 	add.w	r3, r0, #1
 8008d50:	d014      	beq.n	8008d7c <_strtod_l+0x244>
 8008d52:	9905      	ldr	r1, [sp, #20]
 8008d54:	4419      	add	r1, r3
 8008d56:	9105      	str	r1, [sp, #20]
 8008d58:	462b      	mov	r3, r5
 8008d5a:	eb00 0e05 	add.w	lr, r0, r5
 8008d5e:	210a      	movs	r1, #10
 8008d60:	4573      	cmp	r3, lr
 8008d62:	d113      	bne.n	8008d8c <_strtod_l+0x254>
 8008d64:	182b      	adds	r3, r5, r0
 8008d66:	2b08      	cmp	r3, #8
 8008d68:	f105 0501 	add.w	r5, r5, #1
 8008d6c:	4405      	add	r5, r0
 8008d6e:	dc1c      	bgt.n	8008daa <_strtod_l+0x272>
 8008d70:	9907      	ldr	r1, [sp, #28]
 8008d72:	230a      	movs	r3, #10
 8008d74:	fb03 2301 	mla	r3, r3, r1, r2
 8008d78:	9307      	str	r3, [sp, #28]
 8008d7a:	2300      	movs	r3, #0
 8008d7c:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8008d7e:	1c51      	adds	r1, r2, #1
 8008d80:	9117      	str	r1, [sp, #92]	; 0x5c
 8008d82:	7852      	ldrb	r2, [r2, #1]
 8008d84:	4618      	mov	r0, r3
 8008d86:	e7c9      	b.n	8008d1c <_strtod_l+0x1e4>
 8008d88:	4638      	mov	r0, r7
 8008d8a:	e7d2      	b.n	8008d32 <_strtod_l+0x1fa>
 8008d8c:	2b08      	cmp	r3, #8
 8008d8e:	dc04      	bgt.n	8008d9a <_strtod_l+0x262>
 8008d90:	9e07      	ldr	r6, [sp, #28]
 8008d92:	434e      	muls	r6, r1
 8008d94:	9607      	str	r6, [sp, #28]
 8008d96:	3301      	adds	r3, #1
 8008d98:	e7e2      	b.n	8008d60 <_strtod_l+0x228>
 8008d9a:	f103 0c01 	add.w	ip, r3, #1
 8008d9e:	f1bc 0f10 	cmp.w	ip, #16
 8008da2:	bfd8      	it	le
 8008da4:	fb01 f909 	mulle.w	r9, r1, r9
 8008da8:	e7f5      	b.n	8008d96 <_strtod_l+0x25e>
 8008daa:	2d10      	cmp	r5, #16
 8008dac:	bfdc      	itt	le
 8008dae:	230a      	movle	r3, #10
 8008db0:	fb03 2909 	mlale	r9, r3, r9, r2
 8008db4:	e7e1      	b.n	8008d7a <_strtod_l+0x242>
 8008db6:	2300      	movs	r3, #0
 8008db8:	9305      	str	r3, [sp, #20]
 8008dba:	2301      	movs	r3, #1
 8008dbc:	e77c      	b.n	8008cb8 <_strtod_l+0x180>
 8008dbe:	f04f 0c00 	mov.w	ip, #0
 8008dc2:	f108 0202 	add.w	r2, r8, #2
 8008dc6:	9217      	str	r2, [sp, #92]	; 0x5c
 8008dc8:	f898 2002 	ldrb.w	r2, [r8, #2]
 8008dcc:	e785      	b.n	8008cda <_strtod_l+0x1a2>
 8008dce:	f04f 0c01 	mov.w	ip, #1
 8008dd2:	e7f6      	b.n	8008dc2 <_strtod_l+0x28a>
 8008dd4:	0800c9fc 	.word	0x0800c9fc
 8008dd8:	0800c74c 	.word	0x0800c74c
 8008ddc:	7ff00000 	.word	0x7ff00000
 8008de0:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8008de2:	1c51      	adds	r1, r2, #1
 8008de4:	9117      	str	r1, [sp, #92]	; 0x5c
 8008de6:	7852      	ldrb	r2, [r2, #1]
 8008de8:	2a30      	cmp	r2, #48	; 0x30
 8008dea:	d0f9      	beq.n	8008de0 <_strtod_l+0x2a8>
 8008dec:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 8008df0:	2908      	cmp	r1, #8
 8008df2:	f63f af79 	bhi.w	8008ce8 <_strtod_l+0x1b0>
 8008df6:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 8008dfa:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8008dfc:	9206      	str	r2, [sp, #24]
 8008dfe:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8008e00:	1c51      	adds	r1, r2, #1
 8008e02:	9117      	str	r1, [sp, #92]	; 0x5c
 8008e04:	7852      	ldrb	r2, [r2, #1]
 8008e06:	f1a2 0630 	sub.w	r6, r2, #48	; 0x30
 8008e0a:	2e09      	cmp	r6, #9
 8008e0c:	d937      	bls.n	8008e7e <_strtod_l+0x346>
 8008e0e:	9e06      	ldr	r6, [sp, #24]
 8008e10:	1b89      	subs	r1, r1, r6
 8008e12:	2908      	cmp	r1, #8
 8008e14:	f644 661f 	movw	r6, #19999	; 0x4e1f
 8008e18:	dc02      	bgt.n	8008e20 <_strtod_l+0x2e8>
 8008e1a:	4576      	cmp	r6, lr
 8008e1c:	bfa8      	it	ge
 8008e1e:	4676      	movge	r6, lr
 8008e20:	f1bc 0f00 	cmp.w	ip, #0
 8008e24:	d000      	beq.n	8008e28 <_strtod_l+0x2f0>
 8008e26:	4276      	negs	r6, r6
 8008e28:	2d00      	cmp	r5, #0
 8008e2a:	d14d      	bne.n	8008ec8 <_strtod_l+0x390>
 8008e2c:	9904      	ldr	r1, [sp, #16]
 8008e2e:	4301      	orrs	r1, r0
 8008e30:	f47f aec6 	bne.w	8008bc0 <_strtod_l+0x88>
 8008e34:	2b00      	cmp	r3, #0
 8008e36:	f47f aee1 	bne.w	8008bfc <_strtod_l+0xc4>
 8008e3a:	2a69      	cmp	r2, #105	; 0x69
 8008e3c:	d027      	beq.n	8008e8e <_strtod_l+0x356>
 8008e3e:	dc24      	bgt.n	8008e8a <_strtod_l+0x352>
 8008e40:	2a49      	cmp	r2, #73	; 0x49
 8008e42:	d024      	beq.n	8008e8e <_strtod_l+0x356>
 8008e44:	2a4e      	cmp	r2, #78	; 0x4e
 8008e46:	f47f aed9 	bne.w	8008bfc <_strtod_l+0xc4>
 8008e4a:	499f      	ldr	r1, [pc, #636]	; (80090c8 <_strtod_l+0x590>)
 8008e4c:	a817      	add	r0, sp, #92	; 0x5c
 8008e4e:	f001 ff31 	bl	800acb4 <__match>
 8008e52:	2800      	cmp	r0, #0
 8008e54:	f43f aed2 	beq.w	8008bfc <_strtod_l+0xc4>
 8008e58:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8008e5a:	781b      	ldrb	r3, [r3, #0]
 8008e5c:	2b28      	cmp	r3, #40	; 0x28
 8008e5e:	d12d      	bne.n	8008ebc <_strtod_l+0x384>
 8008e60:	499a      	ldr	r1, [pc, #616]	; (80090cc <_strtod_l+0x594>)
 8008e62:	aa1a      	add	r2, sp, #104	; 0x68
 8008e64:	a817      	add	r0, sp, #92	; 0x5c
 8008e66:	f001 ff39 	bl	800acdc <__hexnan>
 8008e6a:	2805      	cmp	r0, #5
 8008e6c:	d126      	bne.n	8008ebc <_strtod_l+0x384>
 8008e6e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8008e70:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
 8008e74:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 8008e78:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 8008e7c:	e6a0      	b.n	8008bc0 <_strtod_l+0x88>
 8008e7e:	210a      	movs	r1, #10
 8008e80:	fb01 2e0e 	mla	lr, r1, lr, r2
 8008e84:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 8008e88:	e7b9      	b.n	8008dfe <_strtod_l+0x2c6>
 8008e8a:	2a6e      	cmp	r2, #110	; 0x6e
 8008e8c:	e7db      	b.n	8008e46 <_strtod_l+0x30e>
 8008e8e:	4990      	ldr	r1, [pc, #576]	; (80090d0 <_strtod_l+0x598>)
 8008e90:	a817      	add	r0, sp, #92	; 0x5c
 8008e92:	f001 ff0f 	bl	800acb4 <__match>
 8008e96:	2800      	cmp	r0, #0
 8008e98:	f43f aeb0 	beq.w	8008bfc <_strtod_l+0xc4>
 8008e9c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8008e9e:	498d      	ldr	r1, [pc, #564]	; (80090d4 <_strtod_l+0x59c>)
 8008ea0:	3b01      	subs	r3, #1
 8008ea2:	a817      	add	r0, sp, #92	; 0x5c
 8008ea4:	9317      	str	r3, [sp, #92]	; 0x5c
 8008ea6:	f001 ff05 	bl	800acb4 <__match>
 8008eaa:	b910      	cbnz	r0, 8008eb2 <_strtod_l+0x37a>
 8008eac:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8008eae:	3301      	adds	r3, #1
 8008eb0:	9317      	str	r3, [sp, #92]	; 0x5c
 8008eb2:	f8df b230 	ldr.w	fp, [pc, #560]	; 80090e4 <_strtod_l+0x5ac>
 8008eb6:	f04f 0a00 	mov.w	sl, #0
 8008eba:	e681      	b.n	8008bc0 <_strtod_l+0x88>
 8008ebc:	4886      	ldr	r0, [pc, #536]	; (80090d8 <_strtod_l+0x5a0>)
 8008ebe:	f003 f847 	bl	800bf50 <nan>
 8008ec2:	ec5b ab10 	vmov	sl, fp, d0
 8008ec6:	e67b      	b.n	8008bc0 <_strtod_l+0x88>
 8008ec8:	9b05      	ldr	r3, [sp, #20]
 8008eca:	9807      	ldr	r0, [sp, #28]
 8008ecc:	1af3      	subs	r3, r6, r3
 8008ece:	2f00      	cmp	r7, #0
 8008ed0:	bf08      	it	eq
 8008ed2:	462f      	moveq	r7, r5
 8008ed4:	2d10      	cmp	r5, #16
 8008ed6:	9306      	str	r3, [sp, #24]
 8008ed8:	46a8      	mov	r8, r5
 8008eda:	bfa8      	it	ge
 8008edc:	f04f 0810 	movge.w	r8, #16
 8008ee0:	f7f7 fb18 	bl	8000514 <__aeabi_ui2d>
 8008ee4:	2d09      	cmp	r5, #9
 8008ee6:	4682      	mov	sl, r0
 8008ee8:	468b      	mov	fp, r1
 8008eea:	dd13      	ble.n	8008f14 <_strtod_l+0x3dc>
 8008eec:	4b7b      	ldr	r3, [pc, #492]	; (80090dc <_strtod_l+0x5a4>)
 8008eee:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 8008ef2:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 8008ef6:	f7f7 fb87 	bl	8000608 <__aeabi_dmul>
 8008efa:	4682      	mov	sl, r0
 8008efc:	4648      	mov	r0, r9
 8008efe:	468b      	mov	fp, r1
 8008f00:	f7f7 fb08 	bl	8000514 <__aeabi_ui2d>
 8008f04:	4602      	mov	r2, r0
 8008f06:	460b      	mov	r3, r1
 8008f08:	4650      	mov	r0, sl
 8008f0a:	4659      	mov	r1, fp
 8008f0c:	f7f7 f9c6 	bl	800029c <__adddf3>
 8008f10:	4682      	mov	sl, r0
 8008f12:	468b      	mov	fp, r1
 8008f14:	2d0f      	cmp	r5, #15
 8008f16:	dc38      	bgt.n	8008f8a <_strtod_l+0x452>
 8008f18:	9b06      	ldr	r3, [sp, #24]
 8008f1a:	2b00      	cmp	r3, #0
 8008f1c:	f43f ae50 	beq.w	8008bc0 <_strtod_l+0x88>
 8008f20:	dd24      	ble.n	8008f6c <_strtod_l+0x434>
 8008f22:	2b16      	cmp	r3, #22
 8008f24:	dc0b      	bgt.n	8008f3e <_strtod_l+0x406>
 8008f26:	496d      	ldr	r1, [pc, #436]	; (80090dc <_strtod_l+0x5a4>)
 8008f28:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8008f2c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008f30:	4652      	mov	r2, sl
 8008f32:	465b      	mov	r3, fp
 8008f34:	f7f7 fb68 	bl	8000608 <__aeabi_dmul>
 8008f38:	4682      	mov	sl, r0
 8008f3a:	468b      	mov	fp, r1
 8008f3c:	e640      	b.n	8008bc0 <_strtod_l+0x88>
 8008f3e:	9a06      	ldr	r2, [sp, #24]
 8008f40:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 8008f44:	4293      	cmp	r3, r2
 8008f46:	db20      	blt.n	8008f8a <_strtod_l+0x452>
 8008f48:	4c64      	ldr	r4, [pc, #400]	; (80090dc <_strtod_l+0x5a4>)
 8008f4a:	f1c5 050f 	rsb	r5, r5, #15
 8008f4e:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 8008f52:	4652      	mov	r2, sl
 8008f54:	465b      	mov	r3, fp
 8008f56:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008f5a:	f7f7 fb55 	bl	8000608 <__aeabi_dmul>
 8008f5e:	9b06      	ldr	r3, [sp, #24]
 8008f60:	1b5d      	subs	r5, r3, r5
 8008f62:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 8008f66:	e9d4 2300 	ldrd	r2, r3, [r4]
 8008f6a:	e7e3      	b.n	8008f34 <_strtod_l+0x3fc>
 8008f6c:	9b06      	ldr	r3, [sp, #24]
 8008f6e:	3316      	adds	r3, #22
 8008f70:	db0b      	blt.n	8008f8a <_strtod_l+0x452>
 8008f72:	9b05      	ldr	r3, [sp, #20]
 8008f74:	1b9e      	subs	r6, r3, r6
 8008f76:	4b59      	ldr	r3, [pc, #356]	; (80090dc <_strtod_l+0x5a4>)
 8008f78:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
 8008f7c:	e9d6 2300 	ldrd	r2, r3, [r6]
 8008f80:	4650      	mov	r0, sl
 8008f82:	4659      	mov	r1, fp
 8008f84:	f7f7 fc6a 	bl	800085c <__aeabi_ddiv>
 8008f88:	e7d6      	b.n	8008f38 <_strtod_l+0x400>
 8008f8a:	9b06      	ldr	r3, [sp, #24]
 8008f8c:	eba5 0808 	sub.w	r8, r5, r8
 8008f90:	4498      	add	r8, r3
 8008f92:	f1b8 0f00 	cmp.w	r8, #0
 8008f96:	dd74      	ble.n	8009082 <_strtod_l+0x54a>
 8008f98:	f018 030f 	ands.w	r3, r8, #15
 8008f9c:	d00a      	beq.n	8008fb4 <_strtod_l+0x47c>
 8008f9e:	494f      	ldr	r1, [pc, #316]	; (80090dc <_strtod_l+0x5a4>)
 8008fa0:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8008fa4:	4652      	mov	r2, sl
 8008fa6:	465b      	mov	r3, fp
 8008fa8:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008fac:	f7f7 fb2c 	bl	8000608 <__aeabi_dmul>
 8008fb0:	4682      	mov	sl, r0
 8008fb2:	468b      	mov	fp, r1
 8008fb4:	f038 080f 	bics.w	r8, r8, #15
 8008fb8:	d04f      	beq.n	800905a <_strtod_l+0x522>
 8008fba:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 8008fbe:	dd22      	ble.n	8009006 <_strtod_l+0x4ce>
 8008fc0:	2500      	movs	r5, #0
 8008fc2:	462e      	mov	r6, r5
 8008fc4:	9507      	str	r5, [sp, #28]
 8008fc6:	9505      	str	r5, [sp, #20]
 8008fc8:	2322      	movs	r3, #34	; 0x22
 8008fca:	f8df b118 	ldr.w	fp, [pc, #280]	; 80090e4 <_strtod_l+0x5ac>
 8008fce:	6023      	str	r3, [r4, #0]
 8008fd0:	f04f 0a00 	mov.w	sl, #0
 8008fd4:	9b07      	ldr	r3, [sp, #28]
 8008fd6:	2b00      	cmp	r3, #0
 8008fd8:	f43f adf2 	beq.w	8008bc0 <_strtod_l+0x88>
 8008fdc:	9918      	ldr	r1, [sp, #96]	; 0x60
 8008fde:	4620      	mov	r0, r4
 8008fe0:	f001 ff88 	bl	800aef4 <_Bfree>
 8008fe4:	9905      	ldr	r1, [sp, #20]
 8008fe6:	4620      	mov	r0, r4
 8008fe8:	f001 ff84 	bl	800aef4 <_Bfree>
 8008fec:	4631      	mov	r1, r6
 8008fee:	4620      	mov	r0, r4
 8008ff0:	f001 ff80 	bl	800aef4 <_Bfree>
 8008ff4:	9907      	ldr	r1, [sp, #28]
 8008ff6:	4620      	mov	r0, r4
 8008ff8:	f001 ff7c 	bl	800aef4 <_Bfree>
 8008ffc:	4629      	mov	r1, r5
 8008ffe:	4620      	mov	r0, r4
 8009000:	f001 ff78 	bl	800aef4 <_Bfree>
 8009004:	e5dc      	b.n	8008bc0 <_strtod_l+0x88>
 8009006:	4b36      	ldr	r3, [pc, #216]	; (80090e0 <_strtod_l+0x5a8>)
 8009008:	9304      	str	r3, [sp, #16]
 800900a:	2300      	movs	r3, #0
 800900c:	ea4f 1828 	mov.w	r8, r8, asr #4
 8009010:	4650      	mov	r0, sl
 8009012:	4659      	mov	r1, fp
 8009014:	4699      	mov	r9, r3
 8009016:	f1b8 0f01 	cmp.w	r8, #1
 800901a:	dc21      	bgt.n	8009060 <_strtod_l+0x528>
 800901c:	b10b      	cbz	r3, 8009022 <_strtod_l+0x4ea>
 800901e:	4682      	mov	sl, r0
 8009020:	468b      	mov	fp, r1
 8009022:	4b2f      	ldr	r3, [pc, #188]	; (80090e0 <_strtod_l+0x5a8>)
 8009024:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 8009028:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 800902c:	4652      	mov	r2, sl
 800902e:	465b      	mov	r3, fp
 8009030:	e9d9 0100 	ldrd	r0, r1, [r9]
 8009034:	f7f7 fae8 	bl	8000608 <__aeabi_dmul>
 8009038:	4b2a      	ldr	r3, [pc, #168]	; (80090e4 <_strtod_l+0x5ac>)
 800903a:	460a      	mov	r2, r1
 800903c:	400b      	ands	r3, r1
 800903e:	492a      	ldr	r1, [pc, #168]	; (80090e8 <_strtod_l+0x5b0>)
 8009040:	428b      	cmp	r3, r1
 8009042:	4682      	mov	sl, r0
 8009044:	d8bc      	bhi.n	8008fc0 <_strtod_l+0x488>
 8009046:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 800904a:	428b      	cmp	r3, r1
 800904c:	bf86      	itte	hi
 800904e:	f8df b09c 	ldrhi.w	fp, [pc, #156]	; 80090ec <_strtod_l+0x5b4>
 8009052:	f04f 3aff 	movhi.w	sl, #4294967295
 8009056:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 800905a:	2300      	movs	r3, #0
 800905c:	9304      	str	r3, [sp, #16]
 800905e:	e084      	b.n	800916a <_strtod_l+0x632>
 8009060:	f018 0f01 	tst.w	r8, #1
 8009064:	d005      	beq.n	8009072 <_strtod_l+0x53a>
 8009066:	9b04      	ldr	r3, [sp, #16]
 8009068:	e9d3 2300 	ldrd	r2, r3, [r3]
 800906c:	f7f7 facc 	bl	8000608 <__aeabi_dmul>
 8009070:	2301      	movs	r3, #1
 8009072:	9a04      	ldr	r2, [sp, #16]
 8009074:	3208      	adds	r2, #8
 8009076:	f109 0901 	add.w	r9, r9, #1
 800907a:	ea4f 0868 	mov.w	r8, r8, asr #1
 800907e:	9204      	str	r2, [sp, #16]
 8009080:	e7c9      	b.n	8009016 <_strtod_l+0x4de>
 8009082:	d0ea      	beq.n	800905a <_strtod_l+0x522>
 8009084:	f1c8 0800 	rsb	r8, r8, #0
 8009088:	f018 020f 	ands.w	r2, r8, #15
 800908c:	d00a      	beq.n	80090a4 <_strtod_l+0x56c>
 800908e:	4b13      	ldr	r3, [pc, #76]	; (80090dc <_strtod_l+0x5a4>)
 8009090:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009094:	4650      	mov	r0, sl
 8009096:	4659      	mov	r1, fp
 8009098:	e9d3 2300 	ldrd	r2, r3, [r3]
 800909c:	f7f7 fbde 	bl	800085c <__aeabi_ddiv>
 80090a0:	4682      	mov	sl, r0
 80090a2:	468b      	mov	fp, r1
 80090a4:	ea5f 1828 	movs.w	r8, r8, asr #4
 80090a8:	d0d7      	beq.n	800905a <_strtod_l+0x522>
 80090aa:	f1b8 0f1f 	cmp.w	r8, #31
 80090ae:	dd1f      	ble.n	80090f0 <_strtod_l+0x5b8>
 80090b0:	2500      	movs	r5, #0
 80090b2:	462e      	mov	r6, r5
 80090b4:	9507      	str	r5, [sp, #28]
 80090b6:	9505      	str	r5, [sp, #20]
 80090b8:	2322      	movs	r3, #34	; 0x22
 80090ba:	f04f 0a00 	mov.w	sl, #0
 80090be:	f04f 0b00 	mov.w	fp, #0
 80090c2:	6023      	str	r3, [r4, #0]
 80090c4:	e786      	b.n	8008fd4 <_strtod_l+0x49c>
 80090c6:	bf00      	nop
 80090c8:	0800c71d 	.word	0x0800c71d
 80090cc:	0800c760 	.word	0x0800c760
 80090d0:	0800c715 	.word	0x0800c715
 80090d4:	0800c8a4 	.word	0x0800c8a4
 80090d8:	0800cbb8 	.word	0x0800cbb8
 80090dc:	0800ca98 	.word	0x0800ca98
 80090e0:	0800ca70 	.word	0x0800ca70
 80090e4:	7ff00000 	.word	0x7ff00000
 80090e8:	7ca00000 	.word	0x7ca00000
 80090ec:	7fefffff 	.word	0x7fefffff
 80090f0:	f018 0310 	ands.w	r3, r8, #16
 80090f4:	bf18      	it	ne
 80090f6:	236a      	movne	r3, #106	; 0x6a
 80090f8:	f8df 93ac 	ldr.w	r9, [pc, #940]	; 80094a8 <_strtod_l+0x970>
 80090fc:	9304      	str	r3, [sp, #16]
 80090fe:	4650      	mov	r0, sl
 8009100:	4659      	mov	r1, fp
 8009102:	2300      	movs	r3, #0
 8009104:	f018 0f01 	tst.w	r8, #1
 8009108:	d004      	beq.n	8009114 <_strtod_l+0x5dc>
 800910a:	e9d9 2300 	ldrd	r2, r3, [r9]
 800910e:	f7f7 fa7b 	bl	8000608 <__aeabi_dmul>
 8009112:	2301      	movs	r3, #1
 8009114:	ea5f 0868 	movs.w	r8, r8, asr #1
 8009118:	f109 0908 	add.w	r9, r9, #8
 800911c:	d1f2      	bne.n	8009104 <_strtod_l+0x5cc>
 800911e:	b10b      	cbz	r3, 8009124 <_strtod_l+0x5ec>
 8009120:	4682      	mov	sl, r0
 8009122:	468b      	mov	fp, r1
 8009124:	9b04      	ldr	r3, [sp, #16]
 8009126:	b1c3      	cbz	r3, 800915a <_strtod_l+0x622>
 8009128:	f3cb 520a 	ubfx	r2, fp, #20, #11
 800912c:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8009130:	2b00      	cmp	r3, #0
 8009132:	4659      	mov	r1, fp
 8009134:	dd11      	ble.n	800915a <_strtod_l+0x622>
 8009136:	2b1f      	cmp	r3, #31
 8009138:	f340 8124 	ble.w	8009384 <_strtod_l+0x84c>
 800913c:	2b34      	cmp	r3, #52	; 0x34
 800913e:	bfde      	ittt	le
 8009140:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 8009144:	f04f 33ff 	movle.w	r3, #4294967295
 8009148:	fa03 f202 	lslle.w	r2, r3, r2
 800914c:	f04f 0a00 	mov.w	sl, #0
 8009150:	bfcc      	ite	gt
 8009152:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 8009156:	ea02 0b01 	andle.w	fp, r2, r1
 800915a:	2200      	movs	r2, #0
 800915c:	2300      	movs	r3, #0
 800915e:	4650      	mov	r0, sl
 8009160:	4659      	mov	r1, fp
 8009162:	f7f7 fcb9 	bl	8000ad8 <__aeabi_dcmpeq>
 8009166:	2800      	cmp	r0, #0
 8009168:	d1a2      	bne.n	80090b0 <_strtod_l+0x578>
 800916a:	9b07      	ldr	r3, [sp, #28]
 800916c:	9300      	str	r3, [sp, #0]
 800916e:	9908      	ldr	r1, [sp, #32]
 8009170:	462b      	mov	r3, r5
 8009172:	463a      	mov	r2, r7
 8009174:	4620      	mov	r0, r4
 8009176:	f001 ff25 	bl	800afc4 <__s2b>
 800917a:	9007      	str	r0, [sp, #28]
 800917c:	2800      	cmp	r0, #0
 800917e:	f43f af1f 	beq.w	8008fc0 <_strtod_l+0x488>
 8009182:	9b05      	ldr	r3, [sp, #20]
 8009184:	1b9e      	subs	r6, r3, r6
 8009186:	9b06      	ldr	r3, [sp, #24]
 8009188:	2b00      	cmp	r3, #0
 800918a:	bfb4      	ite	lt
 800918c:	4633      	movlt	r3, r6
 800918e:	2300      	movge	r3, #0
 8009190:	930c      	str	r3, [sp, #48]	; 0x30
 8009192:	9b06      	ldr	r3, [sp, #24]
 8009194:	2500      	movs	r5, #0
 8009196:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800919a:	9312      	str	r3, [sp, #72]	; 0x48
 800919c:	462e      	mov	r6, r5
 800919e:	9b07      	ldr	r3, [sp, #28]
 80091a0:	4620      	mov	r0, r4
 80091a2:	6859      	ldr	r1, [r3, #4]
 80091a4:	f001 fe66 	bl	800ae74 <_Balloc>
 80091a8:	9005      	str	r0, [sp, #20]
 80091aa:	2800      	cmp	r0, #0
 80091ac:	f43f af0c 	beq.w	8008fc8 <_strtod_l+0x490>
 80091b0:	9b07      	ldr	r3, [sp, #28]
 80091b2:	691a      	ldr	r2, [r3, #16]
 80091b4:	3202      	adds	r2, #2
 80091b6:	f103 010c 	add.w	r1, r3, #12
 80091ba:	0092      	lsls	r2, r2, #2
 80091bc:	300c      	adds	r0, #12
 80091be:	f001 fe4b 	bl	800ae58 <memcpy>
 80091c2:	ec4b ab10 	vmov	d0, sl, fp
 80091c6:	aa1a      	add	r2, sp, #104	; 0x68
 80091c8:	a919      	add	r1, sp, #100	; 0x64
 80091ca:	4620      	mov	r0, r4
 80091cc:	f002 fa40 	bl	800b650 <__d2b>
 80091d0:	ec4b ab18 	vmov	d8, sl, fp
 80091d4:	9018      	str	r0, [sp, #96]	; 0x60
 80091d6:	2800      	cmp	r0, #0
 80091d8:	f43f aef6 	beq.w	8008fc8 <_strtod_l+0x490>
 80091dc:	2101      	movs	r1, #1
 80091de:	4620      	mov	r0, r4
 80091e0:	f001 ff8a 	bl	800b0f8 <__i2b>
 80091e4:	4606      	mov	r6, r0
 80091e6:	2800      	cmp	r0, #0
 80091e8:	f43f aeee 	beq.w	8008fc8 <_strtod_l+0x490>
 80091ec:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80091ee:	9904      	ldr	r1, [sp, #16]
 80091f0:	2b00      	cmp	r3, #0
 80091f2:	bfab      	itete	ge
 80091f4:	9a0c      	ldrge	r2, [sp, #48]	; 0x30
 80091f6:	9a12      	ldrlt	r2, [sp, #72]	; 0x48
 80091f8:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 80091fa:	f8dd 9030 	ldrlt.w	r9, [sp, #48]	; 0x30
 80091fe:	bfac      	ite	ge
 8009200:	eb03 0902 	addge.w	r9, r3, r2
 8009204:	1ad7      	sublt	r7, r2, r3
 8009206:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8009208:	eba3 0801 	sub.w	r8, r3, r1
 800920c:	4490      	add	r8, r2
 800920e:	4ba1      	ldr	r3, [pc, #644]	; (8009494 <_strtod_l+0x95c>)
 8009210:	f108 38ff 	add.w	r8, r8, #4294967295
 8009214:	4598      	cmp	r8, r3
 8009216:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800921a:	f280 80c7 	bge.w	80093ac <_strtod_l+0x874>
 800921e:	eba3 0308 	sub.w	r3, r3, r8
 8009222:	2b1f      	cmp	r3, #31
 8009224:	eba2 0203 	sub.w	r2, r2, r3
 8009228:	f04f 0101 	mov.w	r1, #1
 800922c:	f300 80b1 	bgt.w	8009392 <_strtod_l+0x85a>
 8009230:	fa01 f303 	lsl.w	r3, r1, r3
 8009234:	930d      	str	r3, [sp, #52]	; 0x34
 8009236:	2300      	movs	r3, #0
 8009238:	9308      	str	r3, [sp, #32]
 800923a:	eb09 0802 	add.w	r8, r9, r2
 800923e:	9b04      	ldr	r3, [sp, #16]
 8009240:	45c1      	cmp	r9, r8
 8009242:	4417      	add	r7, r2
 8009244:	441f      	add	r7, r3
 8009246:	464b      	mov	r3, r9
 8009248:	bfa8      	it	ge
 800924a:	4643      	movge	r3, r8
 800924c:	42bb      	cmp	r3, r7
 800924e:	bfa8      	it	ge
 8009250:	463b      	movge	r3, r7
 8009252:	2b00      	cmp	r3, #0
 8009254:	bfc2      	ittt	gt
 8009256:	eba8 0803 	subgt.w	r8, r8, r3
 800925a:	1aff      	subgt	r7, r7, r3
 800925c:	eba9 0903 	subgt.w	r9, r9, r3
 8009260:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009262:	2b00      	cmp	r3, #0
 8009264:	dd17      	ble.n	8009296 <_strtod_l+0x75e>
 8009266:	4631      	mov	r1, r6
 8009268:	461a      	mov	r2, r3
 800926a:	4620      	mov	r0, r4
 800926c:	f002 f804 	bl	800b278 <__pow5mult>
 8009270:	4606      	mov	r6, r0
 8009272:	2800      	cmp	r0, #0
 8009274:	f43f aea8 	beq.w	8008fc8 <_strtod_l+0x490>
 8009278:	4601      	mov	r1, r0
 800927a:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800927c:	4620      	mov	r0, r4
 800927e:	f001 ff51 	bl	800b124 <__multiply>
 8009282:	900b      	str	r0, [sp, #44]	; 0x2c
 8009284:	2800      	cmp	r0, #0
 8009286:	f43f ae9f 	beq.w	8008fc8 <_strtod_l+0x490>
 800928a:	9918      	ldr	r1, [sp, #96]	; 0x60
 800928c:	4620      	mov	r0, r4
 800928e:	f001 fe31 	bl	800aef4 <_Bfree>
 8009292:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009294:	9318      	str	r3, [sp, #96]	; 0x60
 8009296:	f1b8 0f00 	cmp.w	r8, #0
 800929a:	f300 808c 	bgt.w	80093b6 <_strtod_l+0x87e>
 800929e:	9b06      	ldr	r3, [sp, #24]
 80092a0:	2b00      	cmp	r3, #0
 80092a2:	dd08      	ble.n	80092b6 <_strtod_l+0x77e>
 80092a4:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80092a6:	9905      	ldr	r1, [sp, #20]
 80092a8:	4620      	mov	r0, r4
 80092aa:	f001 ffe5 	bl	800b278 <__pow5mult>
 80092ae:	9005      	str	r0, [sp, #20]
 80092b0:	2800      	cmp	r0, #0
 80092b2:	f43f ae89 	beq.w	8008fc8 <_strtod_l+0x490>
 80092b6:	2f00      	cmp	r7, #0
 80092b8:	dd08      	ble.n	80092cc <_strtod_l+0x794>
 80092ba:	9905      	ldr	r1, [sp, #20]
 80092bc:	463a      	mov	r2, r7
 80092be:	4620      	mov	r0, r4
 80092c0:	f002 f834 	bl	800b32c <__lshift>
 80092c4:	9005      	str	r0, [sp, #20]
 80092c6:	2800      	cmp	r0, #0
 80092c8:	f43f ae7e 	beq.w	8008fc8 <_strtod_l+0x490>
 80092cc:	f1b9 0f00 	cmp.w	r9, #0
 80092d0:	dd08      	ble.n	80092e4 <_strtod_l+0x7ac>
 80092d2:	4631      	mov	r1, r6
 80092d4:	464a      	mov	r2, r9
 80092d6:	4620      	mov	r0, r4
 80092d8:	f002 f828 	bl	800b32c <__lshift>
 80092dc:	4606      	mov	r6, r0
 80092de:	2800      	cmp	r0, #0
 80092e0:	f43f ae72 	beq.w	8008fc8 <_strtod_l+0x490>
 80092e4:	9a05      	ldr	r2, [sp, #20]
 80092e6:	9918      	ldr	r1, [sp, #96]	; 0x60
 80092e8:	4620      	mov	r0, r4
 80092ea:	f002 f8ab 	bl	800b444 <__mdiff>
 80092ee:	4605      	mov	r5, r0
 80092f0:	2800      	cmp	r0, #0
 80092f2:	f43f ae69 	beq.w	8008fc8 <_strtod_l+0x490>
 80092f6:	68c3      	ldr	r3, [r0, #12]
 80092f8:	930b      	str	r3, [sp, #44]	; 0x2c
 80092fa:	2300      	movs	r3, #0
 80092fc:	60c3      	str	r3, [r0, #12]
 80092fe:	4631      	mov	r1, r6
 8009300:	f002 f884 	bl	800b40c <__mcmp>
 8009304:	2800      	cmp	r0, #0
 8009306:	da60      	bge.n	80093ca <_strtod_l+0x892>
 8009308:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800930a:	ea53 030a 	orrs.w	r3, r3, sl
 800930e:	f040 8082 	bne.w	8009416 <_strtod_l+0x8de>
 8009312:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8009316:	2b00      	cmp	r3, #0
 8009318:	d17d      	bne.n	8009416 <_strtod_l+0x8de>
 800931a:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800931e:	0d1b      	lsrs	r3, r3, #20
 8009320:	051b      	lsls	r3, r3, #20
 8009322:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8009326:	d976      	bls.n	8009416 <_strtod_l+0x8de>
 8009328:	696b      	ldr	r3, [r5, #20]
 800932a:	b913      	cbnz	r3, 8009332 <_strtod_l+0x7fa>
 800932c:	692b      	ldr	r3, [r5, #16]
 800932e:	2b01      	cmp	r3, #1
 8009330:	dd71      	ble.n	8009416 <_strtod_l+0x8de>
 8009332:	4629      	mov	r1, r5
 8009334:	2201      	movs	r2, #1
 8009336:	4620      	mov	r0, r4
 8009338:	f001 fff8 	bl	800b32c <__lshift>
 800933c:	4631      	mov	r1, r6
 800933e:	4605      	mov	r5, r0
 8009340:	f002 f864 	bl	800b40c <__mcmp>
 8009344:	2800      	cmp	r0, #0
 8009346:	dd66      	ble.n	8009416 <_strtod_l+0x8de>
 8009348:	9904      	ldr	r1, [sp, #16]
 800934a:	4a53      	ldr	r2, [pc, #332]	; (8009498 <_strtod_l+0x960>)
 800934c:	465b      	mov	r3, fp
 800934e:	2900      	cmp	r1, #0
 8009350:	f000 8081 	beq.w	8009456 <_strtod_l+0x91e>
 8009354:	ea02 010b 	and.w	r1, r2, fp
 8009358:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 800935c:	dc7b      	bgt.n	8009456 <_strtod_l+0x91e>
 800935e:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8009362:	f77f aea9 	ble.w	80090b8 <_strtod_l+0x580>
 8009366:	4b4d      	ldr	r3, [pc, #308]	; (800949c <_strtod_l+0x964>)
 8009368:	4650      	mov	r0, sl
 800936a:	4659      	mov	r1, fp
 800936c:	2200      	movs	r2, #0
 800936e:	f7f7 f94b 	bl	8000608 <__aeabi_dmul>
 8009372:	460b      	mov	r3, r1
 8009374:	4303      	orrs	r3, r0
 8009376:	bf08      	it	eq
 8009378:	2322      	moveq	r3, #34	; 0x22
 800937a:	4682      	mov	sl, r0
 800937c:	468b      	mov	fp, r1
 800937e:	bf08      	it	eq
 8009380:	6023      	streq	r3, [r4, #0]
 8009382:	e62b      	b.n	8008fdc <_strtod_l+0x4a4>
 8009384:	f04f 32ff 	mov.w	r2, #4294967295
 8009388:	fa02 f303 	lsl.w	r3, r2, r3
 800938c:	ea03 0a0a 	and.w	sl, r3, sl
 8009390:	e6e3      	b.n	800915a <_strtod_l+0x622>
 8009392:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 8009396:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 800939a:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 800939e:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 80093a2:	fa01 f308 	lsl.w	r3, r1, r8
 80093a6:	9308      	str	r3, [sp, #32]
 80093a8:	910d      	str	r1, [sp, #52]	; 0x34
 80093aa:	e746      	b.n	800923a <_strtod_l+0x702>
 80093ac:	2300      	movs	r3, #0
 80093ae:	9308      	str	r3, [sp, #32]
 80093b0:	2301      	movs	r3, #1
 80093b2:	930d      	str	r3, [sp, #52]	; 0x34
 80093b4:	e741      	b.n	800923a <_strtod_l+0x702>
 80093b6:	9918      	ldr	r1, [sp, #96]	; 0x60
 80093b8:	4642      	mov	r2, r8
 80093ba:	4620      	mov	r0, r4
 80093bc:	f001 ffb6 	bl	800b32c <__lshift>
 80093c0:	9018      	str	r0, [sp, #96]	; 0x60
 80093c2:	2800      	cmp	r0, #0
 80093c4:	f47f af6b 	bne.w	800929e <_strtod_l+0x766>
 80093c8:	e5fe      	b.n	8008fc8 <_strtod_l+0x490>
 80093ca:	465f      	mov	r7, fp
 80093cc:	d16e      	bne.n	80094ac <_strtod_l+0x974>
 80093ce:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80093d0:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80093d4:	b342      	cbz	r2, 8009428 <_strtod_l+0x8f0>
 80093d6:	4a32      	ldr	r2, [pc, #200]	; (80094a0 <_strtod_l+0x968>)
 80093d8:	4293      	cmp	r3, r2
 80093da:	d128      	bne.n	800942e <_strtod_l+0x8f6>
 80093dc:	9b04      	ldr	r3, [sp, #16]
 80093de:	4651      	mov	r1, sl
 80093e0:	b1eb      	cbz	r3, 800941e <_strtod_l+0x8e6>
 80093e2:	4b2d      	ldr	r3, [pc, #180]	; (8009498 <_strtod_l+0x960>)
 80093e4:	403b      	ands	r3, r7
 80093e6:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 80093ea:	f04f 32ff 	mov.w	r2, #4294967295
 80093ee:	d819      	bhi.n	8009424 <_strtod_l+0x8ec>
 80093f0:	0d1b      	lsrs	r3, r3, #20
 80093f2:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 80093f6:	fa02 f303 	lsl.w	r3, r2, r3
 80093fa:	4299      	cmp	r1, r3
 80093fc:	d117      	bne.n	800942e <_strtod_l+0x8f6>
 80093fe:	4b29      	ldr	r3, [pc, #164]	; (80094a4 <_strtod_l+0x96c>)
 8009400:	429f      	cmp	r7, r3
 8009402:	d102      	bne.n	800940a <_strtod_l+0x8d2>
 8009404:	3101      	adds	r1, #1
 8009406:	f43f addf 	beq.w	8008fc8 <_strtod_l+0x490>
 800940a:	4b23      	ldr	r3, [pc, #140]	; (8009498 <_strtod_l+0x960>)
 800940c:	403b      	ands	r3, r7
 800940e:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 8009412:	f04f 0a00 	mov.w	sl, #0
 8009416:	9b04      	ldr	r3, [sp, #16]
 8009418:	2b00      	cmp	r3, #0
 800941a:	d1a4      	bne.n	8009366 <_strtod_l+0x82e>
 800941c:	e5de      	b.n	8008fdc <_strtod_l+0x4a4>
 800941e:	f04f 33ff 	mov.w	r3, #4294967295
 8009422:	e7ea      	b.n	80093fa <_strtod_l+0x8c2>
 8009424:	4613      	mov	r3, r2
 8009426:	e7e8      	b.n	80093fa <_strtod_l+0x8c2>
 8009428:	ea53 030a 	orrs.w	r3, r3, sl
 800942c:	d08c      	beq.n	8009348 <_strtod_l+0x810>
 800942e:	9b08      	ldr	r3, [sp, #32]
 8009430:	b1db      	cbz	r3, 800946a <_strtod_l+0x932>
 8009432:	423b      	tst	r3, r7
 8009434:	d0ef      	beq.n	8009416 <_strtod_l+0x8de>
 8009436:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009438:	9a04      	ldr	r2, [sp, #16]
 800943a:	4650      	mov	r0, sl
 800943c:	4659      	mov	r1, fp
 800943e:	b1c3      	cbz	r3, 8009472 <_strtod_l+0x93a>
 8009440:	f7ff fb5c 	bl	8008afc <sulp>
 8009444:	4602      	mov	r2, r0
 8009446:	460b      	mov	r3, r1
 8009448:	ec51 0b18 	vmov	r0, r1, d8
 800944c:	f7f6 ff26 	bl	800029c <__adddf3>
 8009450:	4682      	mov	sl, r0
 8009452:	468b      	mov	fp, r1
 8009454:	e7df      	b.n	8009416 <_strtod_l+0x8de>
 8009456:	4013      	ands	r3, r2
 8009458:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800945c:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8009460:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8009464:	f04f 3aff 	mov.w	sl, #4294967295
 8009468:	e7d5      	b.n	8009416 <_strtod_l+0x8de>
 800946a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800946c:	ea13 0f0a 	tst.w	r3, sl
 8009470:	e7e0      	b.n	8009434 <_strtod_l+0x8fc>
 8009472:	f7ff fb43 	bl	8008afc <sulp>
 8009476:	4602      	mov	r2, r0
 8009478:	460b      	mov	r3, r1
 800947a:	ec51 0b18 	vmov	r0, r1, d8
 800947e:	f7f6 ff0b 	bl	8000298 <__aeabi_dsub>
 8009482:	2200      	movs	r2, #0
 8009484:	2300      	movs	r3, #0
 8009486:	4682      	mov	sl, r0
 8009488:	468b      	mov	fp, r1
 800948a:	f7f7 fb25 	bl	8000ad8 <__aeabi_dcmpeq>
 800948e:	2800      	cmp	r0, #0
 8009490:	d0c1      	beq.n	8009416 <_strtod_l+0x8de>
 8009492:	e611      	b.n	80090b8 <_strtod_l+0x580>
 8009494:	fffffc02 	.word	0xfffffc02
 8009498:	7ff00000 	.word	0x7ff00000
 800949c:	39500000 	.word	0x39500000
 80094a0:	000fffff 	.word	0x000fffff
 80094a4:	7fefffff 	.word	0x7fefffff
 80094a8:	0800c778 	.word	0x0800c778
 80094ac:	4631      	mov	r1, r6
 80094ae:	4628      	mov	r0, r5
 80094b0:	f002 f92a 	bl	800b708 <__ratio>
 80094b4:	ec59 8b10 	vmov	r8, r9, d0
 80094b8:	ee10 0a10 	vmov	r0, s0
 80094bc:	2200      	movs	r2, #0
 80094be:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80094c2:	4649      	mov	r1, r9
 80094c4:	f7f7 fb1c 	bl	8000b00 <__aeabi_dcmple>
 80094c8:	2800      	cmp	r0, #0
 80094ca:	d07a      	beq.n	80095c2 <_strtod_l+0xa8a>
 80094cc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80094ce:	2b00      	cmp	r3, #0
 80094d0:	d04a      	beq.n	8009568 <_strtod_l+0xa30>
 80094d2:	4b95      	ldr	r3, [pc, #596]	; (8009728 <_strtod_l+0xbf0>)
 80094d4:	2200      	movs	r2, #0
 80094d6:	e9cd 2308 	strd	r2, r3, [sp, #32]
 80094da:	f8df 924c 	ldr.w	r9, [pc, #588]	; 8009728 <_strtod_l+0xbf0>
 80094de:	f04f 0800 	mov.w	r8, #0
 80094e2:	4b92      	ldr	r3, [pc, #584]	; (800972c <_strtod_l+0xbf4>)
 80094e4:	403b      	ands	r3, r7
 80094e6:	930d      	str	r3, [sp, #52]	; 0x34
 80094e8:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80094ea:	4b91      	ldr	r3, [pc, #580]	; (8009730 <_strtod_l+0xbf8>)
 80094ec:	429a      	cmp	r2, r3
 80094ee:	f040 80b0 	bne.w	8009652 <_strtod_l+0xb1a>
 80094f2:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80094f6:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 80094fa:	ec4b ab10 	vmov	d0, sl, fp
 80094fe:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8009502:	f002 f829 	bl	800b558 <__ulp>
 8009506:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800950a:	ec53 2b10 	vmov	r2, r3, d0
 800950e:	f7f7 f87b 	bl	8000608 <__aeabi_dmul>
 8009512:	4652      	mov	r2, sl
 8009514:	465b      	mov	r3, fp
 8009516:	f7f6 fec1 	bl	800029c <__adddf3>
 800951a:	460b      	mov	r3, r1
 800951c:	4983      	ldr	r1, [pc, #524]	; (800972c <_strtod_l+0xbf4>)
 800951e:	4a85      	ldr	r2, [pc, #532]	; (8009734 <_strtod_l+0xbfc>)
 8009520:	4019      	ands	r1, r3
 8009522:	4291      	cmp	r1, r2
 8009524:	4682      	mov	sl, r0
 8009526:	d960      	bls.n	80095ea <_strtod_l+0xab2>
 8009528:	ee18 3a90 	vmov	r3, s17
 800952c:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 8009530:	4293      	cmp	r3, r2
 8009532:	d104      	bne.n	800953e <_strtod_l+0xa06>
 8009534:	ee18 3a10 	vmov	r3, s16
 8009538:	3301      	adds	r3, #1
 800953a:	f43f ad45 	beq.w	8008fc8 <_strtod_l+0x490>
 800953e:	f8df b200 	ldr.w	fp, [pc, #512]	; 8009740 <_strtod_l+0xc08>
 8009542:	f04f 3aff 	mov.w	sl, #4294967295
 8009546:	9918      	ldr	r1, [sp, #96]	; 0x60
 8009548:	4620      	mov	r0, r4
 800954a:	f001 fcd3 	bl	800aef4 <_Bfree>
 800954e:	9905      	ldr	r1, [sp, #20]
 8009550:	4620      	mov	r0, r4
 8009552:	f001 fccf 	bl	800aef4 <_Bfree>
 8009556:	4631      	mov	r1, r6
 8009558:	4620      	mov	r0, r4
 800955a:	f001 fccb 	bl	800aef4 <_Bfree>
 800955e:	4629      	mov	r1, r5
 8009560:	4620      	mov	r0, r4
 8009562:	f001 fcc7 	bl	800aef4 <_Bfree>
 8009566:	e61a      	b.n	800919e <_strtod_l+0x666>
 8009568:	f1ba 0f00 	cmp.w	sl, #0
 800956c:	d11b      	bne.n	80095a6 <_strtod_l+0xa6e>
 800956e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8009572:	b9f3      	cbnz	r3, 80095b2 <_strtod_l+0xa7a>
 8009574:	4b6c      	ldr	r3, [pc, #432]	; (8009728 <_strtod_l+0xbf0>)
 8009576:	2200      	movs	r2, #0
 8009578:	4640      	mov	r0, r8
 800957a:	4649      	mov	r1, r9
 800957c:	f7f7 fab6 	bl	8000aec <__aeabi_dcmplt>
 8009580:	b9d0      	cbnz	r0, 80095b8 <_strtod_l+0xa80>
 8009582:	4640      	mov	r0, r8
 8009584:	4649      	mov	r1, r9
 8009586:	4b6c      	ldr	r3, [pc, #432]	; (8009738 <_strtod_l+0xc00>)
 8009588:	2200      	movs	r2, #0
 800958a:	f7f7 f83d 	bl	8000608 <__aeabi_dmul>
 800958e:	4680      	mov	r8, r0
 8009590:	4689      	mov	r9, r1
 8009592:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8009596:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
 800959a:	9315      	str	r3, [sp, #84]	; 0x54
 800959c:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 80095a0:	e9cd 2308 	strd	r2, r3, [sp, #32]
 80095a4:	e79d      	b.n	80094e2 <_strtod_l+0x9aa>
 80095a6:	f1ba 0f01 	cmp.w	sl, #1
 80095aa:	d102      	bne.n	80095b2 <_strtod_l+0xa7a>
 80095ac:	2f00      	cmp	r7, #0
 80095ae:	f43f ad83 	beq.w	80090b8 <_strtod_l+0x580>
 80095b2:	4b62      	ldr	r3, [pc, #392]	; (800973c <_strtod_l+0xc04>)
 80095b4:	2200      	movs	r2, #0
 80095b6:	e78e      	b.n	80094d6 <_strtod_l+0x99e>
 80095b8:	f8df 917c 	ldr.w	r9, [pc, #380]	; 8009738 <_strtod_l+0xc00>
 80095bc:	f04f 0800 	mov.w	r8, #0
 80095c0:	e7e7      	b.n	8009592 <_strtod_l+0xa5a>
 80095c2:	4b5d      	ldr	r3, [pc, #372]	; (8009738 <_strtod_l+0xc00>)
 80095c4:	4640      	mov	r0, r8
 80095c6:	4649      	mov	r1, r9
 80095c8:	2200      	movs	r2, #0
 80095ca:	f7f7 f81d 	bl	8000608 <__aeabi_dmul>
 80095ce:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80095d0:	4680      	mov	r8, r0
 80095d2:	4689      	mov	r9, r1
 80095d4:	b933      	cbnz	r3, 80095e4 <_strtod_l+0xaac>
 80095d6:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80095da:	900e      	str	r0, [sp, #56]	; 0x38
 80095dc:	930f      	str	r3, [sp, #60]	; 0x3c
 80095de:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 80095e2:	e7dd      	b.n	80095a0 <_strtod_l+0xa68>
 80095e4:	e9cd 890e 	strd	r8, r9, [sp, #56]	; 0x38
 80095e8:	e7f9      	b.n	80095de <_strtod_l+0xaa6>
 80095ea:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 80095ee:	9b04      	ldr	r3, [sp, #16]
 80095f0:	2b00      	cmp	r3, #0
 80095f2:	d1a8      	bne.n	8009546 <_strtod_l+0xa0e>
 80095f4:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 80095f8:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80095fa:	0d1b      	lsrs	r3, r3, #20
 80095fc:	051b      	lsls	r3, r3, #20
 80095fe:	429a      	cmp	r2, r3
 8009600:	d1a1      	bne.n	8009546 <_strtod_l+0xa0e>
 8009602:	4640      	mov	r0, r8
 8009604:	4649      	mov	r1, r9
 8009606:	f7f7 fb5f 	bl	8000cc8 <__aeabi_d2lz>
 800960a:	f7f6 ffcf 	bl	80005ac <__aeabi_l2d>
 800960e:	4602      	mov	r2, r0
 8009610:	460b      	mov	r3, r1
 8009612:	4640      	mov	r0, r8
 8009614:	4649      	mov	r1, r9
 8009616:	f7f6 fe3f 	bl	8000298 <__aeabi_dsub>
 800961a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800961c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8009620:	ea43 030a 	orr.w	r3, r3, sl
 8009624:	4313      	orrs	r3, r2
 8009626:	4680      	mov	r8, r0
 8009628:	4689      	mov	r9, r1
 800962a:	d055      	beq.n	80096d8 <_strtod_l+0xba0>
 800962c:	a336      	add	r3, pc, #216	; (adr r3, 8009708 <_strtod_l+0xbd0>)
 800962e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009632:	f7f7 fa5b 	bl	8000aec <__aeabi_dcmplt>
 8009636:	2800      	cmp	r0, #0
 8009638:	f47f acd0 	bne.w	8008fdc <_strtod_l+0x4a4>
 800963c:	a334      	add	r3, pc, #208	; (adr r3, 8009710 <_strtod_l+0xbd8>)
 800963e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009642:	4640      	mov	r0, r8
 8009644:	4649      	mov	r1, r9
 8009646:	f7f7 fa6f 	bl	8000b28 <__aeabi_dcmpgt>
 800964a:	2800      	cmp	r0, #0
 800964c:	f43f af7b 	beq.w	8009546 <_strtod_l+0xa0e>
 8009650:	e4c4      	b.n	8008fdc <_strtod_l+0x4a4>
 8009652:	9b04      	ldr	r3, [sp, #16]
 8009654:	b333      	cbz	r3, 80096a4 <_strtod_l+0xb6c>
 8009656:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009658:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800965c:	d822      	bhi.n	80096a4 <_strtod_l+0xb6c>
 800965e:	a32e      	add	r3, pc, #184	; (adr r3, 8009718 <_strtod_l+0xbe0>)
 8009660:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009664:	4640      	mov	r0, r8
 8009666:	4649      	mov	r1, r9
 8009668:	f7f7 fa4a 	bl	8000b00 <__aeabi_dcmple>
 800966c:	b1a0      	cbz	r0, 8009698 <_strtod_l+0xb60>
 800966e:	4649      	mov	r1, r9
 8009670:	4640      	mov	r0, r8
 8009672:	f7f7 faa1 	bl	8000bb8 <__aeabi_d2uiz>
 8009676:	2801      	cmp	r0, #1
 8009678:	bf38      	it	cc
 800967a:	2001      	movcc	r0, #1
 800967c:	f7f6 ff4a 	bl	8000514 <__aeabi_ui2d>
 8009680:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009682:	4680      	mov	r8, r0
 8009684:	4689      	mov	r9, r1
 8009686:	bb23      	cbnz	r3, 80096d2 <_strtod_l+0xb9a>
 8009688:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800968c:	9010      	str	r0, [sp, #64]	; 0x40
 800968e:	9311      	str	r3, [sp, #68]	; 0x44
 8009690:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8009694:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8009698:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800969a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800969c:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 80096a0:	1a9b      	subs	r3, r3, r2
 80096a2:	9309      	str	r3, [sp, #36]	; 0x24
 80096a4:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80096a8:	eeb0 0a48 	vmov.f32	s0, s16
 80096ac:	eef0 0a68 	vmov.f32	s1, s17
 80096b0:	e9cd 0108 	strd	r0, r1, [sp, #32]
 80096b4:	f001 ff50 	bl	800b558 <__ulp>
 80096b8:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80096bc:	ec53 2b10 	vmov	r2, r3, d0
 80096c0:	f7f6 ffa2 	bl	8000608 <__aeabi_dmul>
 80096c4:	ec53 2b18 	vmov	r2, r3, d8
 80096c8:	f7f6 fde8 	bl	800029c <__adddf3>
 80096cc:	4682      	mov	sl, r0
 80096ce:	468b      	mov	fp, r1
 80096d0:	e78d      	b.n	80095ee <_strtod_l+0xab6>
 80096d2:	e9cd 8910 	strd	r8, r9, [sp, #64]	; 0x40
 80096d6:	e7db      	b.n	8009690 <_strtod_l+0xb58>
 80096d8:	a311      	add	r3, pc, #68	; (adr r3, 8009720 <_strtod_l+0xbe8>)
 80096da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80096de:	f7f7 fa05 	bl	8000aec <__aeabi_dcmplt>
 80096e2:	e7b2      	b.n	800964a <_strtod_l+0xb12>
 80096e4:	2300      	movs	r3, #0
 80096e6:	930a      	str	r3, [sp, #40]	; 0x28
 80096e8:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80096ea:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80096ec:	6013      	str	r3, [r2, #0]
 80096ee:	f7ff ba6b 	b.w	8008bc8 <_strtod_l+0x90>
 80096f2:	2a65      	cmp	r2, #101	; 0x65
 80096f4:	f43f ab5f 	beq.w	8008db6 <_strtod_l+0x27e>
 80096f8:	2a45      	cmp	r2, #69	; 0x45
 80096fa:	f43f ab5c 	beq.w	8008db6 <_strtod_l+0x27e>
 80096fe:	2301      	movs	r3, #1
 8009700:	f7ff bb94 	b.w	8008e2c <_strtod_l+0x2f4>
 8009704:	f3af 8000 	nop.w
 8009708:	94a03595 	.word	0x94a03595
 800970c:	3fdfffff 	.word	0x3fdfffff
 8009710:	35afe535 	.word	0x35afe535
 8009714:	3fe00000 	.word	0x3fe00000
 8009718:	ffc00000 	.word	0xffc00000
 800971c:	41dfffff 	.word	0x41dfffff
 8009720:	94a03595 	.word	0x94a03595
 8009724:	3fcfffff 	.word	0x3fcfffff
 8009728:	3ff00000 	.word	0x3ff00000
 800972c:	7ff00000 	.word	0x7ff00000
 8009730:	7fe00000 	.word	0x7fe00000
 8009734:	7c9fffff 	.word	0x7c9fffff
 8009738:	3fe00000 	.word	0x3fe00000
 800973c:	bff00000 	.word	0xbff00000
 8009740:	7fefffff 	.word	0x7fefffff

08009744 <_strtod_r>:
 8009744:	4b01      	ldr	r3, [pc, #4]	; (800974c <_strtod_r+0x8>)
 8009746:	f7ff b9f7 	b.w	8008b38 <_strtod_l>
 800974a:	bf00      	nop
 800974c:	2000007c 	.word	0x2000007c

08009750 <_strtol_l.constprop.0>:
 8009750:	2b01      	cmp	r3, #1
 8009752:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009756:	d001      	beq.n	800975c <_strtol_l.constprop.0+0xc>
 8009758:	2b24      	cmp	r3, #36	; 0x24
 800975a:	d906      	bls.n	800976a <_strtol_l.constprop.0+0x1a>
 800975c:	f7fe fae4 	bl	8007d28 <__errno>
 8009760:	2316      	movs	r3, #22
 8009762:	6003      	str	r3, [r0, #0]
 8009764:	2000      	movs	r0, #0
 8009766:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800976a:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 8009850 <_strtol_l.constprop.0+0x100>
 800976e:	460d      	mov	r5, r1
 8009770:	462e      	mov	r6, r5
 8009772:	f815 4b01 	ldrb.w	r4, [r5], #1
 8009776:	f814 700c 	ldrb.w	r7, [r4, ip]
 800977a:	f017 0708 	ands.w	r7, r7, #8
 800977e:	d1f7      	bne.n	8009770 <_strtol_l.constprop.0+0x20>
 8009780:	2c2d      	cmp	r4, #45	; 0x2d
 8009782:	d132      	bne.n	80097ea <_strtol_l.constprop.0+0x9a>
 8009784:	782c      	ldrb	r4, [r5, #0]
 8009786:	2701      	movs	r7, #1
 8009788:	1cb5      	adds	r5, r6, #2
 800978a:	2b00      	cmp	r3, #0
 800978c:	d05b      	beq.n	8009846 <_strtol_l.constprop.0+0xf6>
 800978e:	2b10      	cmp	r3, #16
 8009790:	d109      	bne.n	80097a6 <_strtol_l.constprop.0+0x56>
 8009792:	2c30      	cmp	r4, #48	; 0x30
 8009794:	d107      	bne.n	80097a6 <_strtol_l.constprop.0+0x56>
 8009796:	782c      	ldrb	r4, [r5, #0]
 8009798:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 800979c:	2c58      	cmp	r4, #88	; 0x58
 800979e:	d14d      	bne.n	800983c <_strtol_l.constprop.0+0xec>
 80097a0:	786c      	ldrb	r4, [r5, #1]
 80097a2:	2310      	movs	r3, #16
 80097a4:	3502      	adds	r5, #2
 80097a6:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 80097aa:	f108 38ff 	add.w	r8, r8, #4294967295
 80097ae:	f04f 0c00 	mov.w	ip, #0
 80097b2:	fbb8 f9f3 	udiv	r9, r8, r3
 80097b6:	4666      	mov	r6, ip
 80097b8:	fb03 8a19 	mls	sl, r3, r9, r8
 80097bc:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 80097c0:	f1be 0f09 	cmp.w	lr, #9
 80097c4:	d816      	bhi.n	80097f4 <_strtol_l.constprop.0+0xa4>
 80097c6:	4674      	mov	r4, lr
 80097c8:	42a3      	cmp	r3, r4
 80097ca:	dd24      	ble.n	8009816 <_strtol_l.constprop.0+0xc6>
 80097cc:	f1bc 0f00 	cmp.w	ip, #0
 80097d0:	db1e      	blt.n	8009810 <_strtol_l.constprop.0+0xc0>
 80097d2:	45b1      	cmp	r9, r6
 80097d4:	d31c      	bcc.n	8009810 <_strtol_l.constprop.0+0xc0>
 80097d6:	d101      	bne.n	80097dc <_strtol_l.constprop.0+0x8c>
 80097d8:	45a2      	cmp	sl, r4
 80097da:	db19      	blt.n	8009810 <_strtol_l.constprop.0+0xc0>
 80097dc:	fb06 4603 	mla	r6, r6, r3, r4
 80097e0:	f04f 0c01 	mov.w	ip, #1
 80097e4:	f815 4b01 	ldrb.w	r4, [r5], #1
 80097e8:	e7e8      	b.n	80097bc <_strtol_l.constprop.0+0x6c>
 80097ea:	2c2b      	cmp	r4, #43	; 0x2b
 80097ec:	bf04      	itt	eq
 80097ee:	782c      	ldrbeq	r4, [r5, #0]
 80097f0:	1cb5      	addeq	r5, r6, #2
 80097f2:	e7ca      	b.n	800978a <_strtol_l.constprop.0+0x3a>
 80097f4:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 80097f8:	f1be 0f19 	cmp.w	lr, #25
 80097fc:	d801      	bhi.n	8009802 <_strtol_l.constprop.0+0xb2>
 80097fe:	3c37      	subs	r4, #55	; 0x37
 8009800:	e7e2      	b.n	80097c8 <_strtol_l.constprop.0+0x78>
 8009802:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 8009806:	f1be 0f19 	cmp.w	lr, #25
 800980a:	d804      	bhi.n	8009816 <_strtol_l.constprop.0+0xc6>
 800980c:	3c57      	subs	r4, #87	; 0x57
 800980e:	e7db      	b.n	80097c8 <_strtol_l.constprop.0+0x78>
 8009810:	f04f 3cff 	mov.w	ip, #4294967295
 8009814:	e7e6      	b.n	80097e4 <_strtol_l.constprop.0+0x94>
 8009816:	f1bc 0f00 	cmp.w	ip, #0
 800981a:	da05      	bge.n	8009828 <_strtol_l.constprop.0+0xd8>
 800981c:	2322      	movs	r3, #34	; 0x22
 800981e:	6003      	str	r3, [r0, #0]
 8009820:	4646      	mov	r6, r8
 8009822:	b942      	cbnz	r2, 8009836 <_strtol_l.constprop.0+0xe6>
 8009824:	4630      	mov	r0, r6
 8009826:	e79e      	b.n	8009766 <_strtol_l.constprop.0+0x16>
 8009828:	b107      	cbz	r7, 800982c <_strtol_l.constprop.0+0xdc>
 800982a:	4276      	negs	r6, r6
 800982c:	2a00      	cmp	r2, #0
 800982e:	d0f9      	beq.n	8009824 <_strtol_l.constprop.0+0xd4>
 8009830:	f1bc 0f00 	cmp.w	ip, #0
 8009834:	d000      	beq.n	8009838 <_strtol_l.constprop.0+0xe8>
 8009836:	1e69      	subs	r1, r5, #1
 8009838:	6011      	str	r1, [r2, #0]
 800983a:	e7f3      	b.n	8009824 <_strtol_l.constprop.0+0xd4>
 800983c:	2430      	movs	r4, #48	; 0x30
 800983e:	2b00      	cmp	r3, #0
 8009840:	d1b1      	bne.n	80097a6 <_strtol_l.constprop.0+0x56>
 8009842:	2308      	movs	r3, #8
 8009844:	e7af      	b.n	80097a6 <_strtol_l.constprop.0+0x56>
 8009846:	2c30      	cmp	r4, #48	; 0x30
 8009848:	d0a5      	beq.n	8009796 <_strtol_l.constprop.0+0x46>
 800984a:	230a      	movs	r3, #10
 800984c:	e7ab      	b.n	80097a6 <_strtol_l.constprop.0+0x56>
 800984e:	bf00      	nop
 8009850:	0800c7a1 	.word	0x0800c7a1

08009854 <_strtol_r>:
 8009854:	f7ff bf7c 	b.w	8009750 <_strtol_l.constprop.0>

08009858 <quorem>:
 8009858:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800985c:	6903      	ldr	r3, [r0, #16]
 800985e:	690c      	ldr	r4, [r1, #16]
 8009860:	42a3      	cmp	r3, r4
 8009862:	4607      	mov	r7, r0
 8009864:	f2c0 8081 	blt.w	800996a <quorem+0x112>
 8009868:	3c01      	subs	r4, #1
 800986a:	f101 0814 	add.w	r8, r1, #20
 800986e:	f100 0514 	add.w	r5, r0, #20
 8009872:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8009876:	9301      	str	r3, [sp, #4]
 8009878:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800987c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8009880:	3301      	adds	r3, #1
 8009882:	429a      	cmp	r2, r3
 8009884:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8009888:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800988c:	fbb2 f6f3 	udiv	r6, r2, r3
 8009890:	d331      	bcc.n	80098f6 <quorem+0x9e>
 8009892:	f04f 0e00 	mov.w	lr, #0
 8009896:	4640      	mov	r0, r8
 8009898:	46ac      	mov	ip, r5
 800989a:	46f2      	mov	sl, lr
 800989c:	f850 2b04 	ldr.w	r2, [r0], #4
 80098a0:	b293      	uxth	r3, r2
 80098a2:	fb06 e303 	mla	r3, r6, r3, lr
 80098a6:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 80098aa:	b29b      	uxth	r3, r3
 80098ac:	ebaa 0303 	sub.w	r3, sl, r3
 80098b0:	f8dc a000 	ldr.w	sl, [ip]
 80098b4:	0c12      	lsrs	r2, r2, #16
 80098b6:	fa13 f38a 	uxtah	r3, r3, sl
 80098ba:	fb06 e202 	mla	r2, r6, r2, lr
 80098be:	9300      	str	r3, [sp, #0]
 80098c0:	9b00      	ldr	r3, [sp, #0]
 80098c2:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80098c6:	b292      	uxth	r2, r2
 80098c8:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 80098cc:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80098d0:	f8bd 3000 	ldrh.w	r3, [sp]
 80098d4:	4581      	cmp	r9, r0
 80098d6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80098da:	f84c 3b04 	str.w	r3, [ip], #4
 80098de:	ea4f 4a22 	mov.w	sl, r2, asr #16
 80098e2:	d2db      	bcs.n	800989c <quorem+0x44>
 80098e4:	f855 300b 	ldr.w	r3, [r5, fp]
 80098e8:	b92b      	cbnz	r3, 80098f6 <quorem+0x9e>
 80098ea:	9b01      	ldr	r3, [sp, #4]
 80098ec:	3b04      	subs	r3, #4
 80098ee:	429d      	cmp	r5, r3
 80098f0:	461a      	mov	r2, r3
 80098f2:	d32e      	bcc.n	8009952 <quorem+0xfa>
 80098f4:	613c      	str	r4, [r7, #16]
 80098f6:	4638      	mov	r0, r7
 80098f8:	f001 fd88 	bl	800b40c <__mcmp>
 80098fc:	2800      	cmp	r0, #0
 80098fe:	db24      	blt.n	800994a <quorem+0xf2>
 8009900:	3601      	adds	r6, #1
 8009902:	4628      	mov	r0, r5
 8009904:	f04f 0c00 	mov.w	ip, #0
 8009908:	f858 2b04 	ldr.w	r2, [r8], #4
 800990c:	f8d0 e000 	ldr.w	lr, [r0]
 8009910:	b293      	uxth	r3, r2
 8009912:	ebac 0303 	sub.w	r3, ip, r3
 8009916:	0c12      	lsrs	r2, r2, #16
 8009918:	fa13 f38e 	uxtah	r3, r3, lr
 800991c:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8009920:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8009924:	b29b      	uxth	r3, r3
 8009926:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800992a:	45c1      	cmp	r9, r8
 800992c:	f840 3b04 	str.w	r3, [r0], #4
 8009930:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8009934:	d2e8      	bcs.n	8009908 <quorem+0xb0>
 8009936:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800993a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800993e:	b922      	cbnz	r2, 800994a <quorem+0xf2>
 8009940:	3b04      	subs	r3, #4
 8009942:	429d      	cmp	r5, r3
 8009944:	461a      	mov	r2, r3
 8009946:	d30a      	bcc.n	800995e <quorem+0x106>
 8009948:	613c      	str	r4, [r7, #16]
 800994a:	4630      	mov	r0, r6
 800994c:	b003      	add	sp, #12
 800994e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009952:	6812      	ldr	r2, [r2, #0]
 8009954:	3b04      	subs	r3, #4
 8009956:	2a00      	cmp	r2, #0
 8009958:	d1cc      	bne.n	80098f4 <quorem+0x9c>
 800995a:	3c01      	subs	r4, #1
 800995c:	e7c7      	b.n	80098ee <quorem+0x96>
 800995e:	6812      	ldr	r2, [r2, #0]
 8009960:	3b04      	subs	r3, #4
 8009962:	2a00      	cmp	r2, #0
 8009964:	d1f0      	bne.n	8009948 <quorem+0xf0>
 8009966:	3c01      	subs	r4, #1
 8009968:	e7eb      	b.n	8009942 <quorem+0xea>
 800996a:	2000      	movs	r0, #0
 800996c:	e7ee      	b.n	800994c <quorem+0xf4>
	...

08009970 <_dtoa_r>:
 8009970:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009974:	ed2d 8b04 	vpush	{d8-d9}
 8009978:	ec57 6b10 	vmov	r6, r7, d0
 800997c:	b093      	sub	sp, #76	; 0x4c
 800997e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8009980:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8009984:	9106      	str	r1, [sp, #24]
 8009986:	ee10 aa10 	vmov	sl, s0
 800998a:	4604      	mov	r4, r0
 800998c:	9209      	str	r2, [sp, #36]	; 0x24
 800998e:	930c      	str	r3, [sp, #48]	; 0x30
 8009990:	46bb      	mov	fp, r7
 8009992:	b975      	cbnz	r5, 80099b2 <_dtoa_r+0x42>
 8009994:	2010      	movs	r0, #16
 8009996:	f001 fa45 	bl	800ae24 <malloc>
 800999a:	4602      	mov	r2, r0
 800999c:	6260      	str	r0, [r4, #36]	; 0x24
 800999e:	b920      	cbnz	r0, 80099aa <_dtoa_r+0x3a>
 80099a0:	4ba7      	ldr	r3, [pc, #668]	; (8009c40 <_dtoa_r+0x2d0>)
 80099a2:	21ea      	movs	r1, #234	; 0xea
 80099a4:	48a7      	ldr	r0, [pc, #668]	; (8009c44 <_dtoa_r+0x2d4>)
 80099a6:	f002 fc23 	bl	800c1f0 <__assert_func>
 80099aa:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80099ae:	6005      	str	r5, [r0, #0]
 80099b0:	60c5      	str	r5, [r0, #12]
 80099b2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80099b4:	6819      	ldr	r1, [r3, #0]
 80099b6:	b151      	cbz	r1, 80099ce <_dtoa_r+0x5e>
 80099b8:	685a      	ldr	r2, [r3, #4]
 80099ba:	604a      	str	r2, [r1, #4]
 80099bc:	2301      	movs	r3, #1
 80099be:	4093      	lsls	r3, r2
 80099c0:	608b      	str	r3, [r1, #8]
 80099c2:	4620      	mov	r0, r4
 80099c4:	f001 fa96 	bl	800aef4 <_Bfree>
 80099c8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80099ca:	2200      	movs	r2, #0
 80099cc:	601a      	str	r2, [r3, #0]
 80099ce:	1e3b      	subs	r3, r7, #0
 80099d0:	bfaa      	itet	ge
 80099d2:	2300      	movge	r3, #0
 80099d4:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 80099d8:	f8c8 3000 	strge.w	r3, [r8]
 80099dc:	4b9a      	ldr	r3, [pc, #616]	; (8009c48 <_dtoa_r+0x2d8>)
 80099de:	bfbc      	itt	lt
 80099e0:	2201      	movlt	r2, #1
 80099e2:	f8c8 2000 	strlt.w	r2, [r8]
 80099e6:	ea33 030b 	bics.w	r3, r3, fp
 80099ea:	d11b      	bne.n	8009a24 <_dtoa_r+0xb4>
 80099ec:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80099ee:	f242 730f 	movw	r3, #9999	; 0x270f
 80099f2:	6013      	str	r3, [r2, #0]
 80099f4:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80099f8:	4333      	orrs	r3, r6
 80099fa:	f000 8592 	beq.w	800a522 <_dtoa_r+0xbb2>
 80099fe:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009a00:	b963      	cbnz	r3, 8009a1c <_dtoa_r+0xac>
 8009a02:	4b92      	ldr	r3, [pc, #584]	; (8009c4c <_dtoa_r+0x2dc>)
 8009a04:	e022      	b.n	8009a4c <_dtoa_r+0xdc>
 8009a06:	4b92      	ldr	r3, [pc, #584]	; (8009c50 <_dtoa_r+0x2e0>)
 8009a08:	9301      	str	r3, [sp, #4]
 8009a0a:	3308      	adds	r3, #8
 8009a0c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8009a0e:	6013      	str	r3, [r2, #0]
 8009a10:	9801      	ldr	r0, [sp, #4]
 8009a12:	b013      	add	sp, #76	; 0x4c
 8009a14:	ecbd 8b04 	vpop	{d8-d9}
 8009a18:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009a1c:	4b8b      	ldr	r3, [pc, #556]	; (8009c4c <_dtoa_r+0x2dc>)
 8009a1e:	9301      	str	r3, [sp, #4]
 8009a20:	3303      	adds	r3, #3
 8009a22:	e7f3      	b.n	8009a0c <_dtoa_r+0x9c>
 8009a24:	2200      	movs	r2, #0
 8009a26:	2300      	movs	r3, #0
 8009a28:	4650      	mov	r0, sl
 8009a2a:	4659      	mov	r1, fp
 8009a2c:	f7f7 f854 	bl	8000ad8 <__aeabi_dcmpeq>
 8009a30:	ec4b ab19 	vmov	d9, sl, fp
 8009a34:	4680      	mov	r8, r0
 8009a36:	b158      	cbz	r0, 8009a50 <_dtoa_r+0xe0>
 8009a38:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8009a3a:	2301      	movs	r3, #1
 8009a3c:	6013      	str	r3, [r2, #0]
 8009a3e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009a40:	2b00      	cmp	r3, #0
 8009a42:	f000 856b 	beq.w	800a51c <_dtoa_r+0xbac>
 8009a46:	4883      	ldr	r0, [pc, #524]	; (8009c54 <_dtoa_r+0x2e4>)
 8009a48:	6018      	str	r0, [r3, #0]
 8009a4a:	1e43      	subs	r3, r0, #1
 8009a4c:	9301      	str	r3, [sp, #4]
 8009a4e:	e7df      	b.n	8009a10 <_dtoa_r+0xa0>
 8009a50:	ec4b ab10 	vmov	d0, sl, fp
 8009a54:	aa10      	add	r2, sp, #64	; 0x40
 8009a56:	a911      	add	r1, sp, #68	; 0x44
 8009a58:	4620      	mov	r0, r4
 8009a5a:	f001 fdf9 	bl	800b650 <__d2b>
 8009a5e:	f3cb 550a 	ubfx	r5, fp, #20, #11
 8009a62:	ee08 0a10 	vmov	s16, r0
 8009a66:	2d00      	cmp	r5, #0
 8009a68:	f000 8084 	beq.w	8009b74 <_dtoa_r+0x204>
 8009a6c:	ee19 3a90 	vmov	r3, s19
 8009a70:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009a74:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8009a78:	4656      	mov	r6, sl
 8009a7a:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8009a7e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8009a82:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 8009a86:	4b74      	ldr	r3, [pc, #464]	; (8009c58 <_dtoa_r+0x2e8>)
 8009a88:	2200      	movs	r2, #0
 8009a8a:	4630      	mov	r0, r6
 8009a8c:	4639      	mov	r1, r7
 8009a8e:	f7f6 fc03 	bl	8000298 <__aeabi_dsub>
 8009a92:	a365      	add	r3, pc, #404	; (adr r3, 8009c28 <_dtoa_r+0x2b8>)
 8009a94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009a98:	f7f6 fdb6 	bl	8000608 <__aeabi_dmul>
 8009a9c:	a364      	add	r3, pc, #400	; (adr r3, 8009c30 <_dtoa_r+0x2c0>)
 8009a9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009aa2:	f7f6 fbfb 	bl	800029c <__adddf3>
 8009aa6:	4606      	mov	r6, r0
 8009aa8:	4628      	mov	r0, r5
 8009aaa:	460f      	mov	r7, r1
 8009aac:	f7f6 fd42 	bl	8000534 <__aeabi_i2d>
 8009ab0:	a361      	add	r3, pc, #388	; (adr r3, 8009c38 <_dtoa_r+0x2c8>)
 8009ab2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009ab6:	f7f6 fda7 	bl	8000608 <__aeabi_dmul>
 8009aba:	4602      	mov	r2, r0
 8009abc:	460b      	mov	r3, r1
 8009abe:	4630      	mov	r0, r6
 8009ac0:	4639      	mov	r1, r7
 8009ac2:	f7f6 fbeb 	bl	800029c <__adddf3>
 8009ac6:	4606      	mov	r6, r0
 8009ac8:	460f      	mov	r7, r1
 8009aca:	f7f7 f84d 	bl	8000b68 <__aeabi_d2iz>
 8009ace:	2200      	movs	r2, #0
 8009ad0:	9000      	str	r0, [sp, #0]
 8009ad2:	2300      	movs	r3, #0
 8009ad4:	4630      	mov	r0, r6
 8009ad6:	4639      	mov	r1, r7
 8009ad8:	f7f7 f808 	bl	8000aec <__aeabi_dcmplt>
 8009adc:	b150      	cbz	r0, 8009af4 <_dtoa_r+0x184>
 8009ade:	9800      	ldr	r0, [sp, #0]
 8009ae0:	f7f6 fd28 	bl	8000534 <__aeabi_i2d>
 8009ae4:	4632      	mov	r2, r6
 8009ae6:	463b      	mov	r3, r7
 8009ae8:	f7f6 fff6 	bl	8000ad8 <__aeabi_dcmpeq>
 8009aec:	b910      	cbnz	r0, 8009af4 <_dtoa_r+0x184>
 8009aee:	9b00      	ldr	r3, [sp, #0]
 8009af0:	3b01      	subs	r3, #1
 8009af2:	9300      	str	r3, [sp, #0]
 8009af4:	9b00      	ldr	r3, [sp, #0]
 8009af6:	2b16      	cmp	r3, #22
 8009af8:	d85a      	bhi.n	8009bb0 <_dtoa_r+0x240>
 8009afa:	9a00      	ldr	r2, [sp, #0]
 8009afc:	4b57      	ldr	r3, [pc, #348]	; (8009c5c <_dtoa_r+0x2ec>)
 8009afe:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009b02:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b06:	ec51 0b19 	vmov	r0, r1, d9
 8009b0a:	f7f6 ffef 	bl	8000aec <__aeabi_dcmplt>
 8009b0e:	2800      	cmp	r0, #0
 8009b10:	d050      	beq.n	8009bb4 <_dtoa_r+0x244>
 8009b12:	9b00      	ldr	r3, [sp, #0]
 8009b14:	3b01      	subs	r3, #1
 8009b16:	9300      	str	r3, [sp, #0]
 8009b18:	2300      	movs	r3, #0
 8009b1a:	930b      	str	r3, [sp, #44]	; 0x2c
 8009b1c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8009b1e:	1b5d      	subs	r5, r3, r5
 8009b20:	1e6b      	subs	r3, r5, #1
 8009b22:	9305      	str	r3, [sp, #20]
 8009b24:	bf45      	ittet	mi
 8009b26:	f1c5 0301 	rsbmi	r3, r5, #1
 8009b2a:	9304      	strmi	r3, [sp, #16]
 8009b2c:	2300      	movpl	r3, #0
 8009b2e:	2300      	movmi	r3, #0
 8009b30:	bf4c      	ite	mi
 8009b32:	9305      	strmi	r3, [sp, #20]
 8009b34:	9304      	strpl	r3, [sp, #16]
 8009b36:	9b00      	ldr	r3, [sp, #0]
 8009b38:	2b00      	cmp	r3, #0
 8009b3a:	db3d      	blt.n	8009bb8 <_dtoa_r+0x248>
 8009b3c:	9b05      	ldr	r3, [sp, #20]
 8009b3e:	9a00      	ldr	r2, [sp, #0]
 8009b40:	920a      	str	r2, [sp, #40]	; 0x28
 8009b42:	4413      	add	r3, r2
 8009b44:	9305      	str	r3, [sp, #20]
 8009b46:	2300      	movs	r3, #0
 8009b48:	9307      	str	r3, [sp, #28]
 8009b4a:	9b06      	ldr	r3, [sp, #24]
 8009b4c:	2b09      	cmp	r3, #9
 8009b4e:	f200 8089 	bhi.w	8009c64 <_dtoa_r+0x2f4>
 8009b52:	2b05      	cmp	r3, #5
 8009b54:	bfc4      	itt	gt
 8009b56:	3b04      	subgt	r3, #4
 8009b58:	9306      	strgt	r3, [sp, #24]
 8009b5a:	9b06      	ldr	r3, [sp, #24]
 8009b5c:	f1a3 0302 	sub.w	r3, r3, #2
 8009b60:	bfcc      	ite	gt
 8009b62:	2500      	movgt	r5, #0
 8009b64:	2501      	movle	r5, #1
 8009b66:	2b03      	cmp	r3, #3
 8009b68:	f200 8087 	bhi.w	8009c7a <_dtoa_r+0x30a>
 8009b6c:	e8df f003 	tbb	[pc, r3]
 8009b70:	59383a2d 	.word	0x59383a2d
 8009b74:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8009b78:	441d      	add	r5, r3
 8009b7a:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8009b7e:	2b20      	cmp	r3, #32
 8009b80:	bfc1      	itttt	gt
 8009b82:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8009b86:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8009b8a:	fa0b f303 	lslgt.w	r3, fp, r3
 8009b8e:	fa26 f000 	lsrgt.w	r0, r6, r0
 8009b92:	bfda      	itte	le
 8009b94:	f1c3 0320 	rsble	r3, r3, #32
 8009b98:	fa06 f003 	lslle.w	r0, r6, r3
 8009b9c:	4318      	orrgt	r0, r3
 8009b9e:	f7f6 fcb9 	bl	8000514 <__aeabi_ui2d>
 8009ba2:	2301      	movs	r3, #1
 8009ba4:	4606      	mov	r6, r0
 8009ba6:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8009baa:	3d01      	subs	r5, #1
 8009bac:	930e      	str	r3, [sp, #56]	; 0x38
 8009bae:	e76a      	b.n	8009a86 <_dtoa_r+0x116>
 8009bb0:	2301      	movs	r3, #1
 8009bb2:	e7b2      	b.n	8009b1a <_dtoa_r+0x1aa>
 8009bb4:	900b      	str	r0, [sp, #44]	; 0x2c
 8009bb6:	e7b1      	b.n	8009b1c <_dtoa_r+0x1ac>
 8009bb8:	9b04      	ldr	r3, [sp, #16]
 8009bba:	9a00      	ldr	r2, [sp, #0]
 8009bbc:	1a9b      	subs	r3, r3, r2
 8009bbe:	9304      	str	r3, [sp, #16]
 8009bc0:	4253      	negs	r3, r2
 8009bc2:	9307      	str	r3, [sp, #28]
 8009bc4:	2300      	movs	r3, #0
 8009bc6:	930a      	str	r3, [sp, #40]	; 0x28
 8009bc8:	e7bf      	b.n	8009b4a <_dtoa_r+0x1da>
 8009bca:	2300      	movs	r3, #0
 8009bcc:	9308      	str	r3, [sp, #32]
 8009bce:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009bd0:	2b00      	cmp	r3, #0
 8009bd2:	dc55      	bgt.n	8009c80 <_dtoa_r+0x310>
 8009bd4:	2301      	movs	r3, #1
 8009bd6:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8009bda:	461a      	mov	r2, r3
 8009bdc:	9209      	str	r2, [sp, #36]	; 0x24
 8009bde:	e00c      	b.n	8009bfa <_dtoa_r+0x28a>
 8009be0:	2301      	movs	r3, #1
 8009be2:	e7f3      	b.n	8009bcc <_dtoa_r+0x25c>
 8009be4:	2300      	movs	r3, #0
 8009be6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009be8:	9308      	str	r3, [sp, #32]
 8009bea:	9b00      	ldr	r3, [sp, #0]
 8009bec:	4413      	add	r3, r2
 8009bee:	9302      	str	r3, [sp, #8]
 8009bf0:	3301      	adds	r3, #1
 8009bf2:	2b01      	cmp	r3, #1
 8009bf4:	9303      	str	r3, [sp, #12]
 8009bf6:	bfb8      	it	lt
 8009bf8:	2301      	movlt	r3, #1
 8009bfa:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8009bfc:	2200      	movs	r2, #0
 8009bfe:	6042      	str	r2, [r0, #4]
 8009c00:	2204      	movs	r2, #4
 8009c02:	f102 0614 	add.w	r6, r2, #20
 8009c06:	429e      	cmp	r6, r3
 8009c08:	6841      	ldr	r1, [r0, #4]
 8009c0a:	d93d      	bls.n	8009c88 <_dtoa_r+0x318>
 8009c0c:	4620      	mov	r0, r4
 8009c0e:	f001 f931 	bl	800ae74 <_Balloc>
 8009c12:	9001      	str	r0, [sp, #4]
 8009c14:	2800      	cmp	r0, #0
 8009c16:	d13b      	bne.n	8009c90 <_dtoa_r+0x320>
 8009c18:	4b11      	ldr	r3, [pc, #68]	; (8009c60 <_dtoa_r+0x2f0>)
 8009c1a:	4602      	mov	r2, r0
 8009c1c:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8009c20:	e6c0      	b.n	80099a4 <_dtoa_r+0x34>
 8009c22:	2301      	movs	r3, #1
 8009c24:	e7df      	b.n	8009be6 <_dtoa_r+0x276>
 8009c26:	bf00      	nop
 8009c28:	636f4361 	.word	0x636f4361
 8009c2c:	3fd287a7 	.word	0x3fd287a7
 8009c30:	8b60c8b3 	.word	0x8b60c8b3
 8009c34:	3fc68a28 	.word	0x3fc68a28
 8009c38:	509f79fb 	.word	0x509f79fb
 8009c3c:	3fd34413 	.word	0x3fd34413
 8009c40:	0800c8ae 	.word	0x0800c8ae
 8009c44:	0800c8c5 	.word	0x0800c8c5
 8009c48:	7ff00000 	.word	0x7ff00000
 8009c4c:	0800c8aa 	.word	0x0800c8aa
 8009c50:	0800c8a1 	.word	0x0800c8a1
 8009c54:	0800c721 	.word	0x0800c721
 8009c58:	3ff80000 	.word	0x3ff80000
 8009c5c:	0800ca98 	.word	0x0800ca98
 8009c60:	0800c920 	.word	0x0800c920
 8009c64:	2501      	movs	r5, #1
 8009c66:	2300      	movs	r3, #0
 8009c68:	9306      	str	r3, [sp, #24]
 8009c6a:	9508      	str	r5, [sp, #32]
 8009c6c:	f04f 33ff 	mov.w	r3, #4294967295
 8009c70:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8009c74:	2200      	movs	r2, #0
 8009c76:	2312      	movs	r3, #18
 8009c78:	e7b0      	b.n	8009bdc <_dtoa_r+0x26c>
 8009c7a:	2301      	movs	r3, #1
 8009c7c:	9308      	str	r3, [sp, #32]
 8009c7e:	e7f5      	b.n	8009c6c <_dtoa_r+0x2fc>
 8009c80:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009c82:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8009c86:	e7b8      	b.n	8009bfa <_dtoa_r+0x28a>
 8009c88:	3101      	adds	r1, #1
 8009c8a:	6041      	str	r1, [r0, #4]
 8009c8c:	0052      	lsls	r2, r2, #1
 8009c8e:	e7b8      	b.n	8009c02 <_dtoa_r+0x292>
 8009c90:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009c92:	9a01      	ldr	r2, [sp, #4]
 8009c94:	601a      	str	r2, [r3, #0]
 8009c96:	9b03      	ldr	r3, [sp, #12]
 8009c98:	2b0e      	cmp	r3, #14
 8009c9a:	f200 809d 	bhi.w	8009dd8 <_dtoa_r+0x468>
 8009c9e:	2d00      	cmp	r5, #0
 8009ca0:	f000 809a 	beq.w	8009dd8 <_dtoa_r+0x468>
 8009ca4:	9b00      	ldr	r3, [sp, #0]
 8009ca6:	2b00      	cmp	r3, #0
 8009ca8:	dd32      	ble.n	8009d10 <_dtoa_r+0x3a0>
 8009caa:	4ab7      	ldr	r2, [pc, #732]	; (8009f88 <_dtoa_r+0x618>)
 8009cac:	f003 030f 	and.w	r3, r3, #15
 8009cb0:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8009cb4:	e9d3 8900 	ldrd	r8, r9, [r3]
 8009cb8:	9b00      	ldr	r3, [sp, #0]
 8009cba:	05d8      	lsls	r0, r3, #23
 8009cbc:	ea4f 1723 	mov.w	r7, r3, asr #4
 8009cc0:	d516      	bpl.n	8009cf0 <_dtoa_r+0x380>
 8009cc2:	4bb2      	ldr	r3, [pc, #712]	; (8009f8c <_dtoa_r+0x61c>)
 8009cc4:	ec51 0b19 	vmov	r0, r1, d9
 8009cc8:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8009ccc:	f7f6 fdc6 	bl	800085c <__aeabi_ddiv>
 8009cd0:	f007 070f 	and.w	r7, r7, #15
 8009cd4:	4682      	mov	sl, r0
 8009cd6:	468b      	mov	fp, r1
 8009cd8:	2503      	movs	r5, #3
 8009cda:	4eac      	ldr	r6, [pc, #688]	; (8009f8c <_dtoa_r+0x61c>)
 8009cdc:	b957      	cbnz	r7, 8009cf4 <_dtoa_r+0x384>
 8009cde:	4642      	mov	r2, r8
 8009ce0:	464b      	mov	r3, r9
 8009ce2:	4650      	mov	r0, sl
 8009ce4:	4659      	mov	r1, fp
 8009ce6:	f7f6 fdb9 	bl	800085c <__aeabi_ddiv>
 8009cea:	4682      	mov	sl, r0
 8009cec:	468b      	mov	fp, r1
 8009cee:	e028      	b.n	8009d42 <_dtoa_r+0x3d2>
 8009cf0:	2502      	movs	r5, #2
 8009cf2:	e7f2      	b.n	8009cda <_dtoa_r+0x36a>
 8009cf4:	07f9      	lsls	r1, r7, #31
 8009cf6:	d508      	bpl.n	8009d0a <_dtoa_r+0x39a>
 8009cf8:	4640      	mov	r0, r8
 8009cfa:	4649      	mov	r1, r9
 8009cfc:	e9d6 2300 	ldrd	r2, r3, [r6]
 8009d00:	f7f6 fc82 	bl	8000608 <__aeabi_dmul>
 8009d04:	3501      	adds	r5, #1
 8009d06:	4680      	mov	r8, r0
 8009d08:	4689      	mov	r9, r1
 8009d0a:	107f      	asrs	r7, r7, #1
 8009d0c:	3608      	adds	r6, #8
 8009d0e:	e7e5      	b.n	8009cdc <_dtoa_r+0x36c>
 8009d10:	f000 809b 	beq.w	8009e4a <_dtoa_r+0x4da>
 8009d14:	9b00      	ldr	r3, [sp, #0]
 8009d16:	4f9d      	ldr	r7, [pc, #628]	; (8009f8c <_dtoa_r+0x61c>)
 8009d18:	425e      	negs	r6, r3
 8009d1a:	4b9b      	ldr	r3, [pc, #620]	; (8009f88 <_dtoa_r+0x618>)
 8009d1c:	f006 020f 	and.w	r2, r6, #15
 8009d20:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009d24:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009d28:	ec51 0b19 	vmov	r0, r1, d9
 8009d2c:	f7f6 fc6c 	bl	8000608 <__aeabi_dmul>
 8009d30:	1136      	asrs	r6, r6, #4
 8009d32:	4682      	mov	sl, r0
 8009d34:	468b      	mov	fp, r1
 8009d36:	2300      	movs	r3, #0
 8009d38:	2502      	movs	r5, #2
 8009d3a:	2e00      	cmp	r6, #0
 8009d3c:	d17a      	bne.n	8009e34 <_dtoa_r+0x4c4>
 8009d3e:	2b00      	cmp	r3, #0
 8009d40:	d1d3      	bne.n	8009cea <_dtoa_r+0x37a>
 8009d42:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009d44:	2b00      	cmp	r3, #0
 8009d46:	f000 8082 	beq.w	8009e4e <_dtoa_r+0x4de>
 8009d4a:	4b91      	ldr	r3, [pc, #580]	; (8009f90 <_dtoa_r+0x620>)
 8009d4c:	2200      	movs	r2, #0
 8009d4e:	4650      	mov	r0, sl
 8009d50:	4659      	mov	r1, fp
 8009d52:	f7f6 fecb 	bl	8000aec <__aeabi_dcmplt>
 8009d56:	2800      	cmp	r0, #0
 8009d58:	d079      	beq.n	8009e4e <_dtoa_r+0x4de>
 8009d5a:	9b03      	ldr	r3, [sp, #12]
 8009d5c:	2b00      	cmp	r3, #0
 8009d5e:	d076      	beq.n	8009e4e <_dtoa_r+0x4de>
 8009d60:	9b02      	ldr	r3, [sp, #8]
 8009d62:	2b00      	cmp	r3, #0
 8009d64:	dd36      	ble.n	8009dd4 <_dtoa_r+0x464>
 8009d66:	9b00      	ldr	r3, [sp, #0]
 8009d68:	4650      	mov	r0, sl
 8009d6a:	4659      	mov	r1, fp
 8009d6c:	1e5f      	subs	r7, r3, #1
 8009d6e:	2200      	movs	r2, #0
 8009d70:	4b88      	ldr	r3, [pc, #544]	; (8009f94 <_dtoa_r+0x624>)
 8009d72:	f7f6 fc49 	bl	8000608 <__aeabi_dmul>
 8009d76:	9e02      	ldr	r6, [sp, #8]
 8009d78:	4682      	mov	sl, r0
 8009d7a:	468b      	mov	fp, r1
 8009d7c:	3501      	adds	r5, #1
 8009d7e:	4628      	mov	r0, r5
 8009d80:	f7f6 fbd8 	bl	8000534 <__aeabi_i2d>
 8009d84:	4652      	mov	r2, sl
 8009d86:	465b      	mov	r3, fp
 8009d88:	f7f6 fc3e 	bl	8000608 <__aeabi_dmul>
 8009d8c:	4b82      	ldr	r3, [pc, #520]	; (8009f98 <_dtoa_r+0x628>)
 8009d8e:	2200      	movs	r2, #0
 8009d90:	f7f6 fa84 	bl	800029c <__adddf3>
 8009d94:	46d0      	mov	r8, sl
 8009d96:	46d9      	mov	r9, fp
 8009d98:	4682      	mov	sl, r0
 8009d9a:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 8009d9e:	2e00      	cmp	r6, #0
 8009da0:	d158      	bne.n	8009e54 <_dtoa_r+0x4e4>
 8009da2:	4b7e      	ldr	r3, [pc, #504]	; (8009f9c <_dtoa_r+0x62c>)
 8009da4:	2200      	movs	r2, #0
 8009da6:	4640      	mov	r0, r8
 8009da8:	4649      	mov	r1, r9
 8009daa:	f7f6 fa75 	bl	8000298 <__aeabi_dsub>
 8009dae:	4652      	mov	r2, sl
 8009db0:	465b      	mov	r3, fp
 8009db2:	4680      	mov	r8, r0
 8009db4:	4689      	mov	r9, r1
 8009db6:	f7f6 feb7 	bl	8000b28 <__aeabi_dcmpgt>
 8009dba:	2800      	cmp	r0, #0
 8009dbc:	f040 8295 	bne.w	800a2ea <_dtoa_r+0x97a>
 8009dc0:	4652      	mov	r2, sl
 8009dc2:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8009dc6:	4640      	mov	r0, r8
 8009dc8:	4649      	mov	r1, r9
 8009dca:	f7f6 fe8f 	bl	8000aec <__aeabi_dcmplt>
 8009dce:	2800      	cmp	r0, #0
 8009dd0:	f040 8289 	bne.w	800a2e6 <_dtoa_r+0x976>
 8009dd4:	ec5b ab19 	vmov	sl, fp, d9
 8009dd8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8009dda:	2b00      	cmp	r3, #0
 8009ddc:	f2c0 8148 	blt.w	800a070 <_dtoa_r+0x700>
 8009de0:	9a00      	ldr	r2, [sp, #0]
 8009de2:	2a0e      	cmp	r2, #14
 8009de4:	f300 8144 	bgt.w	800a070 <_dtoa_r+0x700>
 8009de8:	4b67      	ldr	r3, [pc, #412]	; (8009f88 <_dtoa_r+0x618>)
 8009dea:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009dee:	e9d3 8900 	ldrd	r8, r9, [r3]
 8009df2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009df4:	2b00      	cmp	r3, #0
 8009df6:	f280 80d5 	bge.w	8009fa4 <_dtoa_r+0x634>
 8009dfa:	9b03      	ldr	r3, [sp, #12]
 8009dfc:	2b00      	cmp	r3, #0
 8009dfe:	f300 80d1 	bgt.w	8009fa4 <_dtoa_r+0x634>
 8009e02:	f040 826f 	bne.w	800a2e4 <_dtoa_r+0x974>
 8009e06:	4b65      	ldr	r3, [pc, #404]	; (8009f9c <_dtoa_r+0x62c>)
 8009e08:	2200      	movs	r2, #0
 8009e0a:	4640      	mov	r0, r8
 8009e0c:	4649      	mov	r1, r9
 8009e0e:	f7f6 fbfb 	bl	8000608 <__aeabi_dmul>
 8009e12:	4652      	mov	r2, sl
 8009e14:	465b      	mov	r3, fp
 8009e16:	f7f6 fe7d 	bl	8000b14 <__aeabi_dcmpge>
 8009e1a:	9e03      	ldr	r6, [sp, #12]
 8009e1c:	4637      	mov	r7, r6
 8009e1e:	2800      	cmp	r0, #0
 8009e20:	f040 8245 	bne.w	800a2ae <_dtoa_r+0x93e>
 8009e24:	9d01      	ldr	r5, [sp, #4]
 8009e26:	2331      	movs	r3, #49	; 0x31
 8009e28:	f805 3b01 	strb.w	r3, [r5], #1
 8009e2c:	9b00      	ldr	r3, [sp, #0]
 8009e2e:	3301      	adds	r3, #1
 8009e30:	9300      	str	r3, [sp, #0]
 8009e32:	e240      	b.n	800a2b6 <_dtoa_r+0x946>
 8009e34:	07f2      	lsls	r2, r6, #31
 8009e36:	d505      	bpl.n	8009e44 <_dtoa_r+0x4d4>
 8009e38:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009e3c:	f7f6 fbe4 	bl	8000608 <__aeabi_dmul>
 8009e40:	3501      	adds	r5, #1
 8009e42:	2301      	movs	r3, #1
 8009e44:	1076      	asrs	r6, r6, #1
 8009e46:	3708      	adds	r7, #8
 8009e48:	e777      	b.n	8009d3a <_dtoa_r+0x3ca>
 8009e4a:	2502      	movs	r5, #2
 8009e4c:	e779      	b.n	8009d42 <_dtoa_r+0x3d2>
 8009e4e:	9f00      	ldr	r7, [sp, #0]
 8009e50:	9e03      	ldr	r6, [sp, #12]
 8009e52:	e794      	b.n	8009d7e <_dtoa_r+0x40e>
 8009e54:	9901      	ldr	r1, [sp, #4]
 8009e56:	4b4c      	ldr	r3, [pc, #304]	; (8009f88 <_dtoa_r+0x618>)
 8009e58:	4431      	add	r1, r6
 8009e5a:	910d      	str	r1, [sp, #52]	; 0x34
 8009e5c:	9908      	ldr	r1, [sp, #32]
 8009e5e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8009e62:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8009e66:	2900      	cmp	r1, #0
 8009e68:	d043      	beq.n	8009ef2 <_dtoa_r+0x582>
 8009e6a:	494d      	ldr	r1, [pc, #308]	; (8009fa0 <_dtoa_r+0x630>)
 8009e6c:	2000      	movs	r0, #0
 8009e6e:	f7f6 fcf5 	bl	800085c <__aeabi_ddiv>
 8009e72:	4652      	mov	r2, sl
 8009e74:	465b      	mov	r3, fp
 8009e76:	f7f6 fa0f 	bl	8000298 <__aeabi_dsub>
 8009e7a:	9d01      	ldr	r5, [sp, #4]
 8009e7c:	4682      	mov	sl, r0
 8009e7e:	468b      	mov	fp, r1
 8009e80:	4649      	mov	r1, r9
 8009e82:	4640      	mov	r0, r8
 8009e84:	f7f6 fe70 	bl	8000b68 <__aeabi_d2iz>
 8009e88:	4606      	mov	r6, r0
 8009e8a:	f7f6 fb53 	bl	8000534 <__aeabi_i2d>
 8009e8e:	4602      	mov	r2, r0
 8009e90:	460b      	mov	r3, r1
 8009e92:	4640      	mov	r0, r8
 8009e94:	4649      	mov	r1, r9
 8009e96:	f7f6 f9ff 	bl	8000298 <__aeabi_dsub>
 8009e9a:	3630      	adds	r6, #48	; 0x30
 8009e9c:	f805 6b01 	strb.w	r6, [r5], #1
 8009ea0:	4652      	mov	r2, sl
 8009ea2:	465b      	mov	r3, fp
 8009ea4:	4680      	mov	r8, r0
 8009ea6:	4689      	mov	r9, r1
 8009ea8:	f7f6 fe20 	bl	8000aec <__aeabi_dcmplt>
 8009eac:	2800      	cmp	r0, #0
 8009eae:	d163      	bne.n	8009f78 <_dtoa_r+0x608>
 8009eb0:	4642      	mov	r2, r8
 8009eb2:	464b      	mov	r3, r9
 8009eb4:	4936      	ldr	r1, [pc, #216]	; (8009f90 <_dtoa_r+0x620>)
 8009eb6:	2000      	movs	r0, #0
 8009eb8:	f7f6 f9ee 	bl	8000298 <__aeabi_dsub>
 8009ebc:	4652      	mov	r2, sl
 8009ebe:	465b      	mov	r3, fp
 8009ec0:	f7f6 fe14 	bl	8000aec <__aeabi_dcmplt>
 8009ec4:	2800      	cmp	r0, #0
 8009ec6:	f040 80b5 	bne.w	800a034 <_dtoa_r+0x6c4>
 8009eca:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009ecc:	429d      	cmp	r5, r3
 8009ece:	d081      	beq.n	8009dd4 <_dtoa_r+0x464>
 8009ed0:	4b30      	ldr	r3, [pc, #192]	; (8009f94 <_dtoa_r+0x624>)
 8009ed2:	2200      	movs	r2, #0
 8009ed4:	4650      	mov	r0, sl
 8009ed6:	4659      	mov	r1, fp
 8009ed8:	f7f6 fb96 	bl	8000608 <__aeabi_dmul>
 8009edc:	4b2d      	ldr	r3, [pc, #180]	; (8009f94 <_dtoa_r+0x624>)
 8009ede:	4682      	mov	sl, r0
 8009ee0:	468b      	mov	fp, r1
 8009ee2:	4640      	mov	r0, r8
 8009ee4:	4649      	mov	r1, r9
 8009ee6:	2200      	movs	r2, #0
 8009ee8:	f7f6 fb8e 	bl	8000608 <__aeabi_dmul>
 8009eec:	4680      	mov	r8, r0
 8009eee:	4689      	mov	r9, r1
 8009ef0:	e7c6      	b.n	8009e80 <_dtoa_r+0x510>
 8009ef2:	4650      	mov	r0, sl
 8009ef4:	4659      	mov	r1, fp
 8009ef6:	f7f6 fb87 	bl	8000608 <__aeabi_dmul>
 8009efa:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009efc:	9d01      	ldr	r5, [sp, #4]
 8009efe:	930f      	str	r3, [sp, #60]	; 0x3c
 8009f00:	4682      	mov	sl, r0
 8009f02:	468b      	mov	fp, r1
 8009f04:	4649      	mov	r1, r9
 8009f06:	4640      	mov	r0, r8
 8009f08:	f7f6 fe2e 	bl	8000b68 <__aeabi_d2iz>
 8009f0c:	4606      	mov	r6, r0
 8009f0e:	f7f6 fb11 	bl	8000534 <__aeabi_i2d>
 8009f12:	3630      	adds	r6, #48	; 0x30
 8009f14:	4602      	mov	r2, r0
 8009f16:	460b      	mov	r3, r1
 8009f18:	4640      	mov	r0, r8
 8009f1a:	4649      	mov	r1, r9
 8009f1c:	f7f6 f9bc 	bl	8000298 <__aeabi_dsub>
 8009f20:	f805 6b01 	strb.w	r6, [r5], #1
 8009f24:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009f26:	429d      	cmp	r5, r3
 8009f28:	4680      	mov	r8, r0
 8009f2a:	4689      	mov	r9, r1
 8009f2c:	f04f 0200 	mov.w	r2, #0
 8009f30:	d124      	bne.n	8009f7c <_dtoa_r+0x60c>
 8009f32:	4b1b      	ldr	r3, [pc, #108]	; (8009fa0 <_dtoa_r+0x630>)
 8009f34:	4650      	mov	r0, sl
 8009f36:	4659      	mov	r1, fp
 8009f38:	f7f6 f9b0 	bl	800029c <__adddf3>
 8009f3c:	4602      	mov	r2, r0
 8009f3e:	460b      	mov	r3, r1
 8009f40:	4640      	mov	r0, r8
 8009f42:	4649      	mov	r1, r9
 8009f44:	f7f6 fdf0 	bl	8000b28 <__aeabi_dcmpgt>
 8009f48:	2800      	cmp	r0, #0
 8009f4a:	d173      	bne.n	800a034 <_dtoa_r+0x6c4>
 8009f4c:	4652      	mov	r2, sl
 8009f4e:	465b      	mov	r3, fp
 8009f50:	4913      	ldr	r1, [pc, #76]	; (8009fa0 <_dtoa_r+0x630>)
 8009f52:	2000      	movs	r0, #0
 8009f54:	f7f6 f9a0 	bl	8000298 <__aeabi_dsub>
 8009f58:	4602      	mov	r2, r0
 8009f5a:	460b      	mov	r3, r1
 8009f5c:	4640      	mov	r0, r8
 8009f5e:	4649      	mov	r1, r9
 8009f60:	f7f6 fdc4 	bl	8000aec <__aeabi_dcmplt>
 8009f64:	2800      	cmp	r0, #0
 8009f66:	f43f af35 	beq.w	8009dd4 <_dtoa_r+0x464>
 8009f6a:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8009f6c:	1e6b      	subs	r3, r5, #1
 8009f6e:	930f      	str	r3, [sp, #60]	; 0x3c
 8009f70:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8009f74:	2b30      	cmp	r3, #48	; 0x30
 8009f76:	d0f8      	beq.n	8009f6a <_dtoa_r+0x5fa>
 8009f78:	9700      	str	r7, [sp, #0]
 8009f7a:	e049      	b.n	800a010 <_dtoa_r+0x6a0>
 8009f7c:	4b05      	ldr	r3, [pc, #20]	; (8009f94 <_dtoa_r+0x624>)
 8009f7e:	f7f6 fb43 	bl	8000608 <__aeabi_dmul>
 8009f82:	4680      	mov	r8, r0
 8009f84:	4689      	mov	r9, r1
 8009f86:	e7bd      	b.n	8009f04 <_dtoa_r+0x594>
 8009f88:	0800ca98 	.word	0x0800ca98
 8009f8c:	0800ca70 	.word	0x0800ca70
 8009f90:	3ff00000 	.word	0x3ff00000
 8009f94:	40240000 	.word	0x40240000
 8009f98:	401c0000 	.word	0x401c0000
 8009f9c:	40140000 	.word	0x40140000
 8009fa0:	3fe00000 	.word	0x3fe00000
 8009fa4:	9d01      	ldr	r5, [sp, #4]
 8009fa6:	4656      	mov	r6, sl
 8009fa8:	465f      	mov	r7, fp
 8009faa:	4642      	mov	r2, r8
 8009fac:	464b      	mov	r3, r9
 8009fae:	4630      	mov	r0, r6
 8009fb0:	4639      	mov	r1, r7
 8009fb2:	f7f6 fc53 	bl	800085c <__aeabi_ddiv>
 8009fb6:	f7f6 fdd7 	bl	8000b68 <__aeabi_d2iz>
 8009fba:	4682      	mov	sl, r0
 8009fbc:	f7f6 faba 	bl	8000534 <__aeabi_i2d>
 8009fc0:	4642      	mov	r2, r8
 8009fc2:	464b      	mov	r3, r9
 8009fc4:	f7f6 fb20 	bl	8000608 <__aeabi_dmul>
 8009fc8:	4602      	mov	r2, r0
 8009fca:	460b      	mov	r3, r1
 8009fcc:	4630      	mov	r0, r6
 8009fce:	4639      	mov	r1, r7
 8009fd0:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 8009fd4:	f7f6 f960 	bl	8000298 <__aeabi_dsub>
 8009fd8:	f805 6b01 	strb.w	r6, [r5], #1
 8009fdc:	9e01      	ldr	r6, [sp, #4]
 8009fde:	9f03      	ldr	r7, [sp, #12]
 8009fe0:	1bae      	subs	r6, r5, r6
 8009fe2:	42b7      	cmp	r7, r6
 8009fe4:	4602      	mov	r2, r0
 8009fe6:	460b      	mov	r3, r1
 8009fe8:	d135      	bne.n	800a056 <_dtoa_r+0x6e6>
 8009fea:	f7f6 f957 	bl	800029c <__adddf3>
 8009fee:	4642      	mov	r2, r8
 8009ff0:	464b      	mov	r3, r9
 8009ff2:	4606      	mov	r6, r0
 8009ff4:	460f      	mov	r7, r1
 8009ff6:	f7f6 fd97 	bl	8000b28 <__aeabi_dcmpgt>
 8009ffa:	b9d0      	cbnz	r0, 800a032 <_dtoa_r+0x6c2>
 8009ffc:	4642      	mov	r2, r8
 8009ffe:	464b      	mov	r3, r9
 800a000:	4630      	mov	r0, r6
 800a002:	4639      	mov	r1, r7
 800a004:	f7f6 fd68 	bl	8000ad8 <__aeabi_dcmpeq>
 800a008:	b110      	cbz	r0, 800a010 <_dtoa_r+0x6a0>
 800a00a:	f01a 0f01 	tst.w	sl, #1
 800a00e:	d110      	bne.n	800a032 <_dtoa_r+0x6c2>
 800a010:	4620      	mov	r0, r4
 800a012:	ee18 1a10 	vmov	r1, s16
 800a016:	f000 ff6d 	bl	800aef4 <_Bfree>
 800a01a:	2300      	movs	r3, #0
 800a01c:	9800      	ldr	r0, [sp, #0]
 800a01e:	702b      	strb	r3, [r5, #0]
 800a020:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a022:	3001      	adds	r0, #1
 800a024:	6018      	str	r0, [r3, #0]
 800a026:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a028:	2b00      	cmp	r3, #0
 800a02a:	f43f acf1 	beq.w	8009a10 <_dtoa_r+0xa0>
 800a02e:	601d      	str	r5, [r3, #0]
 800a030:	e4ee      	b.n	8009a10 <_dtoa_r+0xa0>
 800a032:	9f00      	ldr	r7, [sp, #0]
 800a034:	462b      	mov	r3, r5
 800a036:	461d      	mov	r5, r3
 800a038:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800a03c:	2a39      	cmp	r2, #57	; 0x39
 800a03e:	d106      	bne.n	800a04e <_dtoa_r+0x6de>
 800a040:	9a01      	ldr	r2, [sp, #4]
 800a042:	429a      	cmp	r2, r3
 800a044:	d1f7      	bne.n	800a036 <_dtoa_r+0x6c6>
 800a046:	9901      	ldr	r1, [sp, #4]
 800a048:	2230      	movs	r2, #48	; 0x30
 800a04a:	3701      	adds	r7, #1
 800a04c:	700a      	strb	r2, [r1, #0]
 800a04e:	781a      	ldrb	r2, [r3, #0]
 800a050:	3201      	adds	r2, #1
 800a052:	701a      	strb	r2, [r3, #0]
 800a054:	e790      	b.n	8009f78 <_dtoa_r+0x608>
 800a056:	4ba6      	ldr	r3, [pc, #664]	; (800a2f0 <_dtoa_r+0x980>)
 800a058:	2200      	movs	r2, #0
 800a05a:	f7f6 fad5 	bl	8000608 <__aeabi_dmul>
 800a05e:	2200      	movs	r2, #0
 800a060:	2300      	movs	r3, #0
 800a062:	4606      	mov	r6, r0
 800a064:	460f      	mov	r7, r1
 800a066:	f7f6 fd37 	bl	8000ad8 <__aeabi_dcmpeq>
 800a06a:	2800      	cmp	r0, #0
 800a06c:	d09d      	beq.n	8009faa <_dtoa_r+0x63a>
 800a06e:	e7cf      	b.n	800a010 <_dtoa_r+0x6a0>
 800a070:	9a08      	ldr	r2, [sp, #32]
 800a072:	2a00      	cmp	r2, #0
 800a074:	f000 80d7 	beq.w	800a226 <_dtoa_r+0x8b6>
 800a078:	9a06      	ldr	r2, [sp, #24]
 800a07a:	2a01      	cmp	r2, #1
 800a07c:	f300 80ba 	bgt.w	800a1f4 <_dtoa_r+0x884>
 800a080:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800a082:	2a00      	cmp	r2, #0
 800a084:	f000 80b2 	beq.w	800a1ec <_dtoa_r+0x87c>
 800a088:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800a08c:	9e07      	ldr	r6, [sp, #28]
 800a08e:	9d04      	ldr	r5, [sp, #16]
 800a090:	9a04      	ldr	r2, [sp, #16]
 800a092:	441a      	add	r2, r3
 800a094:	9204      	str	r2, [sp, #16]
 800a096:	9a05      	ldr	r2, [sp, #20]
 800a098:	2101      	movs	r1, #1
 800a09a:	441a      	add	r2, r3
 800a09c:	4620      	mov	r0, r4
 800a09e:	9205      	str	r2, [sp, #20]
 800a0a0:	f001 f82a 	bl	800b0f8 <__i2b>
 800a0a4:	4607      	mov	r7, r0
 800a0a6:	2d00      	cmp	r5, #0
 800a0a8:	dd0c      	ble.n	800a0c4 <_dtoa_r+0x754>
 800a0aa:	9b05      	ldr	r3, [sp, #20]
 800a0ac:	2b00      	cmp	r3, #0
 800a0ae:	dd09      	ble.n	800a0c4 <_dtoa_r+0x754>
 800a0b0:	42ab      	cmp	r3, r5
 800a0b2:	9a04      	ldr	r2, [sp, #16]
 800a0b4:	bfa8      	it	ge
 800a0b6:	462b      	movge	r3, r5
 800a0b8:	1ad2      	subs	r2, r2, r3
 800a0ba:	9204      	str	r2, [sp, #16]
 800a0bc:	9a05      	ldr	r2, [sp, #20]
 800a0be:	1aed      	subs	r5, r5, r3
 800a0c0:	1ad3      	subs	r3, r2, r3
 800a0c2:	9305      	str	r3, [sp, #20]
 800a0c4:	9b07      	ldr	r3, [sp, #28]
 800a0c6:	b31b      	cbz	r3, 800a110 <_dtoa_r+0x7a0>
 800a0c8:	9b08      	ldr	r3, [sp, #32]
 800a0ca:	2b00      	cmp	r3, #0
 800a0cc:	f000 80af 	beq.w	800a22e <_dtoa_r+0x8be>
 800a0d0:	2e00      	cmp	r6, #0
 800a0d2:	dd13      	ble.n	800a0fc <_dtoa_r+0x78c>
 800a0d4:	4639      	mov	r1, r7
 800a0d6:	4632      	mov	r2, r6
 800a0d8:	4620      	mov	r0, r4
 800a0da:	f001 f8cd 	bl	800b278 <__pow5mult>
 800a0de:	ee18 2a10 	vmov	r2, s16
 800a0e2:	4601      	mov	r1, r0
 800a0e4:	4607      	mov	r7, r0
 800a0e6:	4620      	mov	r0, r4
 800a0e8:	f001 f81c 	bl	800b124 <__multiply>
 800a0ec:	ee18 1a10 	vmov	r1, s16
 800a0f0:	4680      	mov	r8, r0
 800a0f2:	4620      	mov	r0, r4
 800a0f4:	f000 fefe 	bl	800aef4 <_Bfree>
 800a0f8:	ee08 8a10 	vmov	s16, r8
 800a0fc:	9b07      	ldr	r3, [sp, #28]
 800a0fe:	1b9a      	subs	r2, r3, r6
 800a100:	d006      	beq.n	800a110 <_dtoa_r+0x7a0>
 800a102:	ee18 1a10 	vmov	r1, s16
 800a106:	4620      	mov	r0, r4
 800a108:	f001 f8b6 	bl	800b278 <__pow5mult>
 800a10c:	ee08 0a10 	vmov	s16, r0
 800a110:	2101      	movs	r1, #1
 800a112:	4620      	mov	r0, r4
 800a114:	f000 fff0 	bl	800b0f8 <__i2b>
 800a118:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a11a:	2b00      	cmp	r3, #0
 800a11c:	4606      	mov	r6, r0
 800a11e:	f340 8088 	ble.w	800a232 <_dtoa_r+0x8c2>
 800a122:	461a      	mov	r2, r3
 800a124:	4601      	mov	r1, r0
 800a126:	4620      	mov	r0, r4
 800a128:	f001 f8a6 	bl	800b278 <__pow5mult>
 800a12c:	9b06      	ldr	r3, [sp, #24]
 800a12e:	2b01      	cmp	r3, #1
 800a130:	4606      	mov	r6, r0
 800a132:	f340 8081 	ble.w	800a238 <_dtoa_r+0x8c8>
 800a136:	f04f 0800 	mov.w	r8, #0
 800a13a:	6933      	ldr	r3, [r6, #16]
 800a13c:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800a140:	6918      	ldr	r0, [r3, #16]
 800a142:	f000 ff89 	bl	800b058 <__hi0bits>
 800a146:	f1c0 0020 	rsb	r0, r0, #32
 800a14a:	9b05      	ldr	r3, [sp, #20]
 800a14c:	4418      	add	r0, r3
 800a14e:	f010 001f 	ands.w	r0, r0, #31
 800a152:	f000 8092 	beq.w	800a27a <_dtoa_r+0x90a>
 800a156:	f1c0 0320 	rsb	r3, r0, #32
 800a15a:	2b04      	cmp	r3, #4
 800a15c:	f340 808a 	ble.w	800a274 <_dtoa_r+0x904>
 800a160:	f1c0 001c 	rsb	r0, r0, #28
 800a164:	9b04      	ldr	r3, [sp, #16]
 800a166:	4403      	add	r3, r0
 800a168:	9304      	str	r3, [sp, #16]
 800a16a:	9b05      	ldr	r3, [sp, #20]
 800a16c:	4403      	add	r3, r0
 800a16e:	4405      	add	r5, r0
 800a170:	9305      	str	r3, [sp, #20]
 800a172:	9b04      	ldr	r3, [sp, #16]
 800a174:	2b00      	cmp	r3, #0
 800a176:	dd07      	ble.n	800a188 <_dtoa_r+0x818>
 800a178:	ee18 1a10 	vmov	r1, s16
 800a17c:	461a      	mov	r2, r3
 800a17e:	4620      	mov	r0, r4
 800a180:	f001 f8d4 	bl	800b32c <__lshift>
 800a184:	ee08 0a10 	vmov	s16, r0
 800a188:	9b05      	ldr	r3, [sp, #20]
 800a18a:	2b00      	cmp	r3, #0
 800a18c:	dd05      	ble.n	800a19a <_dtoa_r+0x82a>
 800a18e:	4631      	mov	r1, r6
 800a190:	461a      	mov	r2, r3
 800a192:	4620      	mov	r0, r4
 800a194:	f001 f8ca 	bl	800b32c <__lshift>
 800a198:	4606      	mov	r6, r0
 800a19a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a19c:	2b00      	cmp	r3, #0
 800a19e:	d06e      	beq.n	800a27e <_dtoa_r+0x90e>
 800a1a0:	ee18 0a10 	vmov	r0, s16
 800a1a4:	4631      	mov	r1, r6
 800a1a6:	f001 f931 	bl	800b40c <__mcmp>
 800a1aa:	2800      	cmp	r0, #0
 800a1ac:	da67      	bge.n	800a27e <_dtoa_r+0x90e>
 800a1ae:	9b00      	ldr	r3, [sp, #0]
 800a1b0:	3b01      	subs	r3, #1
 800a1b2:	ee18 1a10 	vmov	r1, s16
 800a1b6:	9300      	str	r3, [sp, #0]
 800a1b8:	220a      	movs	r2, #10
 800a1ba:	2300      	movs	r3, #0
 800a1bc:	4620      	mov	r0, r4
 800a1be:	f000 febb 	bl	800af38 <__multadd>
 800a1c2:	9b08      	ldr	r3, [sp, #32]
 800a1c4:	ee08 0a10 	vmov	s16, r0
 800a1c8:	2b00      	cmp	r3, #0
 800a1ca:	f000 81b1 	beq.w	800a530 <_dtoa_r+0xbc0>
 800a1ce:	2300      	movs	r3, #0
 800a1d0:	4639      	mov	r1, r7
 800a1d2:	220a      	movs	r2, #10
 800a1d4:	4620      	mov	r0, r4
 800a1d6:	f000 feaf 	bl	800af38 <__multadd>
 800a1da:	9b02      	ldr	r3, [sp, #8]
 800a1dc:	2b00      	cmp	r3, #0
 800a1de:	4607      	mov	r7, r0
 800a1e0:	f300 808e 	bgt.w	800a300 <_dtoa_r+0x990>
 800a1e4:	9b06      	ldr	r3, [sp, #24]
 800a1e6:	2b02      	cmp	r3, #2
 800a1e8:	dc51      	bgt.n	800a28e <_dtoa_r+0x91e>
 800a1ea:	e089      	b.n	800a300 <_dtoa_r+0x990>
 800a1ec:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800a1ee:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800a1f2:	e74b      	b.n	800a08c <_dtoa_r+0x71c>
 800a1f4:	9b03      	ldr	r3, [sp, #12]
 800a1f6:	1e5e      	subs	r6, r3, #1
 800a1f8:	9b07      	ldr	r3, [sp, #28]
 800a1fa:	42b3      	cmp	r3, r6
 800a1fc:	bfbf      	itttt	lt
 800a1fe:	9b07      	ldrlt	r3, [sp, #28]
 800a200:	9607      	strlt	r6, [sp, #28]
 800a202:	1af2      	sublt	r2, r6, r3
 800a204:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800a206:	bfb6      	itet	lt
 800a208:	189b      	addlt	r3, r3, r2
 800a20a:	1b9e      	subge	r6, r3, r6
 800a20c:	930a      	strlt	r3, [sp, #40]	; 0x28
 800a20e:	9b03      	ldr	r3, [sp, #12]
 800a210:	bfb8      	it	lt
 800a212:	2600      	movlt	r6, #0
 800a214:	2b00      	cmp	r3, #0
 800a216:	bfb7      	itett	lt
 800a218:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 800a21c:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 800a220:	1a9d      	sublt	r5, r3, r2
 800a222:	2300      	movlt	r3, #0
 800a224:	e734      	b.n	800a090 <_dtoa_r+0x720>
 800a226:	9e07      	ldr	r6, [sp, #28]
 800a228:	9d04      	ldr	r5, [sp, #16]
 800a22a:	9f08      	ldr	r7, [sp, #32]
 800a22c:	e73b      	b.n	800a0a6 <_dtoa_r+0x736>
 800a22e:	9a07      	ldr	r2, [sp, #28]
 800a230:	e767      	b.n	800a102 <_dtoa_r+0x792>
 800a232:	9b06      	ldr	r3, [sp, #24]
 800a234:	2b01      	cmp	r3, #1
 800a236:	dc18      	bgt.n	800a26a <_dtoa_r+0x8fa>
 800a238:	f1ba 0f00 	cmp.w	sl, #0
 800a23c:	d115      	bne.n	800a26a <_dtoa_r+0x8fa>
 800a23e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800a242:	b993      	cbnz	r3, 800a26a <_dtoa_r+0x8fa>
 800a244:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800a248:	0d1b      	lsrs	r3, r3, #20
 800a24a:	051b      	lsls	r3, r3, #20
 800a24c:	b183      	cbz	r3, 800a270 <_dtoa_r+0x900>
 800a24e:	9b04      	ldr	r3, [sp, #16]
 800a250:	3301      	adds	r3, #1
 800a252:	9304      	str	r3, [sp, #16]
 800a254:	9b05      	ldr	r3, [sp, #20]
 800a256:	3301      	adds	r3, #1
 800a258:	9305      	str	r3, [sp, #20]
 800a25a:	f04f 0801 	mov.w	r8, #1
 800a25e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a260:	2b00      	cmp	r3, #0
 800a262:	f47f af6a 	bne.w	800a13a <_dtoa_r+0x7ca>
 800a266:	2001      	movs	r0, #1
 800a268:	e76f      	b.n	800a14a <_dtoa_r+0x7da>
 800a26a:	f04f 0800 	mov.w	r8, #0
 800a26e:	e7f6      	b.n	800a25e <_dtoa_r+0x8ee>
 800a270:	4698      	mov	r8, r3
 800a272:	e7f4      	b.n	800a25e <_dtoa_r+0x8ee>
 800a274:	f43f af7d 	beq.w	800a172 <_dtoa_r+0x802>
 800a278:	4618      	mov	r0, r3
 800a27a:	301c      	adds	r0, #28
 800a27c:	e772      	b.n	800a164 <_dtoa_r+0x7f4>
 800a27e:	9b03      	ldr	r3, [sp, #12]
 800a280:	2b00      	cmp	r3, #0
 800a282:	dc37      	bgt.n	800a2f4 <_dtoa_r+0x984>
 800a284:	9b06      	ldr	r3, [sp, #24]
 800a286:	2b02      	cmp	r3, #2
 800a288:	dd34      	ble.n	800a2f4 <_dtoa_r+0x984>
 800a28a:	9b03      	ldr	r3, [sp, #12]
 800a28c:	9302      	str	r3, [sp, #8]
 800a28e:	9b02      	ldr	r3, [sp, #8]
 800a290:	b96b      	cbnz	r3, 800a2ae <_dtoa_r+0x93e>
 800a292:	4631      	mov	r1, r6
 800a294:	2205      	movs	r2, #5
 800a296:	4620      	mov	r0, r4
 800a298:	f000 fe4e 	bl	800af38 <__multadd>
 800a29c:	4601      	mov	r1, r0
 800a29e:	4606      	mov	r6, r0
 800a2a0:	ee18 0a10 	vmov	r0, s16
 800a2a4:	f001 f8b2 	bl	800b40c <__mcmp>
 800a2a8:	2800      	cmp	r0, #0
 800a2aa:	f73f adbb 	bgt.w	8009e24 <_dtoa_r+0x4b4>
 800a2ae:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a2b0:	9d01      	ldr	r5, [sp, #4]
 800a2b2:	43db      	mvns	r3, r3
 800a2b4:	9300      	str	r3, [sp, #0]
 800a2b6:	f04f 0800 	mov.w	r8, #0
 800a2ba:	4631      	mov	r1, r6
 800a2bc:	4620      	mov	r0, r4
 800a2be:	f000 fe19 	bl	800aef4 <_Bfree>
 800a2c2:	2f00      	cmp	r7, #0
 800a2c4:	f43f aea4 	beq.w	800a010 <_dtoa_r+0x6a0>
 800a2c8:	f1b8 0f00 	cmp.w	r8, #0
 800a2cc:	d005      	beq.n	800a2da <_dtoa_r+0x96a>
 800a2ce:	45b8      	cmp	r8, r7
 800a2d0:	d003      	beq.n	800a2da <_dtoa_r+0x96a>
 800a2d2:	4641      	mov	r1, r8
 800a2d4:	4620      	mov	r0, r4
 800a2d6:	f000 fe0d 	bl	800aef4 <_Bfree>
 800a2da:	4639      	mov	r1, r7
 800a2dc:	4620      	mov	r0, r4
 800a2de:	f000 fe09 	bl	800aef4 <_Bfree>
 800a2e2:	e695      	b.n	800a010 <_dtoa_r+0x6a0>
 800a2e4:	2600      	movs	r6, #0
 800a2e6:	4637      	mov	r7, r6
 800a2e8:	e7e1      	b.n	800a2ae <_dtoa_r+0x93e>
 800a2ea:	9700      	str	r7, [sp, #0]
 800a2ec:	4637      	mov	r7, r6
 800a2ee:	e599      	b.n	8009e24 <_dtoa_r+0x4b4>
 800a2f0:	40240000 	.word	0x40240000
 800a2f4:	9b08      	ldr	r3, [sp, #32]
 800a2f6:	2b00      	cmp	r3, #0
 800a2f8:	f000 80ca 	beq.w	800a490 <_dtoa_r+0xb20>
 800a2fc:	9b03      	ldr	r3, [sp, #12]
 800a2fe:	9302      	str	r3, [sp, #8]
 800a300:	2d00      	cmp	r5, #0
 800a302:	dd05      	ble.n	800a310 <_dtoa_r+0x9a0>
 800a304:	4639      	mov	r1, r7
 800a306:	462a      	mov	r2, r5
 800a308:	4620      	mov	r0, r4
 800a30a:	f001 f80f 	bl	800b32c <__lshift>
 800a30e:	4607      	mov	r7, r0
 800a310:	f1b8 0f00 	cmp.w	r8, #0
 800a314:	d05b      	beq.n	800a3ce <_dtoa_r+0xa5e>
 800a316:	6879      	ldr	r1, [r7, #4]
 800a318:	4620      	mov	r0, r4
 800a31a:	f000 fdab 	bl	800ae74 <_Balloc>
 800a31e:	4605      	mov	r5, r0
 800a320:	b928      	cbnz	r0, 800a32e <_dtoa_r+0x9be>
 800a322:	4b87      	ldr	r3, [pc, #540]	; (800a540 <_dtoa_r+0xbd0>)
 800a324:	4602      	mov	r2, r0
 800a326:	f240 21ea 	movw	r1, #746	; 0x2ea
 800a32a:	f7ff bb3b 	b.w	80099a4 <_dtoa_r+0x34>
 800a32e:	693a      	ldr	r2, [r7, #16]
 800a330:	3202      	adds	r2, #2
 800a332:	0092      	lsls	r2, r2, #2
 800a334:	f107 010c 	add.w	r1, r7, #12
 800a338:	300c      	adds	r0, #12
 800a33a:	f000 fd8d 	bl	800ae58 <memcpy>
 800a33e:	2201      	movs	r2, #1
 800a340:	4629      	mov	r1, r5
 800a342:	4620      	mov	r0, r4
 800a344:	f000 fff2 	bl	800b32c <__lshift>
 800a348:	9b01      	ldr	r3, [sp, #4]
 800a34a:	f103 0901 	add.w	r9, r3, #1
 800a34e:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 800a352:	4413      	add	r3, r2
 800a354:	9305      	str	r3, [sp, #20]
 800a356:	f00a 0301 	and.w	r3, sl, #1
 800a35a:	46b8      	mov	r8, r7
 800a35c:	9304      	str	r3, [sp, #16]
 800a35e:	4607      	mov	r7, r0
 800a360:	4631      	mov	r1, r6
 800a362:	ee18 0a10 	vmov	r0, s16
 800a366:	f7ff fa77 	bl	8009858 <quorem>
 800a36a:	4641      	mov	r1, r8
 800a36c:	9002      	str	r0, [sp, #8]
 800a36e:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800a372:	ee18 0a10 	vmov	r0, s16
 800a376:	f001 f849 	bl	800b40c <__mcmp>
 800a37a:	463a      	mov	r2, r7
 800a37c:	9003      	str	r0, [sp, #12]
 800a37e:	4631      	mov	r1, r6
 800a380:	4620      	mov	r0, r4
 800a382:	f001 f85f 	bl	800b444 <__mdiff>
 800a386:	68c2      	ldr	r2, [r0, #12]
 800a388:	f109 3bff 	add.w	fp, r9, #4294967295
 800a38c:	4605      	mov	r5, r0
 800a38e:	bb02      	cbnz	r2, 800a3d2 <_dtoa_r+0xa62>
 800a390:	4601      	mov	r1, r0
 800a392:	ee18 0a10 	vmov	r0, s16
 800a396:	f001 f839 	bl	800b40c <__mcmp>
 800a39a:	4602      	mov	r2, r0
 800a39c:	4629      	mov	r1, r5
 800a39e:	4620      	mov	r0, r4
 800a3a0:	9207      	str	r2, [sp, #28]
 800a3a2:	f000 fda7 	bl	800aef4 <_Bfree>
 800a3a6:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 800a3aa:	ea43 0102 	orr.w	r1, r3, r2
 800a3ae:	9b04      	ldr	r3, [sp, #16]
 800a3b0:	430b      	orrs	r3, r1
 800a3b2:	464d      	mov	r5, r9
 800a3b4:	d10f      	bne.n	800a3d6 <_dtoa_r+0xa66>
 800a3b6:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800a3ba:	d02a      	beq.n	800a412 <_dtoa_r+0xaa2>
 800a3bc:	9b03      	ldr	r3, [sp, #12]
 800a3be:	2b00      	cmp	r3, #0
 800a3c0:	dd02      	ble.n	800a3c8 <_dtoa_r+0xa58>
 800a3c2:	9b02      	ldr	r3, [sp, #8]
 800a3c4:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 800a3c8:	f88b a000 	strb.w	sl, [fp]
 800a3cc:	e775      	b.n	800a2ba <_dtoa_r+0x94a>
 800a3ce:	4638      	mov	r0, r7
 800a3d0:	e7ba      	b.n	800a348 <_dtoa_r+0x9d8>
 800a3d2:	2201      	movs	r2, #1
 800a3d4:	e7e2      	b.n	800a39c <_dtoa_r+0xa2c>
 800a3d6:	9b03      	ldr	r3, [sp, #12]
 800a3d8:	2b00      	cmp	r3, #0
 800a3da:	db04      	blt.n	800a3e6 <_dtoa_r+0xa76>
 800a3dc:	9906      	ldr	r1, [sp, #24]
 800a3de:	430b      	orrs	r3, r1
 800a3e0:	9904      	ldr	r1, [sp, #16]
 800a3e2:	430b      	orrs	r3, r1
 800a3e4:	d122      	bne.n	800a42c <_dtoa_r+0xabc>
 800a3e6:	2a00      	cmp	r2, #0
 800a3e8:	ddee      	ble.n	800a3c8 <_dtoa_r+0xa58>
 800a3ea:	ee18 1a10 	vmov	r1, s16
 800a3ee:	2201      	movs	r2, #1
 800a3f0:	4620      	mov	r0, r4
 800a3f2:	f000 ff9b 	bl	800b32c <__lshift>
 800a3f6:	4631      	mov	r1, r6
 800a3f8:	ee08 0a10 	vmov	s16, r0
 800a3fc:	f001 f806 	bl	800b40c <__mcmp>
 800a400:	2800      	cmp	r0, #0
 800a402:	dc03      	bgt.n	800a40c <_dtoa_r+0xa9c>
 800a404:	d1e0      	bne.n	800a3c8 <_dtoa_r+0xa58>
 800a406:	f01a 0f01 	tst.w	sl, #1
 800a40a:	d0dd      	beq.n	800a3c8 <_dtoa_r+0xa58>
 800a40c:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800a410:	d1d7      	bne.n	800a3c2 <_dtoa_r+0xa52>
 800a412:	2339      	movs	r3, #57	; 0x39
 800a414:	f88b 3000 	strb.w	r3, [fp]
 800a418:	462b      	mov	r3, r5
 800a41a:	461d      	mov	r5, r3
 800a41c:	3b01      	subs	r3, #1
 800a41e:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800a422:	2a39      	cmp	r2, #57	; 0x39
 800a424:	d071      	beq.n	800a50a <_dtoa_r+0xb9a>
 800a426:	3201      	adds	r2, #1
 800a428:	701a      	strb	r2, [r3, #0]
 800a42a:	e746      	b.n	800a2ba <_dtoa_r+0x94a>
 800a42c:	2a00      	cmp	r2, #0
 800a42e:	dd07      	ble.n	800a440 <_dtoa_r+0xad0>
 800a430:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800a434:	d0ed      	beq.n	800a412 <_dtoa_r+0xaa2>
 800a436:	f10a 0301 	add.w	r3, sl, #1
 800a43a:	f88b 3000 	strb.w	r3, [fp]
 800a43e:	e73c      	b.n	800a2ba <_dtoa_r+0x94a>
 800a440:	9b05      	ldr	r3, [sp, #20]
 800a442:	f809 ac01 	strb.w	sl, [r9, #-1]
 800a446:	4599      	cmp	r9, r3
 800a448:	d047      	beq.n	800a4da <_dtoa_r+0xb6a>
 800a44a:	ee18 1a10 	vmov	r1, s16
 800a44e:	2300      	movs	r3, #0
 800a450:	220a      	movs	r2, #10
 800a452:	4620      	mov	r0, r4
 800a454:	f000 fd70 	bl	800af38 <__multadd>
 800a458:	45b8      	cmp	r8, r7
 800a45a:	ee08 0a10 	vmov	s16, r0
 800a45e:	f04f 0300 	mov.w	r3, #0
 800a462:	f04f 020a 	mov.w	r2, #10
 800a466:	4641      	mov	r1, r8
 800a468:	4620      	mov	r0, r4
 800a46a:	d106      	bne.n	800a47a <_dtoa_r+0xb0a>
 800a46c:	f000 fd64 	bl	800af38 <__multadd>
 800a470:	4680      	mov	r8, r0
 800a472:	4607      	mov	r7, r0
 800a474:	f109 0901 	add.w	r9, r9, #1
 800a478:	e772      	b.n	800a360 <_dtoa_r+0x9f0>
 800a47a:	f000 fd5d 	bl	800af38 <__multadd>
 800a47e:	4639      	mov	r1, r7
 800a480:	4680      	mov	r8, r0
 800a482:	2300      	movs	r3, #0
 800a484:	220a      	movs	r2, #10
 800a486:	4620      	mov	r0, r4
 800a488:	f000 fd56 	bl	800af38 <__multadd>
 800a48c:	4607      	mov	r7, r0
 800a48e:	e7f1      	b.n	800a474 <_dtoa_r+0xb04>
 800a490:	9b03      	ldr	r3, [sp, #12]
 800a492:	9302      	str	r3, [sp, #8]
 800a494:	9d01      	ldr	r5, [sp, #4]
 800a496:	ee18 0a10 	vmov	r0, s16
 800a49a:	4631      	mov	r1, r6
 800a49c:	f7ff f9dc 	bl	8009858 <quorem>
 800a4a0:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800a4a4:	9b01      	ldr	r3, [sp, #4]
 800a4a6:	f805 ab01 	strb.w	sl, [r5], #1
 800a4aa:	1aea      	subs	r2, r5, r3
 800a4ac:	9b02      	ldr	r3, [sp, #8]
 800a4ae:	4293      	cmp	r3, r2
 800a4b0:	dd09      	ble.n	800a4c6 <_dtoa_r+0xb56>
 800a4b2:	ee18 1a10 	vmov	r1, s16
 800a4b6:	2300      	movs	r3, #0
 800a4b8:	220a      	movs	r2, #10
 800a4ba:	4620      	mov	r0, r4
 800a4bc:	f000 fd3c 	bl	800af38 <__multadd>
 800a4c0:	ee08 0a10 	vmov	s16, r0
 800a4c4:	e7e7      	b.n	800a496 <_dtoa_r+0xb26>
 800a4c6:	9b02      	ldr	r3, [sp, #8]
 800a4c8:	2b00      	cmp	r3, #0
 800a4ca:	bfc8      	it	gt
 800a4cc:	461d      	movgt	r5, r3
 800a4ce:	9b01      	ldr	r3, [sp, #4]
 800a4d0:	bfd8      	it	le
 800a4d2:	2501      	movle	r5, #1
 800a4d4:	441d      	add	r5, r3
 800a4d6:	f04f 0800 	mov.w	r8, #0
 800a4da:	ee18 1a10 	vmov	r1, s16
 800a4de:	2201      	movs	r2, #1
 800a4e0:	4620      	mov	r0, r4
 800a4e2:	f000 ff23 	bl	800b32c <__lshift>
 800a4e6:	4631      	mov	r1, r6
 800a4e8:	ee08 0a10 	vmov	s16, r0
 800a4ec:	f000 ff8e 	bl	800b40c <__mcmp>
 800a4f0:	2800      	cmp	r0, #0
 800a4f2:	dc91      	bgt.n	800a418 <_dtoa_r+0xaa8>
 800a4f4:	d102      	bne.n	800a4fc <_dtoa_r+0xb8c>
 800a4f6:	f01a 0f01 	tst.w	sl, #1
 800a4fa:	d18d      	bne.n	800a418 <_dtoa_r+0xaa8>
 800a4fc:	462b      	mov	r3, r5
 800a4fe:	461d      	mov	r5, r3
 800a500:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800a504:	2a30      	cmp	r2, #48	; 0x30
 800a506:	d0fa      	beq.n	800a4fe <_dtoa_r+0xb8e>
 800a508:	e6d7      	b.n	800a2ba <_dtoa_r+0x94a>
 800a50a:	9a01      	ldr	r2, [sp, #4]
 800a50c:	429a      	cmp	r2, r3
 800a50e:	d184      	bne.n	800a41a <_dtoa_r+0xaaa>
 800a510:	9b00      	ldr	r3, [sp, #0]
 800a512:	3301      	adds	r3, #1
 800a514:	9300      	str	r3, [sp, #0]
 800a516:	2331      	movs	r3, #49	; 0x31
 800a518:	7013      	strb	r3, [r2, #0]
 800a51a:	e6ce      	b.n	800a2ba <_dtoa_r+0x94a>
 800a51c:	4b09      	ldr	r3, [pc, #36]	; (800a544 <_dtoa_r+0xbd4>)
 800a51e:	f7ff ba95 	b.w	8009a4c <_dtoa_r+0xdc>
 800a522:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a524:	2b00      	cmp	r3, #0
 800a526:	f47f aa6e 	bne.w	8009a06 <_dtoa_r+0x96>
 800a52a:	4b07      	ldr	r3, [pc, #28]	; (800a548 <_dtoa_r+0xbd8>)
 800a52c:	f7ff ba8e 	b.w	8009a4c <_dtoa_r+0xdc>
 800a530:	9b02      	ldr	r3, [sp, #8]
 800a532:	2b00      	cmp	r3, #0
 800a534:	dcae      	bgt.n	800a494 <_dtoa_r+0xb24>
 800a536:	9b06      	ldr	r3, [sp, #24]
 800a538:	2b02      	cmp	r3, #2
 800a53a:	f73f aea8 	bgt.w	800a28e <_dtoa_r+0x91e>
 800a53e:	e7a9      	b.n	800a494 <_dtoa_r+0xb24>
 800a540:	0800c920 	.word	0x0800c920
 800a544:	0800c720 	.word	0x0800c720
 800a548:	0800c8a1 	.word	0x0800c8a1

0800a54c <std>:
 800a54c:	2300      	movs	r3, #0
 800a54e:	b510      	push	{r4, lr}
 800a550:	4604      	mov	r4, r0
 800a552:	e9c0 3300 	strd	r3, r3, [r0]
 800a556:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800a55a:	6083      	str	r3, [r0, #8]
 800a55c:	8181      	strh	r1, [r0, #12]
 800a55e:	6643      	str	r3, [r0, #100]	; 0x64
 800a560:	81c2      	strh	r2, [r0, #14]
 800a562:	6183      	str	r3, [r0, #24]
 800a564:	4619      	mov	r1, r3
 800a566:	2208      	movs	r2, #8
 800a568:	305c      	adds	r0, #92	; 0x5c
 800a56a:	f7fd fc07 	bl	8007d7c <memset>
 800a56e:	4b05      	ldr	r3, [pc, #20]	; (800a584 <std+0x38>)
 800a570:	6263      	str	r3, [r4, #36]	; 0x24
 800a572:	4b05      	ldr	r3, [pc, #20]	; (800a588 <std+0x3c>)
 800a574:	62a3      	str	r3, [r4, #40]	; 0x28
 800a576:	4b05      	ldr	r3, [pc, #20]	; (800a58c <std+0x40>)
 800a578:	62e3      	str	r3, [r4, #44]	; 0x2c
 800a57a:	4b05      	ldr	r3, [pc, #20]	; (800a590 <std+0x44>)
 800a57c:	6224      	str	r4, [r4, #32]
 800a57e:	6323      	str	r3, [r4, #48]	; 0x30
 800a580:	bd10      	pop	{r4, pc}
 800a582:	bf00      	nop
 800a584:	0800bf81 	.word	0x0800bf81
 800a588:	0800bfa3 	.word	0x0800bfa3
 800a58c:	0800bfdb 	.word	0x0800bfdb
 800a590:	0800bfff 	.word	0x0800bfff

0800a594 <_cleanup_r>:
 800a594:	4901      	ldr	r1, [pc, #4]	; (800a59c <_cleanup_r+0x8>)
 800a596:	f000 b8af 	b.w	800a6f8 <_fwalk_reent>
 800a59a:	bf00      	nop
 800a59c:	0800c359 	.word	0x0800c359

0800a5a0 <__sfmoreglue>:
 800a5a0:	b570      	push	{r4, r5, r6, lr}
 800a5a2:	2268      	movs	r2, #104	; 0x68
 800a5a4:	1e4d      	subs	r5, r1, #1
 800a5a6:	4355      	muls	r5, r2
 800a5a8:	460e      	mov	r6, r1
 800a5aa:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800a5ae:	f001 f9a5 	bl	800b8fc <_malloc_r>
 800a5b2:	4604      	mov	r4, r0
 800a5b4:	b140      	cbz	r0, 800a5c8 <__sfmoreglue+0x28>
 800a5b6:	2100      	movs	r1, #0
 800a5b8:	e9c0 1600 	strd	r1, r6, [r0]
 800a5bc:	300c      	adds	r0, #12
 800a5be:	60a0      	str	r0, [r4, #8]
 800a5c0:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800a5c4:	f7fd fbda 	bl	8007d7c <memset>
 800a5c8:	4620      	mov	r0, r4
 800a5ca:	bd70      	pop	{r4, r5, r6, pc}

0800a5cc <__sfp_lock_acquire>:
 800a5cc:	4801      	ldr	r0, [pc, #4]	; (800a5d4 <__sfp_lock_acquire+0x8>)
 800a5ce:	f000 bc26 	b.w	800ae1e <__retarget_lock_acquire_recursive>
 800a5d2:	bf00      	nop
 800a5d4:	20001535 	.word	0x20001535

0800a5d8 <__sfp_lock_release>:
 800a5d8:	4801      	ldr	r0, [pc, #4]	; (800a5e0 <__sfp_lock_release+0x8>)
 800a5da:	f000 bc21 	b.w	800ae20 <__retarget_lock_release_recursive>
 800a5de:	bf00      	nop
 800a5e0:	20001535 	.word	0x20001535

0800a5e4 <__sinit_lock_acquire>:
 800a5e4:	4801      	ldr	r0, [pc, #4]	; (800a5ec <__sinit_lock_acquire+0x8>)
 800a5e6:	f000 bc1a 	b.w	800ae1e <__retarget_lock_acquire_recursive>
 800a5ea:	bf00      	nop
 800a5ec:	20001536 	.word	0x20001536

0800a5f0 <__sinit_lock_release>:
 800a5f0:	4801      	ldr	r0, [pc, #4]	; (800a5f8 <__sinit_lock_release+0x8>)
 800a5f2:	f000 bc15 	b.w	800ae20 <__retarget_lock_release_recursive>
 800a5f6:	bf00      	nop
 800a5f8:	20001536 	.word	0x20001536

0800a5fc <__sinit>:
 800a5fc:	b510      	push	{r4, lr}
 800a5fe:	4604      	mov	r4, r0
 800a600:	f7ff fff0 	bl	800a5e4 <__sinit_lock_acquire>
 800a604:	69a3      	ldr	r3, [r4, #24]
 800a606:	b11b      	cbz	r3, 800a610 <__sinit+0x14>
 800a608:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a60c:	f7ff bff0 	b.w	800a5f0 <__sinit_lock_release>
 800a610:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800a614:	6523      	str	r3, [r4, #80]	; 0x50
 800a616:	4b13      	ldr	r3, [pc, #76]	; (800a664 <__sinit+0x68>)
 800a618:	4a13      	ldr	r2, [pc, #76]	; (800a668 <__sinit+0x6c>)
 800a61a:	681b      	ldr	r3, [r3, #0]
 800a61c:	62a2      	str	r2, [r4, #40]	; 0x28
 800a61e:	42a3      	cmp	r3, r4
 800a620:	bf04      	itt	eq
 800a622:	2301      	moveq	r3, #1
 800a624:	61a3      	streq	r3, [r4, #24]
 800a626:	4620      	mov	r0, r4
 800a628:	f000 f820 	bl	800a66c <__sfp>
 800a62c:	6060      	str	r0, [r4, #4]
 800a62e:	4620      	mov	r0, r4
 800a630:	f000 f81c 	bl	800a66c <__sfp>
 800a634:	60a0      	str	r0, [r4, #8]
 800a636:	4620      	mov	r0, r4
 800a638:	f000 f818 	bl	800a66c <__sfp>
 800a63c:	2200      	movs	r2, #0
 800a63e:	60e0      	str	r0, [r4, #12]
 800a640:	2104      	movs	r1, #4
 800a642:	6860      	ldr	r0, [r4, #4]
 800a644:	f7ff ff82 	bl	800a54c <std>
 800a648:	68a0      	ldr	r0, [r4, #8]
 800a64a:	2201      	movs	r2, #1
 800a64c:	2109      	movs	r1, #9
 800a64e:	f7ff ff7d 	bl	800a54c <std>
 800a652:	68e0      	ldr	r0, [r4, #12]
 800a654:	2202      	movs	r2, #2
 800a656:	2112      	movs	r1, #18
 800a658:	f7ff ff78 	bl	800a54c <std>
 800a65c:	2301      	movs	r3, #1
 800a65e:	61a3      	str	r3, [r4, #24]
 800a660:	e7d2      	b.n	800a608 <__sinit+0xc>
 800a662:	bf00      	nop
 800a664:	0800c70c 	.word	0x0800c70c
 800a668:	0800a595 	.word	0x0800a595

0800a66c <__sfp>:
 800a66c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a66e:	4607      	mov	r7, r0
 800a670:	f7ff ffac 	bl	800a5cc <__sfp_lock_acquire>
 800a674:	4b1e      	ldr	r3, [pc, #120]	; (800a6f0 <__sfp+0x84>)
 800a676:	681e      	ldr	r6, [r3, #0]
 800a678:	69b3      	ldr	r3, [r6, #24]
 800a67a:	b913      	cbnz	r3, 800a682 <__sfp+0x16>
 800a67c:	4630      	mov	r0, r6
 800a67e:	f7ff ffbd 	bl	800a5fc <__sinit>
 800a682:	3648      	adds	r6, #72	; 0x48
 800a684:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800a688:	3b01      	subs	r3, #1
 800a68a:	d503      	bpl.n	800a694 <__sfp+0x28>
 800a68c:	6833      	ldr	r3, [r6, #0]
 800a68e:	b30b      	cbz	r3, 800a6d4 <__sfp+0x68>
 800a690:	6836      	ldr	r6, [r6, #0]
 800a692:	e7f7      	b.n	800a684 <__sfp+0x18>
 800a694:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800a698:	b9d5      	cbnz	r5, 800a6d0 <__sfp+0x64>
 800a69a:	4b16      	ldr	r3, [pc, #88]	; (800a6f4 <__sfp+0x88>)
 800a69c:	60e3      	str	r3, [r4, #12]
 800a69e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800a6a2:	6665      	str	r5, [r4, #100]	; 0x64
 800a6a4:	f000 fbba 	bl	800ae1c <__retarget_lock_init_recursive>
 800a6a8:	f7ff ff96 	bl	800a5d8 <__sfp_lock_release>
 800a6ac:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800a6b0:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800a6b4:	6025      	str	r5, [r4, #0]
 800a6b6:	61a5      	str	r5, [r4, #24]
 800a6b8:	2208      	movs	r2, #8
 800a6ba:	4629      	mov	r1, r5
 800a6bc:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800a6c0:	f7fd fb5c 	bl	8007d7c <memset>
 800a6c4:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800a6c8:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800a6cc:	4620      	mov	r0, r4
 800a6ce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a6d0:	3468      	adds	r4, #104	; 0x68
 800a6d2:	e7d9      	b.n	800a688 <__sfp+0x1c>
 800a6d4:	2104      	movs	r1, #4
 800a6d6:	4638      	mov	r0, r7
 800a6d8:	f7ff ff62 	bl	800a5a0 <__sfmoreglue>
 800a6dc:	4604      	mov	r4, r0
 800a6de:	6030      	str	r0, [r6, #0]
 800a6e0:	2800      	cmp	r0, #0
 800a6e2:	d1d5      	bne.n	800a690 <__sfp+0x24>
 800a6e4:	f7ff ff78 	bl	800a5d8 <__sfp_lock_release>
 800a6e8:	230c      	movs	r3, #12
 800a6ea:	603b      	str	r3, [r7, #0]
 800a6ec:	e7ee      	b.n	800a6cc <__sfp+0x60>
 800a6ee:	bf00      	nop
 800a6f0:	0800c70c 	.word	0x0800c70c
 800a6f4:	ffff0001 	.word	0xffff0001

0800a6f8 <_fwalk_reent>:
 800a6f8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a6fc:	4606      	mov	r6, r0
 800a6fe:	4688      	mov	r8, r1
 800a700:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800a704:	2700      	movs	r7, #0
 800a706:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800a70a:	f1b9 0901 	subs.w	r9, r9, #1
 800a70e:	d505      	bpl.n	800a71c <_fwalk_reent+0x24>
 800a710:	6824      	ldr	r4, [r4, #0]
 800a712:	2c00      	cmp	r4, #0
 800a714:	d1f7      	bne.n	800a706 <_fwalk_reent+0xe>
 800a716:	4638      	mov	r0, r7
 800a718:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a71c:	89ab      	ldrh	r3, [r5, #12]
 800a71e:	2b01      	cmp	r3, #1
 800a720:	d907      	bls.n	800a732 <_fwalk_reent+0x3a>
 800a722:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800a726:	3301      	adds	r3, #1
 800a728:	d003      	beq.n	800a732 <_fwalk_reent+0x3a>
 800a72a:	4629      	mov	r1, r5
 800a72c:	4630      	mov	r0, r6
 800a72e:	47c0      	blx	r8
 800a730:	4307      	orrs	r7, r0
 800a732:	3568      	adds	r5, #104	; 0x68
 800a734:	e7e9      	b.n	800a70a <_fwalk_reent+0x12>

0800a736 <rshift>:
 800a736:	6903      	ldr	r3, [r0, #16]
 800a738:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800a73c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800a740:	ea4f 1261 	mov.w	r2, r1, asr #5
 800a744:	f100 0414 	add.w	r4, r0, #20
 800a748:	dd45      	ble.n	800a7d6 <rshift+0xa0>
 800a74a:	f011 011f 	ands.w	r1, r1, #31
 800a74e:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800a752:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800a756:	d10c      	bne.n	800a772 <rshift+0x3c>
 800a758:	f100 0710 	add.w	r7, r0, #16
 800a75c:	4629      	mov	r1, r5
 800a75e:	42b1      	cmp	r1, r6
 800a760:	d334      	bcc.n	800a7cc <rshift+0x96>
 800a762:	1a9b      	subs	r3, r3, r2
 800a764:	009b      	lsls	r3, r3, #2
 800a766:	1eea      	subs	r2, r5, #3
 800a768:	4296      	cmp	r6, r2
 800a76a:	bf38      	it	cc
 800a76c:	2300      	movcc	r3, #0
 800a76e:	4423      	add	r3, r4
 800a770:	e015      	b.n	800a79e <rshift+0x68>
 800a772:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800a776:	f1c1 0820 	rsb	r8, r1, #32
 800a77a:	40cf      	lsrs	r7, r1
 800a77c:	f105 0e04 	add.w	lr, r5, #4
 800a780:	46a1      	mov	r9, r4
 800a782:	4576      	cmp	r6, lr
 800a784:	46f4      	mov	ip, lr
 800a786:	d815      	bhi.n	800a7b4 <rshift+0x7e>
 800a788:	1a9a      	subs	r2, r3, r2
 800a78a:	0092      	lsls	r2, r2, #2
 800a78c:	3a04      	subs	r2, #4
 800a78e:	3501      	adds	r5, #1
 800a790:	42ae      	cmp	r6, r5
 800a792:	bf38      	it	cc
 800a794:	2200      	movcc	r2, #0
 800a796:	18a3      	adds	r3, r4, r2
 800a798:	50a7      	str	r7, [r4, r2]
 800a79a:	b107      	cbz	r7, 800a79e <rshift+0x68>
 800a79c:	3304      	adds	r3, #4
 800a79e:	1b1a      	subs	r2, r3, r4
 800a7a0:	42a3      	cmp	r3, r4
 800a7a2:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800a7a6:	bf08      	it	eq
 800a7a8:	2300      	moveq	r3, #0
 800a7aa:	6102      	str	r2, [r0, #16]
 800a7ac:	bf08      	it	eq
 800a7ae:	6143      	streq	r3, [r0, #20]
 800a7b0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a7b4:	f8dc c000 	ldr.w	ip, [ip]
 800a7b8:	fa0c fc08 	lsl.w	ip, ip, r8
 800a7bc:	ea4c 0707 	orr.w	r7, ip, r7
 800a7c0:	f849 7b04 	str.w	r7, [r9], #4
 800a7c4:	f85e 7b04 	ldr.w	r7, [lr], #4
 800a7c8:	40cf      	lsrs	r7, r1
 800a7ca:	e7da      	b.n	800a782 <rshift+0x4c>
 800a7cc:	f851 cb04 	ldr.w	ip, [r1], #4
 800a7d0:	f847 cf04 	str.w	ip, [r7, #4]!
 800a7d4:	e7c3      	b.n	800a75e <rshift+0x28>
 800a7d6:	4623      	mov	r3, r4
 800a7d8:	e7e1      	b.n	800a79e <rshift+0x68>

0800a7da <__hexdig_fun>:
 800a7da:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800a7de:	2b09      	cmp	r3, #9
 800a7e0:	d802      	bhi.n	800a7e8 <__hexdig_fun+0xe>
 800a7e2:	3820      	subs	r0, #32
 800a7e4:	b2c0      	uxtb	r0, r0
 800a7e6:	4770      	bx	lr
 800a7e8:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800a7ec:	2b05      	cmp	r3, #5
 800a7ee:	d801      	bhi.n	800a7f4 <__hexdig_fun+0x1a>
 800a7f0:	3847      	subs	r0, #71	; 0x47
 800a7f2:	e7f7      	b.n	800a7e4 <__hexdig_fun+0xa>
 800a7f4:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800a7f8:	2b05      	cmp	r3, #5
 800a7fa:	d801      	bhi.n	800a800 <__hexdig_fun+0x26>
 800a7fc:	3827      	subs	r0, #39	; 0x27
 800a7fe:	e7f1      	b.n	800a7e4 <__hexdig_fun+0xa>
 800a800:	2000      	movs	r0, #0
 800a802:	4770      	bx	lr

0800a804 <__gethex>:
 800a804:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a808:	ed2d 8b02 	vpush	{d8}
 800a80c:	b089      	sub	sp, #36	; 0x24
 800a80e:	ee08 0a10 	vmov	s16, r0
 800a812:	9304      	str	r3, [sp, #16]
 800a814:	4bb4      	ldr	r3, [pc, #720]	; (800aae8 <__gethex+0x2e4>)
 800a816:	681b      	ldr	r3, [r3, #0]
 800a818:	9301      	str	r3, [sp, #4]
 800a81a:	4618      	mov	r0, r3
 800a81c:	468b      	mov	fp, r1
 800a81e:	4690      	mov	r8, r2
 800a820:	f7f5 fcde 	bl	80001e0 <strlen>
 800a824:	9b01      	ldr	r3, [sp, #4]
 800a826:	f8db 2000 	ldr.w	r2, [fp]
 800a82a:	4403      	add	r3, r0
 800a82c:	4682      	mov	sl, r0
 800a82e:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 800a832:	9305      	str	r3, [sp, #20]
 800a834:	1c93      	adds	r3, r2, #2
 800a836:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 800a83a:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800a83e:	32fe      	adds	r2, #254	; 0xfe
 800a840:	18d1      	adds	r1, r2, r3
 800a842:	461f      	mov	r7, r3
 800a844:	f813 0b01 	ldrb.w	r0, [r3], #1
 800a848:	9100      	str	r1, [sp, #0]
 800a84a:	2830      	cmp	r0, #48	; 0x30
 800a84c:	d0f8      	beq.n	800a840 <__gethex+0x3c>
 800a84e:	f7ff ffc4 	bl	800a7da <__hexdig_fun>
 800a852:	4604      	mov	r4, r0
 800a854:	2800      	cmp	r0, #0
 800a856:	d13a      	bne.n	800a8ce <__gethex+0xca>
 800a858:	9901      	ldr	r1, [sp, #4]
 800a85a:	4652      	mov	r2, sl
 800a85c:	4638      	mov	r0, r7
 800a85e:	f001 fbd2 	bl	800c006 <strncmp>
 800a862:	4605      	mov	r5, r0
 800a864:	2800      	cmp	r0, #0
 800a866:	d168      	bne.n	800a93a <__gethex+0x136>
 800a868:	f817 000a 	ldrb.w	r0, [r7, sl]
 800a86c:	eb07 060a 	add.w	r6, r7, sl
 800a870:	f7ff ffb3 	bl	800a7da <__hexdig_fun>
 800a874:	2800      	cmp	r0, #0
 800a876:	d062      	beq.n	800a93e <__gethex+0x13a>
 800a878:	4633      	mov	r3, r6
 800a87a:	7818      	ldrb	r0, [r3, #0]
 800a87c:	2830      	cmp	r0, #48	; 0x30
 800a87e:	461f      	mov	r7, r3
 800a880:	f103 0301 	add.w	r3, r3, #1
 800a884:	d0f9      	beq.n	800a87a <__gethex+0x76>
 800a886:	f7ff ffa8 	bl	800a7da <__hexdig_fun>
 800a88a:	2301      	movs	r3, #1
 800a88c:	fab0 f480 	clz	r4, r0
 800a890:	0964      	lsrs	r4, r4, #5
 800a892:	4635      	mov	r5, r6
 800a894:	9300      	str	r3, [sp, #0]
 800a896:	463a      	mov	r2, r7
 800a898:	4616      	mov	r6, r2
 800a89a:	3201      	adds	r2, #1
 800a89c:	7830      	ldrb	r0, [r6, #0]
 800a89e:	f7ff ff9c 	bl	800a7da <__hexdig_fun>
 800a8a2:	2800      	cmp	r0, #0
 800a8a4:	d1f8      	bne.n	800a898 <__gethex+0x94>
 800a8a6:	9901      	ldr	r1, [sp, #4]
 800a8a8:	4652      	mov	r2, sl
 800a8aa:	4630      	mov	r0, r6
 800a8ac:	f001 fbab 	bl	800c006 <strncmp>
 800a8b0:	b980      	cbnz	r0, 800a8d4 <__gethex+0xd0>
 800a8b2:	b94d      	cbnz	r5, 800a8c8 <__gethex+0xc4>
 800a8b4:	eb06 050a 	add.w	r5, r6, sl
 800a8b8:	462a      	mov	r2, r5
 800a8ba:	4616      	mov	r6, r2
 800a8bc:	3201      	adds	r2, #1
 800a8be:	7830      	ldrb	r0, [r6, #0]
 800a8c0:	f7ff ff8b 	bl	800a7da <__hexdig_fun>
 800a8c4:	2800      	cmp	r0, #0
 800a8c6:	d1f8      	bne.n	800a8ba <__gethex+0xb6>
 800a8c8:	1bad      	subs	r5, r5, r6
 800a8ca:	00ad      	lsls	r5, r5, #2
 800a8cc:	e004      	b.n	800a8d8 <__gethex+0xd4>
 800a8ce:	2400      	movs	r4, #0
 800a8d0:	4625      	mov	r5, r4
 800a8d2:	e7e0      	b.n	800a896 <__gethex+0x92>
 800a8d4:	2d00      	cmp	r5, #0
 800a8d6:	d1f7      	bne.n	800a8c8 <__gethex+0xc4>
 800a8d8:	7833      	ldrb	r3, [r6, #0]
 800a8da:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800a8de:	2b50      	cmp	r3, #80	; 0x50
 800a8e0:	d13b      	bne.n	800a95a <__gethex+0x156>
 800a8e2:	7873      	ldrb	r3, [r6, #1]
 800a8e4:	2b2b      	cmp	r3, #43	; 0x2b
 800a8e6:	d02c      	beq.n	800a942 <__gethex+0x13e>
 800a8e8:	2b2d      	cmp	r3, #45	; 0x2d
 800a8ea:	d02e      	beq.n	800a94a <__gethex+0x146>
 800a8ec:	1c71      	adds	r1, r6, #1
 800a8ee:	f04f 0900 	mov.w	r9, #0
 800a8f2:	7808      	ldrb	r0, [r1, #0]
 800a8f4:	f7ff ff71 	bl	800a7da <__hexdig_fun>
 800a8f8:	1e43      	subs	r3, r0, #1
 800a8fa:	b2db      	uxtb	r3, r3
 800a8fc:	2b18      	cmp	r3, #24
 800a8fe:	d82c      	bhi.n	800a95a <__gethex+0x156>
 800a900:	f1a0 0210 	sub.w	r2, r0, #16
 800a904:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800a908:	f7ff ff67 	bl	800a7da <__hexdig_fun>
 800a90c:	1e43      	subs	r3, r0, #1
 800a90e:	b2db      	uxtb	r3, r3
 800a910:	2b18      	cmp	r3, #24
 800a912:	d91d      	bls.n	800a950 <__gethex+0x14c>
 800a914:	f1b9 0f00 	cmp.w	r9, #0
 800a918:	d000      	beq.n	800a91c <__gethex+0x118>
 800a91a:	4252      	negs	r2, r2
 800a91c:	4415      	add	r5, r2
 800a91e:	f8cb 1000 	str.w	r1, [fp]
 800a922:	b1e4      	cbz	r4, 800a95e <__gethex+0x15a>
 800a924:	9b00      	ldr	r3, [sp, #0]
 800a926:	2b00      	cmp	r3, #0
 800a928:	bf14      	ite	ne
 800a92a:	2700      	movne	r7, #0
 800a92c:	2706      	moveq	r7, #6
 800a92e:	4638      	mov	r0, r7
 800a930:	b009      	add	sp, #36	; 0x24
 800a932:	ecbd 8b02 	vpop	{d8}
 800a936:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a93a:	463e      	mov	r6, r7
 800a93c:	4625      	mov	r5, r4
 800a93e:	2401      	movs	r4, #1
 800a940:	e7ca      	b.n	800a8d8 <__gethex+0xd4>
 800a942:	f04f 0900 	mov.w	r9, #0
 800a946:	1cb1      	adds	r1, r6, #2
 800a948:	e7d3      	b.n	800a8f2 <__gethex+0xee>
 800a94a:	f04f 0901 	mov.w	r9, #1
 800a94e:	e7fa      	b.n	800a946 <__gethex+0x142>
 800a950:	230a      	movs	r3, #10
 800a952:	fb03 0202 	mla	r2, r3, r2, r0
 800a956:	3a10      	subs	r2, #16
 800a958:	e7d4      	b.n	800a904 <__gethex+0x100>
 800a95a:	4631      	mov	r1, r6
 800a95c:	e7df      	b.n	800a91e <__gethex+0x11a>
 800a95e:	1bf3      	subs	r3, r6, r7
 800a960:	3b01      	subs	r3, #1
 800a962:	4621      	mov	r1, r4
 800a964:	2b07      	cmp	r3, #7
 800a966:	dc0b      	bgt.n	800a980 <__gethex+0x17c>
 800a968:	ee18 0a10 	vmov	r0, s16
 800a96c:	f000 fa82 	bl	800ae74 <_Balloc>
 800a970:	4604      	mov	r4, r0
 800a972:	b940      	cbnz	r0, 800a986 <__gethex+0x182>
 800a974:	4b5d      	ldr	r3, [pc, #372]	; (800aaec <__gethex+0x2e8>)
 800a976:	4602      	mov	r2, r0
 800a978:	21de      	movs	r1, #222	; 0xde
 800a97a:	485d      	ldr	r0, [pc, #372]	; (800aaf0 <__gethex+0x2ec>)
 800a97c:	f001 fc38 	bl	800c1f0 <__assert_func>
 800a980:	3101      	adds	r1, #1
 800a982:	105b      	asrs	r3, r3, #1
 800a984:	e7ee      	b.n	800a964 <__gethex+0x160>
 800a986:	f100 0914 	add.w	r9, r0, #20
 800a98a:	f04f 0b00 	mov.w	fp, #0
 800a98e:	f1ca 0301 	rsb	r3, sl, #1
 800a992:	f8cd 9008 	str.w	r9, [sp, #8]
 800a996:	f8cd b000 	str.w	fp, [sp]
 800a99a:	9306      	str	r3, [sp, #24]
 800a99c:	42b7      	cmp	r7, r6
 800a99e:	d340      	bcc.n	800aa22 <__gethex+0x21e>
 800a9a0:	9802      	ldr	r0, [sp, #8]
 800a9a2:	9b00      	ldr	r3, [sp, #0]
 800a9a4:	f840 3b04 	str.w	r3, [r0], #4
 800a9a8:	eba0 0009 	sub.w	r0, r0, r9
 800a9ac:	1080      	asrs	r0, r0, #2
 800a9ae:	0146      	lsls	r6, r0, #5
 800a9b0:	6120      	str	r0, [r4, #16]
 800a9b2:	4618      	mov	r0, r3
 800a9b4:	f000 fb50 	bl	800b058 <__hi0bits>
 800a9b8:	1a30      	subs	r0, r6, r0
 800a9ba:	f8d8 6000 	ldr.w	r6, [r8]
 800a9be:	42b0      	cmp	r0, r6
 800a9c0:	dd63      	ble.n	800aa8a <__gethex+0x286>
 800a9c2:	1b87      	subs	r7, r0, r6
 800a9c4:	4639      	mov	r1, r7
 800a9c6:	4620      	mov	r0, r4
 800a9c8:	f000 fef4 	bl	800b7b4 <__any_on>
 800a9cc:	4682      	mov	sl, r0
 800a9ce:	b1a8      	cbz	r0, 800a9fc <__gethex+0x1f8>
 800a9d0:	1e7b      	subs	r3, r7, #1
 800a9d2:	1159      	asrs	r1, r3, #5
 800a9d4:	f003 021f 	and.w	r2, r3, #31
 800a9d8:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 800a9dc:	f04f 0a01 	mov.w	sl, #1
 800a9e0:	fa0a f202 	lsl.w	r2, sl, r2
 800a9e4:	420a      	tst	r2, r1
 800a9e6:	d009      	beq.n	800a9fc <__gethex+0x1f8>
 800a9e8:	4553      	cmp	r3, sl
 800a9ea:	dd05      	ble.n	800a9f8 <__gethex+0x1f4>
 800a9ec:	1eb9      	subs	r1, r7, #2
 800a9ee:	4620      	mov	r0, r4
 800a9f0:	f000 fee0 	bl	800b7b4 <__any_on>
 800a9f4:	2800      	cmp	r0, #0
 800a9f6:	d145      	bne.n	800aa84 <__gethex+0x280>
 800a9f8:	f04f 0a02 	mov.w	sl, #2
 800a9fc:	4639      	mov	r1, r7
 800a9fe:	4620      	mov	r0, r4
 800aa00:	f7ff fe99 	bl	800a736 <rshift>
 800aa04:	443d      	add	r5, r7
 800aa06:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800aa0a:	42ab      	cmp	r3, r5
 800aa0c:	da4c      	bge.n	800aaa8 <__gethex+0x2a4>
 800aa0e:	ee18 0a10 	vmov	r0, s16
 800aa12:	4621      	mov	r1, r4
 800aa14:	f000 fa6e 	bl	800aef4 <_Bfree>
 800aa18:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800aa1a:	2300      	movs	r3, #0
 800aa1c:	6013      	str	r3, [r2, #0]
 800aa1e:	27a3      	movs	r7, #163	; 0xa3
 800aa20:	e785      	b.n	800a92e <__gethex+0x12a>
 800aa22:	1e73      	subs	r3, r6, #1
 800aa24:	9a05      	ldr	r2, [sp, #20]
 800aa26:	9303      	str	r3, [sp, #12]
 800aa28:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800aa2c:	4293      	cmp	r3, r2
 800aa2e:	d019      	beq.n	800aa64 <__gethex+0x260>
 800aa30:	f1bb 0f20 	cmp.w	fp, #32
 800aa34:	d107      	bne.n	800aa46 <__gethex+0x242>
 800aa36:	9b02      	ldr	r3, [sp, #8]
 800aa38:	9a00      	ldr	r2, [sp, #0]
 800aa3a:	f843 2b04 	str.w	r2, [r3], #4
 800aa3e:	9302      	str	r3, [sp, #8]
 800aa40:	2300      	movs	r3, #0
 800aa42:	9300      	str	r3, [sp, #0]
 800aa44:	469b      	mov	fp, r3
 800aa46:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 800aa4a:	f7ff fec6 	bl	800a7da <__hexdig_fun>
 800aa4e:	9b00      	ldr	r3, [sp, #0]
 800aa50:	f000 000f 	and.w	r0, r0, #15
 800aa54:	fa00 f00b 	lsl.w	r0, r0, fp
 800aa58:	4303      	orrs	r3, r0
 800aa5a:	9300      	str	r3, [sp, #0]
 800aa5c:	f10b 0b04 	add.w	fp, fp, #4
 800aa60:	9b03      	ldr	r3, [sp, #12]
 800aa62:	e00d      	b.n	800aa80 <__gethex+0x27c>
 800aa64:	9b03      	ldr	r3, [sp, #12]
 800aa66:	9a06      	ldr	r2, [sp, #24]
 800aa68:	4413      	add	r3, r2
 800aa6a:	42bb      	cmp	r3, r7
 800aa6c:	d3e0      	bcc.n	800aa30 <__gethex+0x22c>
 800aa6e:	4618      	mov	r0, r3
 800aa70:	9901      	ldr	r1, [sp, #4]
 800aa72:	9307      	str	r3, [sp, #28]
 800aa74:	4652      	mov	r2, sl
 800aa76:	f001 fac6 	bl	800c006 <strncmp>
 800aa7a:	9b07      	ldr	r3, [sp, #28]
 800aa7c:	2800      	cmp	r0, #0
 800aa7e:	d1d7      	bne.n	800aa30 <__gethex+0x22c>
 800aa80:	461e      	mov	r6, r3
 800aa82:	e78b      	b.n	800a99c <__gethex+0x198>
 800aa84:	f04f 0a03 	mov.w	sl, #3
 800aa88:	e7b8      	b.n	800a9fc <__gethex+0x1f8>
 800aa8a:	da0a      	bge.n	800aaa2 <__gethex+0x29e>
 800aa8c:	1a37      	subs	r7, r6, r0
 800aa8e:	4621      	mov	r1, r4
 800aa90:	ee18 0a10 	vmov	r0, s16
 800aa94:	463a      	mov	r2, r7
 800aa96:	f000 fc49 	bl	800b32c <__lshift>
 800aa9a:	1bed      	subs	r5, r5, r7
 800aa9c:	4604      	mov	r4, r0
 800aa9e:	f100 0914 	add.w	r9, r0, #20
 800aaa2:	f04f 0a00 	mov.w	sl, #0
 800aaa6:	e7ae      	b.n	800aa06 <__gethex+0x202>
 800aaa8:	f8d8 0004 	ldr.w	r0, [r8, #4]
 800aaac:	42a8      	cmp	r0, r5
 800aaae:	dd72      	ble.n	800ab96 <__gethex+0x392>
 800aab0:	1b45      	subs	r5, r0, r5
 800aab2:	42ae      	cmp	r6, r5
 800aab4:	dc36      	bgt.n	800ab24 <__gethex+0x320>
 800aab6:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800aaba:	2b02      	cmp	r3, #2
 800aabc:	d02a      	beq.n	800ab14 <__gethex+0x310>
 800aabe:	2b03      	cmp	r3, #3
 800aac0:	d02c      	beq.n	800ab1c <__gethex+0x318>
 800aac2:	2b01      	cmp	r3, #1
 800aac4:	d11c      	bne.n	800ab00 <__gethex+0x2fc>
 800aac6:	42ae      	cmp	r6, r5
 800aac8:	d11a      	bne.n	800ab00 <__gethex+0x2fc>
 800aaca:	2e01      	cmp	r6, #1
 800aacc:	d112      	bne.n	800aaf4 <__gethex+0x2f0>
 800aace:	9a04      	ldr	r2, [sp, #16]
 800aad0:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800aad4:	6013      	str	r3, [r2, #0]
 800aad6:	2301      	movs	r3, #1
 800aad8:	6123      	str	r3, [r4, #16]
 800aada:	f8c9 3000 	str.w	r3, [r9]
 800aade:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800aae0:	2762      	movs	r7, #98	; 0x62
 800aae2:	601c      	str	r4, [r3, #0]
 800aae4:	e723      	b.n	800a92e <__gethex+0x12a>
 800aae6:	bf00      	nop
 800aae8:	0800c9fc 	.word	0x0800c9fc
 800aaec:	0800c920 	.word	0x0800c920
 800aaf0:	0800c994 	.word	0x0800c994
 800aaf4:	1e71      	subs	r1, r6, #1
 800aaf6:	4620      	mov	r0, r4
 800aaf8:	f000 fe5c 	bl	800b7b4 <__any_on>
 800aafc:	2800      	cmp	r0, #0
 800aafe:	d1e6      	bne.n	800aace <__gethex+0x2ca>
 800ab00:	ee18 0a10 	vmov	r0, s16
 800ab04:	4621      	mov	r1, r4
 800ab06:	f000 f9f5 	bl	800aef4 <_Bfree>
 800ab0a:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800ab0c:	2300      	movs	r3, #0
 800ab0e:	6013      	str	r3, [r2, #0]
 800ab10:	2750      	movs	r7, #80	; 0x50
 800ab12:	e70c      	b.n	800a92e <__gethex+0x12a>
 800ab14:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800ab16:	2b00      	cmp	r3, #0
 800ab18:	d1f2      	bne.n	800ab00 <__gethex+0x2fc>
 800ab1a:	e7d8      	b.n	800aace <__gethex+0x2ca>
 800ab1c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800ab1e:	2b00      	cmp	r3, #0
 800ab20:	d1d5      	bne.n	800aace <__gethex+0x2ca>
 800ab22:	e7ed      	b.n	800ab00 <__gethex+0x2fc>
 800ab24:	1e6f      	subs	r7, r5, #1
 800ab26:	f1ba 0f00 	cmp.w	sl, #0
 800ab2a:	d131      	bne.n	800ab90 <__gethex+0x38c>
 800ab2c:	b127      	cbz	r7, 800ab38 <__gethex+0x334>
 800ab2e:	4639      	mov	r1, r7
 800ab30:	4620      	mov	r0, r4
 800ab32:	f000 fe3f 	bl	800b7b4 <__any_on>
 800ab36:	4682      	mov	sl, r0
 800ab38:	117b      	asrs	r3, r7, #5
 800ab3a:	2101      	movs	r1, #1
 800ab3c:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 800ab40:	f007 071f 	and.w	r7, r7, #31
 800ab44:	fa01 f707 	lsl.w	r7, r1, r7
 800ab48:	421f      	tst	r7, r3
 800ab4a:	4629      	mov	r1, r5
 800ab4c:	4620      	mov	r0, r4
 800ab4e:	bf18      	it	ne
 800ab50:	f04a 0a02 	orrne.w	sl, sl, #2
 800ab54:	1b76      	subs	r6, r6, r5
 800ab56:	f7ff fdee 	bl	800a736 <rshift>
 800ab5a:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800ab5e:	2702      	movs	r7, #2
 800ab60:	f1ba 0f00 	cmp.w	sl, #0
 800ab64:	d048      	beq.n	800abf8 <__gethex+0x3f4>
 800ab66:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800ab6a:	2b02      	cmp	r3, #2
 800ab6c:	d015      	beq.n	800ab9a <__gethex+0x396>
 800ab6e:	2b03      	cmp	r3, #3
 800ab70:	d017      	beq.n	800aba2 <__gethex+0x39e>
 800ab72:	2b01      	cmp	r3, #1
 800ab74:	d109      	bne.n	800ab8a <__gethex+0x386>
 800ab76:	f01a 0f02 	tst.w	sl, #2
 800ab7a:	d006      	beq.n	800ab8a <__gethex+0x386>
 800ab7c:	f8d9 0000 	ldr.w	r0, [r9]
 800ab80:	ea4a 0a00 	orr.w	sl, sl, r0
 800ab84:	f01a 0f01 	tst.w	sl, #1
 800ab88:	d10e      	bne.n	800aba8 <__gethex+0x3a4>
 800ab8a:	f047 0710 	orr.w	r7, r7, #16
 800ab8e:	e033      	b.n	800abf8 <__gethex+0x3f4>
 800ab90:	f04f 0a01 	mov.w	sl, #1
 800ab94:	e7d0      	b.n	800ab38 <__gethex+0x334>
 800ab96:	2701      	movs	r7, #1
 800ab98:	e7e2      	b.n	800ab60 <__gethex+0x35c>
 800ab9a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800ab9c:	f1c3 0301 	rsb	r3, r3, #1
 800aba0:	9315      	str	r3, [sp, #84]	; 0x54
 800aba2:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800aba4:	2b00      	cmp	r3, #0
 800aba6:	d0f0      	beq.n	800ab8a <__gethex+0x386>
 800aba8:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800abac:	f104 0314 	add.w	r3, r4, #20
 800abb0:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800abb4:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800abb8:	f04f 0c00 	mov.w	ip, #0
 800abbc:	4618      	mov	r0, r3
 800abbe:	f853 2b04 	ldr.w	r2, [r3], #4
 800abc2:	f1b2 3fff 	cmp.w	r2, #4294967295
 800abc6:	d01c      	beq.n	800ac02 <__gethex+0x3fe>
 800abc8:	3201      	adds	r2, #1
 800abca:	6002      	str	r2, [r0, #0]
 800abcc:	2f02      	cmp	r7, #2
 800abce:	f104 0314 	add.w	r3, r4, #20
 800abd2:	d13f      	bne.n	800ac54 <__gethex+0x450>
 800abd4:	f8d8 2000 	ldr.w	r2, [r8]
 800abd8:	3a01      	subs	r2, #1
 800abda:	42b2      	cmp	r2, r6
 800abdc:	d10a      	bne.n	800abf4 <__gethex+0x3f0>
 800abde:	1171      	asrs	r1, r6, #5
 800abe0:	2201      	movs	r2, #1
 800abe2:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800abe6:	f006 061f 	and.w	r6, r6, #31
 800abea:	fa02 f606 	lsl.w	r6, r2, r6
 800abee:	421e      	tst	r6, r3
 800abf0:	bf18      	it	ne
 800abf2:	4617      	movne	r7, r2
 800abf4:	f047 0720 	orr.w	r7, r7, #32
 800abf8:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800abfa:	601c      	str	r4, [r3, #0]
 800abfc:	9b04      	ldr	r3, [sp, #16]
 800abfe:	601d      	str	r5, [r3, #0]
 800ac00:	e695      	b.n	800a92e <__gethex+0x12a>
 800ac02:	4299      	cmp	r1, r3
 800ac04:	f843 cc04 	str.w	ip, [r3, #-4]
 800ac08:	d8d8      	bhi.n	800abbc <__gethex+0x3b8>
 800ac0a:	68a3      	ldr	r3, [r4, #8]
 800ac0c:	459b      	cmp	fp, r3
 800ac0e:	db19      	blt.n	800ac44 <__gethex+0x440>
 800ac10:	6861      	ldr	r1, [r4, #4]
 800ac12:	ee18 0a10 	vmov	r0, s16
 800ac16:	3101      	adds	r1, #1
 800ac18:	f000 f92c 	bl	800ae74 <_Balloc>
 800ac1c:	4681      	mov	r9, r0
 800ac1e:	b918      	cbnz	r0, 800ac28 <__gethex+0x424>
 800ac20:	4b1a      	ldr	r3, [pc, #104]	; (800ac8c <__gethex+0x488>)
 800ac22:	4602      	mov	r2, r0
 800ac24:	2184      	movs	r1, #132	; 0x84
 800ac26:	e6a8      	b.n	800a97a <__gethex+0x176>
 800ac28:	6922      	ldr	r2, [r4, #16]
 800ac2a:	3202      	adds	r2, #2
 800ac2c:	f104 010c 	add.w	r1, r4, #12
 800ac30:	0092      	lsls	r2, r2, #2
 800ac32:	300c      	adds	r0, #12
 800ac34:	f000 f910 	bl	800ae58 <memcpy>
 800ac38:	4621      	mov	r1, r4
 800ac3a:	ee18 0a10 	vmov	r0, s16
 800ac3e:	f000 f959 	bl	800aef4 <_Bfree>
 800ac42:	464c      	mov	r4, r9
 800ac44:	6923      	ldr	r3, [r4, #16]
 800ac46:	1c5a      	adds	r2, r3, #1
 800ac48:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800ac4c:	6122      	str	r2, [r4, #16]
 800ac4e:	2201      	movs	r2, #1
 800ac50:	615a      	str	r2, [r3, #20]
 800ac52:	e7bb      	b.n	800abcc <__gethex+0x3c8>
 800ac54:	6922      	ldr	r2, [r4, #16]
 800ac56:	455a      	cmp	r2, fp
 800ac58:	dd0b      	ble.n	800ac72 <__gethex+0x46e>
 800ac5a:	2101      	movs	r1, #1
 800ac5c:	4620      	mov	r0, r4
 800ac5e:	f7ff fd6a 	bl	800a736 <rshift>
 800ac62:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800ac66:	3501      	adds	r5, #1
 800ac68:	42ab      	cmp	r3, r5
 800ac6a:	f6ff aed0 	blt.w	800aa0e <__gethex+0x20a>
 800ac6e:	2701      	movs	r7, #1
 800ac70:	e7c0      	b.n	800abf4 <__gethex+0x3f0>
 800ac72:	f016 061f 	ands.w	r6, r6, #31
 800ac76:	d0fa      	beq.n	800ac6e <__gethex+0x46a>
 800ac78:	4453      	add	r3, sl
 800ac7a:	f1c6 0620 	rsb	r6, r6, #32
 800ac7e:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800ac82:	f000 f9e9 	bl	800b058 <__hi0bits>
 800ac86:	42b0      	cmp	r0, r6
 800ac88:	dbe7      	blt.n	800ac5a <__gethex+0x456>
 800ac8a:	e7f0      	b.n	800ac6e <__gethex+0x46a>
 800ac8c:	0800c920 	.word	0x0800c920

0800ac90 <L_shift>:
 800ac90:	f1c2 0208 	rsb	r2, r2, #8
 800ac94:	0092      	lsls	r2, r2, #2
 800ac96:	b570      	push	{r4, r5, r6, lr}
 800ac98:	f1c2 0620 	rsb	r6, r2, #32
 800ac9c:	6843      	ldr	r3, [r0, #4]
 800ac9e:	6804      	ldr	r4, [r0, #0]
 800aca0:	fa03 f506 	lsl.w	r5, r3, r6
 800aca4:	432c      	orrs	r4, r5
 800aca6:	40d3      	lsrs	r3, r2
 800aca8:	6004      	str	r4, [r0, #0]
 800acaa:	f840 3f04 	str.w	r3, [r0, #4]!
 800acae:	4288      	cmp	r0, r1
 800acb0:	d3f4      	bcc.n	800ac9c <L_shift+0xc>
 800acb2:	bd70      	pop	{r4, r5, r6, pc}

0800acb4 <__match>:
 800acb4:	b530      	push	{r4, r5, lr}
 800acb6:	6803      	ldr	r3, [r0, #0]
 800acb8:	3301      	adds	r3, #1
 800acba:	f811 4b01 	ldrb.w	r4, [r1], #1
 800acbe:	b914      	cbnz	r4, 800acc6 <__match+0x12>
 800acc0:	6003      	str	r3, [r0, #0]
 800acc2:	2001      	movs	r0, #1
 800acc4:	bd30      	pop	{r4, r5, pc}
 800acc6:	f813 2b01 	ldrb.w	r2, [r3], #1
 800acca:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800acce:	2d19      	cmp	r5, #25
 800acd0:	bf98      	it	ls
 800acd2:	3220      	addls	r2, #32
 800acd4:	42a2      	cmp	r2, r4
 800acd6:	d0f0      	beq.n	800acba <__match+0x6>
 800acd8:	2000      	movs	r0, #0
 800acda:	e7f3      	b.n	800acc4 <__match+0x10>

0800acdc <__hexnan>:
 800acdc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ace0:	680b      	ldr	r3, [r1, #0]
 800ace2:	115e      	asrs	r6, r3, #5
 800ace4:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800ace8:	f013 031f 	ands.w	r3, r3, #31
 800acec:	b087      	sub	sp, #28
 800acee:	bf18      	it	ne
 800acf0:	3604      	addne	r6, #4
 800acf2:	2500      	movs	r5, #0
 800acf4:	1f37      	subs	r7, r6, #4
 800acf6:	4690      	mov	r8, r2
 800acf8:	6802      	ldr	r2, [r0, #0]
 800acfa:	9301      	str	r3, [sp, #4]
 800acfc:	4682      	mov	sl, r0
 800acfe:	f846 5c04 	str.w	r5, [r6, #-4]
 800ad02:	46b9      	mov	r9, r7
 800ad04:	463c      	mov	r4, r7
 800ad06:	9502      	str	r5, [sp, #8]
 800ad08:	46ab      	mov	fp, r5
 800ad0a:	7851      	ldrb	r1, [r2, #1]
 800ad0c:	1c53      	adds	r3, r2, #1
 800ad0e:	9303      	str	r3, [sp, #12]
 800ad10:	b341      	cbz	r1, 800ad64 <__hexnan+0x88>
 800ad12:	4608      	mov	r0, r1
 800ad14:	9205      	str	r2, [sp, #20]
 800ad16:	9104      	str	r1, [sp, #16]
 800ad18:	f7ff fd5f 	bl	800a7da <__hexdig_fun>
 800ad1c:	2800      	cmp	r0, #0
 800ad1e:	d14f      	bne.n	800adc0 <__hexnan+0xe4>
 800ad20:	9904      	ldr	r1, [sp, #16]
 800ad22:	9a05      	ldr	r2, [sp, #20]
 800ad24:	2920      	cmp	r1, #32
 800ad26:	d818      	bhi.n	800ad5a <__hexnan+0x7e>
 800ad28:	9b02      	ldr	r3, [sp, #8]
 800ad2a:	459b      	cmp	fp, r3
 800ad2c:	dd13      	ble.n	800ad56 <__hexnan+0x7a>
 800ad2e:	454c      	cmp	r4, r9
 800ad30:	d206      	bcs.n	800ad40 <__hexnan+0x64>
 800ad32:	2d07      	cmp	r5, #7
 800ad34:	dc04      	bgt.n	800ad40 <__hexnan+0x64>
 800ad36:	462a      	mov	r2, r5
 800ad38:	4649      	mov	r1, r9
 800ad3a:	4620      	mov	r0, r4
 800ad3c:	f7ff ffa8 	bl	800ac90 <L_shift>
 800ad40:	4544      	cmp	r4, r8
 800ad42:	d950      	bls.n	800ade6 <__hexnan+0x10a>
 800ad44:	2300      	movs	r3, #0
 800ad46:	f1a4 0904 	sub.w	r9, r4, #4
 800ad4a:	f844 3c04 	str.w	r3, [r4, #-4]
 800ad4e:	f8cd b008 	str.w	fp, [sp, #8]
 800ad52:	464c      	mov	r4, r9
 800ad54:	461d      	mov	r5, r3
 800ad56:	9a03      	ldr	r2, [sp, #12]
 800ad58:	e7d7      	b.n	800ad0a <__hexnan+0x2e>
 800ad5a:	2929      	cmp	r1, #41	; 0x29
 800ad5c:	d156      	bne.n	800ae0c <__hexnan+0x130>
 800ad5e:	3202      	adds	r2, #2
 800ad60:	f8ca 2000 	str.w	r2, [sl]
 800ad64:	f1bb 0f00 	cmp.w	fp, #0
 800ad68:	d050      	beq.n	800ae0c <__hexnan+0x130>
 800ad6a:	454c      	cmp	r4, r9
 800ad6c:	d206      	bcs.n	800ad7c <__hexnan+0xa0>
 800ad6e:	2d07      	cmp	r5, #7
 800ad70:	dc04      	bgt.n	800ad7c <__hexnan+0xa0>
 800ad72:	462a      	mov	r2, r5
 800ad74:	4649      	mov	r1, r9
 800ad76:	4620      	mov	r0, r4
 800ad78:	f7ff ff8a 	bl	800ac90 <L_shift>
 800ad7c:	4544      	cmp	r4, r8
 800ad7e:	d934      	bls.n	800adea <__hexnan+0x10e>
 800ad80:	f1a8 0204 	sub.w	r2, r8, #4
 800ad84:	4623      	mov	r3, r4
 800ad86:	f853 1b04 	ldr.w	r1, [r3], #4
 800ad8a:	f842 1f04 	str.w	r1, [r2, #4]!
 800ad8e:	429f      	cmp	r7, r3
 800ad90:	d2f9      	bcs.n	800ad86 <__hexnan+0xaa>
 800ad92:	1b3b      	subs	r3, r7, r4
 800ad94:	f023 0303 	bic.w	r3, r3, #3
 800ad98:	3304      	adds	r3, #4
 800ad9a:	3401      	adds	r4, #1
 800ad9c:	3e03      	subs	r6, #3
 800ad9e:	42b4      	cmp	r4, r6
 800ada0:	bf88      	it	hi
 800ada2:	2304      	movhi	r3, #4
 800ada4:	4443      	add	r3, r8
 800ada6:	2200      	movs	r2, #0
 800ada8:	f843 2b04 	str.w	r2, [r3], #4
 800adac:	429f      	cmp	r7, r3
 800adae:	d2fb      	bcs.n	800ada8 <__hexnan+0xcc>
 800adb0:	683b      	ldr	r3, [r7, #0]
 800adb2:	b91b      	cbnz	r3, 800adbc <__hexnan+0xe0>
 800adb4:	4547      	cmp	r7, r8
 800adb6:	d127      	bne.n	800ae08 <__hexnan+0x12c>
 800adb8:	2301      	movs	r3, #1
 800adba:	603b      	str	r3, [r7, #0]
 800adbc:	2005      	movs	r0, #5
 800adbe:	e026      	b.n	800ae0e <__hexnan+0x132>
 800adc0:	3501      	adds	r5, #1
 800adc2:	2d08      	cmp	r5, #8
 800adc4:	f10b 0b01 	add.w	fp, fp, #1
 800adc8:	dd06      	ble.n	800add8 <__hexnan+0xfc>
 800adca:	4544      	cmp	r4, r8
 800adcc:	d9c3      	bls.n	800ad56 <__hexnan+0x7a>
 800adce:	2300      	movs	r3, #0
 800add0:	f844 3c04 	str.w	r3, [r4, #-4]
 800add4:	2501      	movs	r5, #1
 800add6:	3c04      	subs	r4, #4
 800add8:	6822      	ldr	r2, [r4, #0]
 800adda:	f000 000f 	and.w	r0, r0, #15
 800adde:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 800ade2:	6022      	str	r2, [r4, #0]
 800ade4:	e7b7      	b.n	800ad56 <__hexnan+0x7a>
 800ade6:	2508      	movs	r5, #8
 800ade8:	e7b5      	b.n	800ad56 <__hexnan+0x7a>
 800adea:	9b01      	ldr	r3, [sp, #4]
 800adec:	2b00      	cmp	r3, #0
 800adee:	d0df      	beq.n	800adb0 <__hexnan+0xd4>
 800adf0:	f04f 32ff 	mov.w	r2, #4294967295
 800adf4:	f1c3 0320 	rsb	r3, r3, #32
 800adf8:	fa22 f303 	lsr.w	r3, r2, r3
 800adfc:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800ae00:	401a      	ands	r2, r3
 800ae02:	f846 2c04 	str.w	r2, [r6, #-4]
 800ae06:	e7d3      	b.n	800adb0 <__hexnan+0xd4>
 800ae08:	3f04      	subs	r7, #4
 800ae0a:	e7d1      	b.n	800adb0 <__hexnan+0xd4>
 800ae0c:	2004      	movs	r0, #4
 800ae0e:	b007      	add	sp, #28
 800ae10:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800ae14 <_localeconv_r>:
 800ae14:	4800      	ldr	r0, [pc, #0]	; (800ae18 <_localeconv_r+0x4>)
 800ae16:	4770      	bx	lr
 800ae18:	2000016c 	.word	0x2000016c

0800ae1c <__retarget_lock_init_recursive>:
 800ae1c:	4770      	bx	lr

0800ae1e <__retarget_lock_acquire_recursive>:
 800ae1e:	4770      	bx	lr

0800ae20 <__retarget_lock_release_recursive>:
 800ae20:	4770      	bx	lr
	...

0800ae24 <malloc>:
 800ae24:	4b02      	ldr	r3, [pc, #8]	; (800ae30 <malloc+0xc>)
 800ae26:	4601      	mov	r1, r0
 800ae28:	6818      	ldr	r0, [r3, #0]
 800ae2a:	f000 bd67 	b.w	800b8fc <_malloc_r>
 800ae2e:	bf00      	nop
 800ae30:	20000014 	.word	0x20000014

0800ae34 <__ascii_mbtowc>:
 800ae34:	b082      	sub	sp, #8
 800ae36:	b901      	cbnz	r1, 800ae3a <__ascii_mbtowc+0x6>
 800ae38:	a901      	add	r1, sp, #4
 800ae3a:	b142      	cbz	r2, 800ae4e <__ascii_mbtowc+0x1a>
 800ae3c:	b14b      	cbz	r3, 800ae52 <__ascii_mbtowc+0x1e>
 800ae3e:	7813      	ldrb	r3, [r2, #0]
 800ae40:	600b      	str	r3, [r1, #0]
 800ae42:	7812      	ldrb	r2, [r2, #0]
 800ae44:	1e10      	subs	r0, r2, #0
 800ae46:	bf18      	it	ne
 800ae48:	2001      	movne	r0, #1
 800ae4a:	b002      	add	sp, #8
 800ae4c:	4770      	bx	lr
 800ae4e:	4610      	mov	r0, r2
 800ae50:	e7fb      	b.n	800ae4a <__ascii_mbtowc+0x16>
 800ae52:	f06f 0001 	mvn.w	r0, #1
 800ae56:	e7f8      	b.n	800ae4a <__ascii_mbtowc+0x16>

0800ae58 <memcpy>:
 800ae58:	440a      	add	r2, r1
 800ae5a:	4291      	cmp	r1, r2
 800ae5c:	f100 33ff 	add.w	r3, r0, #4294967295
 800ae60:	d100      	bne.n	800ae64 <memcpy+0xc>
 800ae62:	4770      	bx	lr
 800ae64:	b510      	push	{r4, lr}
 800ae66:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ae6a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800ae6e:	4291      	cmp	r1, r2
 800ae70:	d1f9      	bne.n	800ae66 <memcpy+0xe>
 800ae72:	bd10      	pop	{r4, pc}

0800ae74 <_Balloc>:
 800ae74:	b570      	push	{r4, r5, r6, lr}
 800ae76:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800ae78:	4604      	mov	r4, r0
 800ae7a:	460d      	mov	r5, r1
 800ae7c:	b976      	cbnz	r6, 800ae9c <_Balloc+0x28>
 800ae7e:	2010      	movs	r0, #16
 800ae80:	f7ff ffd0 	bl	800ae24 <malloc>
 800ae84:	4602      	mov	r2, r0
 800ae86:	6260      	str	r0, [r4, #36]	; 0x24
 800ae88:	b920      	cbnz	r0, 800ae94 <_Balloc+0x20>
 800ae8a:	4b18      	ldr	r3, [pc, #96]	; (800aeec <_Balloc+0x78>)
 800ae8c:	4818      	ldr	r0, [pc, #96]	; (800aef0 <_Balloc+0x7c>)
 800ae8e:	2166      	movs	r1, #102	; 0x66
 800ae90:	f001 f9ae 	bl	800c1f0 <__assert_func>
 800ae94:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800ae98:	6006      	str	r6, [r0, #0]
 800ae9a:	60c6      	str	r6, [r0, #12]
 800ae9c:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800ae9e:	68f3      	ldr	r3, [r6, #12]
 800aea0:	b183      	cbz	r3, 800aec4 <_Balloc+0x50>
 800aea2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800aea4:	68db      	ldr	r3, [r3, #12]
 800aea6:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800aeaa:	b9b8      	cbnz	r0, 800aedc <_Balloc+0x68>
 800aeac:	2101      	movs	r1, #1
 800aeae:	fa01 f605 	lsl.w	r6, r1, r5
 800aeb2:	1d72      	adds	r2, r6, #5
 800aeb4:	0092      	lsls	r2, r2, #2
 800aeb6:	4620      	mov	r0, r4
 800aeb8:	f000 fc9d 	bl	800b7f6 <_calloc_r>
 800aebc:	b160      	cbz	r0, 800aed8 <_Balloc+0x64>
 800aebe:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800aec2:	e00e      	b.n	800aee2 <_Balloc+0x6e>
 800aec4:	2221      	movs	r2, #33	; 0x21
 800aec6:	2104      	movs	r1, #4
 800aec8:	4620      	mov	r0, r4
 800aeca:	f000 fc94 	bl	800b7f6 <_calloc_r>
 800aece:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800aed0:	60f0      	str	r0, [r6, #12]
 800aed2:	68db      	ldr	r3, [r3, #12]
 800aed4:	2b00      	cmp	r3, #0
 800aed6:	d1e4      	bne.n	800aea2 <_Balloc+0x2e>
 800aed8:	2000      	movs	r0, #0
 800aeda:	bd70      	pop	{r4, r5, r6, pc}
 800aedc:	6802      	ldr	r2, [r0, #0]
 800aede:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800aee2:	2300      	movs	r3, #0
 800aee4:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800aee8:	e7f7      	b.n	800aeda <_Balloc+0x66>
 800aeea:	bf00      	nop
 800aeec:	0800c8ae 	.word	0x0800c8ae
 800aef0:	0800ca10 	.word	0x0800ca10

0800aef4 <_Bfree>:
 800aef4:	b570      	push	{r4, r5, r6, lr}
 800aef6:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800aef8:	4605      	mov	r5, r0
 800aefa:	460c      	mov	r4, r1
 800aefc:	b976      	cbnz	r6, 800af1c <_Bfree+0x28>
 800aefe:	2010      	movs	r0, #16
 800af00:	f7ff ff90 	bl	800ae24 <malloc>
 800af04:	4602      	mov	r2, r0
 800af06:	6268      	str	r0, [r5, #36]	; 0x24
 800af08:	b920      	cbnz	r0, 800af14 <_Bfree+0x20>
 800af0a:	4b09      	ldr	r3, [pc, #36]	; (800af30 <_Bfree+0x3c>)
 800af0c:	4809      	ldr	r0, [pc, #36]	; (800af34 <_Bfree+0x40>)
 800af0e:	218a      	movs	r1, #138	; 0x8a
 800af10:	f001 f96e 	bl	800c1f0 <__assert_func>
 800af14:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800af18:	6006      	str	r6, [r0, #0]
 800af1a:	60c6      	str	r6, [r0, #12]
 800af1c:	b13c      	cbz	r4, 800af2e <_Bfree+0x3a>
 800af1e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800af20:	6862      	ldr	r2, [r4, #4]
 800af22:	68db      	ldr	r3, [r3, #12]
 800af24:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800af28:	6021      	str	r1, [r4, #0]
 800af2a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800af2e:	bd70      	pop	{r4, r5, r6, pc}
 800af30:	0800c8ae 	.word	0x0800c8ae
 800af34:	0800ca10 	.word	0x0800ca10

0800af38 <__multadd>:
 800af38:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800af3c:	690d      	ldr	r5, [r1, #16]
 800af3e:	4607      	mov	r7, r0
 800af40:	460c      	mov	r4, r1
 800af42:	461e      	mov	r6, r3
 800af44:	f101 0c14 	add.w	ip, r1, #20
 800af48:	2000      	movs	r0, #0
 800af4a:	f8dc 3000 	ldr.w	r3, [ip]
 800af4e:	b299      	uxth	r1, r3
 800af50:	fb02 6101 	mla	r1, r2, r1, r6
 800af54:	0c1e      	lsrs	r6, r3, #16
 800af56:	0c0b      	lsrs	r3, r1, #16
 800af58:	fb02 3306 	mla	r3, r2, r6, r3
 800af5c:	b289      	uxth	r1, r1
 800af5e:	3001      	adds	r0, #1
 800af60:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800af64:	4285      	cmp	r5, r0
 800af66:	f84c 1b04 	str.w	r1, [ip], #4
 800af6a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800af6e:	dcec      	bgt.n	800af4a <__multadd+0x12>
 800af70:	b30e      	cbz	r6, 800afb6 <__multadd+0x7e>
 800af72:	68a3      	ldr	r3, [r4, #8]
 800af74:	42ab      	cmp	r3, r5
 800af76:	dc19      	bgt.n	800afac <__multadd+0x74>
 800af78:	6861      	ldr	r1, [r4, #4]
 800af7a:	4638      	mov	r0, r7
 800af7c:	3101      	adds	r1, #1
 800af7e:	f7ff ff79 	bl	800ae74 <_Balloc>
 800af82:	4680      	mov	r8, r0
 800af84:	b928      	cbnz	r0, 800af92 <__multadd+0x5a>
 800af86:	4602      	mov	r2, r0
 800af88:	4b0c      	ldr	r3, [pc, #48]	; (800afbc <__multadd+0x84>)
 800af8a:	480d      	ldr	r0, [pc, #52]	; (800afc0 <__multadd+0x88>)
 800af8c:	21b5      	movs	r1, #181	; 0xb5
 800af8e:	f001 f92f 	bl	800c1f0 <__assert_func>
 800af92:	6922      	ldr	r2, [r4, #16]
 800af94:	3202      	adds	r2, #2
 800af96:	f104 010c 	add.w	r1, r4, #12
 800af9a:	0092      	lsls	r2, r2, #2
 800af9c:	300c      	adds	r0, #12
 800af9e:	f7ff ff5b 	bl	800ae58 <memcpy>
 800afa2:	4621      	mov	r1, r4
 800afa4:	4638      	mov	r0, r7
 800afa6:	f7ff ffa5 	bl	800aef4 <_Bfree>
 800afaa:	4644      	mov	r4, r8
 800afac:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800afb0:	3501      	adds	r5, #1
 800afb2:	615e      	str	r6, [r3, #20]
 800afb4:	6125      	str	r5, [r4, #16]
 800afb6:	4620      	mov	r0, r4
 800afb8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800afbc:	0800c920 	.word	0x0800c920
 800afc0:	0800ca10 	.word	0x0800ca10

0800afc4 <__s2b>:
 800afc4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800afc8:	460c      	mov	r4, r1
 800afca:	4615      	mov	r5, r2
 800afcc:	461f      	mov	r7, r3
 800afce:	2209      	movs	r2, #9
 800afd0:	3308      	adds	r3, #8
 800afd2:	4606      	mov	r6, r0
 800afd4:	fb93 f3f2 	sdiv	r3, r3, r2
 800afd8:	2100      	movs	r1, #0
 800afda:	2201      	movs	r2, #1
 800afdc:	429a      	cmp	r2, r3
 800afde:	db09      	blt.n	800aff4 <__s2b+0x30>
 800afe0:	4630      	mov	r0, r6
 800afe2:	f7ff ff47 	bl	800ae74 <_Balloc>
 800afe6:	b940      	cbnz	r0, 800affa <__s2b+0x36>
 800afe8:	4602      	mov	r2, r0
 800afea:	4b19      	ldr	r3, [pc, #100]	; (800b050 <__s2b+0x8c>)
 800afec:	4819      	ldr	r0, [pc, #100]	; (800b054 <__s2b+0x90>)
 800afee:	21ce      	movs	r1, #206	; 0xce
 800aff0:	f001 f8fe 	bl	800c1f0 <__assert_func>
 800aff4:	0052      	lsls	r2, r2, #1
 800aff6:	3101      	adds	r1, #1
 800aff8:	e7f0      	b.n	800afdc <__s2b+0x18>
 800affa:	9b08      	ldr	r3, [sp, #32]
 800affc:	6143      	str	r3, [r0, #20]
 800affe:	2d09      	cmp	r5, #9
 800b000:	f04f 0301 	mov.w	r3, #1
 800b004:	6103      	str	r3, [r0, #16]
 800b006:	dd16      	ble.n	800b036 <__s2b+0x72>
 800b008:	f104 0909 	add.w	r9, r4, #9
 800b00c:	46c8      	mov	r8, r9
 800b00e:	442c      	add	r4, r5
 800b010:	f818 3b01 	ldrb.w	r3, [r8], #1
 800b014:	4601      	mov	r1, r0
 800b016:	3b30      	subs	r3, #48	; 0x30
 800b018:	220a      	movs	r2, #10
 800b01a:	4630      	mov	r0, r6
 800b01c:	f7ff ff8c 	bl	800af38 <__multadd>
 800b020:	45a0      	cmp	r8, r4
 800b022:	d1f5      	bne.n	800b010 <__s2b+0x4c>
 800b024:	f1a5 0408 	sub.w	r4, r5, #8
 800b028:	444c      	add	r4, r9
 800b02a:	1b2d      	subs	r5, r5, r4
 800b02c:	1963      	adds	r3, r4, r5
 800b02e:	42bb      	cmp	r3, r7
 800b030:	db04      	blt.n	800b03c <__s2b+0x78>
 800b032:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b036:	340a      	adds	r4, #10
 800b038:	2509      	movs	r5, #9
 800b03a:	e7f6      	b.n	800b02a <__s2b+0x66>
 800b03c:	f814 3b01 	ldrb.w	r3, [r4], #1
 800b040:	4601      	mov	r1, r0
 800b042:	3b30      	subs	r3, #48	; 0x30
 800b044:	220a      	movs	r2, #10
 800b046:	4630      	mov	r0, r6
 800b048:	f7ff ff76 	bl	800af38 <__multadd>
 800b04c:	e7ee      	b.n	800b02c <__s2b+0x68>
 800b04e:	bf00      	nop
 800b050:	0800c920 	.word	0x0800c920
 800b054:	0800ca10 	.word	0x0800ca10

0800b058 <__hi0bits>:
 800b058:	0c03      	lsrs	r3, r0, #16
 800b05a:	041b      	lsls	r3, r3, #16
 800b05c:	b9d3      	cbnz	r3, 800b094 <__hi0bits+0x3c>
 800b05e:	0400      	lsls	r0, r0, #16
 800b060:	2310      	movs	r3, #16
 800b062:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800b066:	bf04      	itt	eq
 800b068:	0200      	lsleq	r0, r0, #8
 800b06a:	3308      	addeq	r3, #8
 800b06c:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800b070:	bf04      	itt	eq
 800b072:	0100      	lsleq	r0, r0, #4
 800b074:	3304      	addeq	r3, #4
 800b076:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800b07a:	bf04      	itt	eq
 800b07c:	0080      	lsleq	r0, r0, #2
 800b07e:	3302      	addeq	r3, #2
 800b080:	2800      	cmp	r0, #0
 800b082:	db05      	blt.n	800b090 <__hi0bits+0x38>
 800b084:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800b088:	f103 0301 	add.w	r3, r3, #1
 800b08c:	bf08      	it	eq
 800b08e:	2320      	moveq	r3, #32
 800b090:	4618      	mov	r0, r3
 800b092:	4770      	bx	lr
 800b094:	2300      	movs	r3, #0
 800b096:	e7e4      	b.n	800b062 <__hi0bits+0xa>

0800b098 <__lo0bits>:
 800b098:	6803      	ldr	r3, [r0, #0]
 800b09a:	f013 0207 	ands.w	r2, r3, #7
 800b09e:	4601      	mov	r1, r0
 800b0a0:	d00b      	beq.n	800b0ba <__lo0bits+0x22>
 800b0a2:	07da      	lsls	r2, r3, #31
 800b0a4:	d423      	bmi.n	800b0ee <__lo0bits+0x56>
 800b0a6:	0798      	lsls	r0, r3, #30
 800b0a8:	bf49      	itett	mi
 800b0aa:	085b      	lsrmi	r3, r3, #1
 800b0ac:	089b      	lsrpl	r3, r3, #2
 800b0ae:	2001      	movmi	r0, #1
 800b0b0:	600b      	strmi	r3, [r1, #0]
 800b0b2:	bf5c      	itt	pl
 800b0b4:	600b      	strpl	r3, [r1, #0]
 800b0b6:	2002      	movpl	r0, #2
 800b0b8:	4770      	bx	lr
 800b0ba:	b298      	uxth	r0, r3
 800b0bc:	b9a8      	cbnz	r0, 800b0ea <__lo0bits+0x52>
 800b0be:	0c1b      	lsrs	r3, r3, #16
 800b0c0:	2010      	movs	r0, #16
 800b0c2:	b2da      	uxtb	r2, r3
 800b0c4:	b90a      	cbnz	r2, 800b0ca <__lo0bits+0x32>
 800b0c6:	3008      	adds	r0, #8
 800b0c8:	0a1b      	lsrs	r3, r3, #8
 800b0ca:	071a      	lsls	r2, r3, #28
 800b0cc:	bf04      	itt	eq
 800b0ce:	091b      	lsreq	r3, r3, #4
 800b0d0:	3004      	addeq	r0, #4
 800b0d2:	079a      	lsls	r2, r3, #30
 800b0d4:	bf04      	itt	eq
 800b0d6:	089b      	lsreq	r3, r3, #2
 800b0d8:	3002      	addeq	r0, #2
 800b0da:	07da      	lsls	r2, r3, #31
 800b0dc:	d403      	bmi.n	800b0e6 <__lo0bits+0x4e>
 800b0de:	085b      	lsrs	r3, r3, #1
 800b0e0:	f100 0001 	add.w	r0, r0, #1
 800b0e4:	d005      	beq.n	800b0f2 <__lo0bits+0x5a>
 800b0e6:	600b      	str	r3, [r1, #0]
 800b0e8:	4770      	bx	lr
 800b0ea:	4610      	mov	r0, r2
 800b0ec:	e7e9      	b.n	800b0c2 <__lo0bits+0x2a>
 800b0ee:	2000      	movs	r0, #0
 800b0f0:	4770      	bx	lr
 800b0f2:	2020      	movs	r0, #32
 800b0f4:	4770      	bx	lr
	...

0800b0f8 <__i2b>:
 800b0f8:	b510      	push	{r4, lr}
 800b0fa:	460c      	mov	r4, r1
 800b0fc:	2101      	movs	r1, #1
 800b0fe:	f7ff feb9 	bl	800ae74 <_Balloc>
 800b102:	4602      	mov	r2, r0
 800b104:	b928      	cbnz	r0, 800b112 <__i2b+0x1a>
 800b106:	4b05      	ldr	r3, [pc, #20]	; (800b11c <__i2b+0x24>)
 800b108:	4805      	ldr	r0, [pc, #20]	; (800b120 <__i2b+0x28>)
 800b10a:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800b10e:	f001 f86f 	bl	800c1f0 <__assert_func>
 800b112:	2301      	movs	r3, #1
 800b114:	6144      	str	r4, [r0, #20]
 800b116:	6103      	str	r3, [r0, #16]
 800b118:	bd10      	pop	{r4, pc}
 800b11a:	bf00      	nop
 800b11c:	0800c920 	.word	0x0800c920
 800b120:	0800ca10 	.word	0x0800ca10

0800b124 <__multiply>:
 800b124:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b128:	4691      	mov	r9, r2
 800b12a:	690a      	ldr	r2, [r1, #16]
 800b12c:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800b130:	429a      	cmp	r2, r3
 800b132:	bfb8      	it	lt
 800b134:	460b      	movlt	r3, r1
 800b136:	460c      	mov	r4, r1
 800b138:	bfbc      	itt	lt
 800b13a:	464c      	movlt	r4, r9
 800b13c:	4699      	movlt	r9, r3
 800b13e:	6927      	ldr	r7, [r4, #16]
 800b140:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800b144:	68a3      	ldr	r3, [r4, #8]
 800b146:	6861      	ldr	r1, [r4, #4]
 800b148:	eb07 060a 	add.w	r6, r7, sl
 800b14c:	42b3      	cmp	r3, r6
 800b14e:	b085      	sub	sp, #20
 800b150:	bfb8      	it	lt
 800b152:	3101      	addlt	r1, #1
 800b154:	f7ff fe8e 	bl	800ae74 <_Balloc>
 800b158:	b930      	cbnz	r0, 800b168 <__multiply+0x44>
 800b15a:	4602      	mov	r2, r0
 800b15c:	4b44      	ldr	r3, [pc, #272]	; (800b270 <__multiply+0x14c>)
 800b15e:	4845      	ldr	r0, [pc, #276]	; (800b274 <__multiply+0x150>)
 800b160:	f240 115d 	movw	r1, #349	; 0x15d
 800b164:	f001 f844 	bl	800c1f0 <__assert_func>
 800b168:	f100 0514 	add.w	r5, r0, #20
 800b16c:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800b170:	462b      	mov	r3, r5
 800b172:	2200      	movs	r2, #0
 800b174:	4543      	cmp	r3, r8
 800b176:	d321      	bcc.n	800b1bc <__multiply+0x98>
 800b178:	f104 0314 	add.w	r3, r4, #20
 800b17c:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800b180:	f109 0314 	add.w	r3, r9, #20
 800b184:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800b188:	9202      	str	r2, [sp, #8]
 800b18a:	1b3a      	subs	r2, r7, r4
 800b18c:	3a15      	subs	r2, #21
 800b18e:	f022 0203 	bic.w	r2, r2, #3
 800b192:	3204      	adds	r2, #4
 800b194:	f104 0115 	add.w	r1, r4, #21
 800b198:	428f      	cmp	r7, r1
 800b19a:	bf38      	it	cc
 800b19c:	2204      	movcc	r2, #4
 800b19e:	9201      	str	r2, [sp, #4]
 800b1a0:	9a02      	ldr	r2, [sp, #8]
 800b1a2:	9303      	str	r3, [sp, #12]
 800b1a4:	429a      	cmp	r2, r3
 800b1a6:	d80c      	bhi.n	800b1c2 <__multiply+0x9e>
 800b1a8:	2e00      	cmp	r6, #0
 800b1aa:	dd03      	ble.n	800b1b4 <__multiply+0x90>
 800b1ac:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800b1b0:	2b00      	cmp	r3, #0
 800b1b2:	d05a      	beq.n	800b26a <__multiply+0x146>
 800b1b4:	6106      	str	r6, [r0, #16]
 800b1b6:	b005      	add	sp, #20
 800b1b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b1bc:	f843 2b04 	str.w	r2, [r3], #4
 800b1c0:	e7d8      	b.n	800b174 <__multiply+0x50>
 800b1c2:	f8b3 a000 	ldrh.w	sl, [r3]
 800b1c6:	f1ba 0f00 	cmp.w	sl, #0
 800b1ca:	d024      	beq.n	800b216 <__multiply+0xf2>
 800b1cc:	f104 0e14 	add.w	lr, r4, #20
 800b1d0:	46a9      	mov	r9, r5
 800b1d2:	f04f 0c00 	mov.w	ip, #0
 800b1d6:	f85e 2b04 	ldr.w	r2, [lr], #4
 800b1da:	f8d9 1000 	ldr.w	r1, [r9]
 800b1de:	fa1f fb82 	uxth.w	fp, r2
 800b1e2:	b289      	uxth	r1, r1
 800b1e4:	fb0a 110b 	mla	r1, sl, fp, r1
 800b1e8:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800b1ec:	f8d9 2000 	ldr.w	r2, [r9]
 800b1f0:	4461      	add	r1, ip
 800b1f2:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800b1f6:	fb0a c20b 	mla	r2, sl, fp, ip
 800b1fa:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800b1fe:	b289      	uxth	r1, r1
 800b200:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800b204:	4577      	cmp	r7, lr
 800b206:	f849 1b04 	str.w	r1, [r9], #4
 800b20a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800b20e:	d8e2      	bhi.n	800b1d6 <__multiply+0xb2>
 800b210:	9a01      	ldr	r2, [sp, #4]
 800b212:	f845 c002 	str.w	ip, [r5, r2]
 800b216:	9a03      	ldr	r2, [sp, #12]
 800b218:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800b21c:	3304      	adds	r3, #4
 800b21e:	f1b9 0f00 	cmp.w	r9, #0
 800b222:	d020      	beq.n	800b266 <__multiply+0x142>
 800b224:	6829      	ldr	r1, [r5, #0]
 800b226:	f104 0c14 	add.w	ip, r4, #20
 800b22a:	46ae      	mov	lr, r5
 800b22c:	f04f 0a00 	mov.w	sl, #0
 800b230:	f8bc b000 	ldrh.w	fp, [ip]
 800b234:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800b238:	fb09 220b 	mla	r2, r9, fp, r2
 800b23c:	4492      	add	sl, r2
 800b23e:	b289      	uxth	r1, r1
 800b240:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800b244:	f84e 1b04 	str.w	r1, [lr], #4
 800b248:	f85c 2b04 	ldr.w	r2, [ip], #4
 800b24c:	f8be 1000 	ldrh.w	r1, [lr]
 800b250:	0c12      	lsrs	r2, r2, #16
 800b252:	fb09 1102 	mla	r1, r9, r2, r1
 800b256:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800b25a:	4567      	cmp	r7, ip
 800b25c:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800b260:	d8e6      	bhi.n	800b230 <__multiply+0x10c>
 800b262:	9a01      	ldr	r2, [sp, #4]
 800b264:	50a9      	str	r1, [r5, r2]
 800b266:	3504      	adds	r5, #4
 800b268:	e79a      	b.n	800b1a0 <__multiply+0x7c>
 800b26a:	3e01      	subs	r6, #1
 800b26c:	e79c      	b.n	800b1a8 <__multiply+0x84>
 800b26e:	bf00      	nop
 800b270:	0800c920 	.word	0x0800c920
 800b274:	0800ca10 	.word	0x0800ca10

0800b278 <__pow5mult>:
 800b278:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b27c:	4615      	mov	r5, r2
 800b27e:	f012 0203 	ands.w	r2, r2, #3
 800b282:	4606      	mov	r6, r0
 800b284:	460f      	mov	r7, r1
 800b286:	d007      	beq.n	800b298 <__pow5mult+0x20>
 800b288:	4c25      	ldr	r4, [pc, #148]	; (800b320 <__pow5mult+0xa8>)
 800b28a:	3a01      	subs	r2, #1
 800b28c:	2300      	movs	r3, #0
 800b28e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800b292:	f7ff fe51 	bl	800af38 <__multadd>
 800b296:	4607      	mov	r7, r0
 800b298:	10ad      	asrs	r5, r5, #2
 800b29a:	d03d      	beq.n	800b318 <__pow5mult+0xa0>
 800b29c:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800b29e:	b97c      	cbnz	r4, 800b2c0 <__pow5mult+0x48>
 800b2a0:	2010      	movs	r0, #16
 800b2a2:	f7ff fdbf 	bl	800ae24 <malloc>
 800b2a6:	4602      	mov	r2, r0
 800b2a8:	6270      	str	r0, [r6, #36]	; 0x24
 800b2aa:	b928      	cbnz	r0, 800b2b8 <__pow5mult+0x40>
 800b2ac:	4b1d      	ldr	r3, [pc, #116]	; (800b324 <__pow5mult+0xac>)
 800b2ae:	481e      	ldr	r0, [pc, #120]	; (800b328 <__pow5mult+0xb0>)
 800b2b0:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800b2b4:	f000 ff9c 	bl	800c1f0 <__assert_func>
 800b2b8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800b2bc:	6004      	str	r4, [r0, #0]
 800b2be:	60c4      	str	r4, [r0, #12]
 800b2c0:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800b2c4:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800b2c8:	b94c      	cbnz	r4, 800b2de <__pow5mult+0x66>
 800b2ca:	f240 2171 	movw	r1, #625	; 0x271
 800b2ce:	4630      	mov	r0, r6
 800b2d0:	f7ff ff12 	bl	800b0f8 <__i2b>
 800b2d4:	2300      	movs	r3, #0
 800b2d6:	f8c8 0008 	str.w	r0, [r8, #8]
 800b2da:	4604      	mov	r4, r0
 800b2dc:	6003      	str	r3, [r0, #0]
 800b2de:	f04f 0900 	mov.w	r9, #0
 800b2e2:	07eb      	lsls	r3, r5, #31
 800b2e4:	d50a      	bpl.n	800b2fc <__pow5mult+0x84>
 800b2e6:	4639      	mov	r1, r7
 800b2e8:	4622      	mov	r2, r4
 800b2ea:	4630      	mov	r0, r6
 800b2ec:	f7ff ff1a 	bl	800b124 <__multiply>
 800b2f0:	4639      	mov	r1, r7
 800b2f2:	4680      	mov	r8, r0
 800b2f4:	4630      	mov	r0, r6
 800b2f6:	f7ff fdfd 	bl	800aef4 <_Bfree>
 800b2fa:	4647      	mov	r7, r8
 800b2fc:	106d      	asrs	r5, r5, #1
 800b2fe:	d00b      	beq.n	800b318 <__pow5mult+0xa0>
 800b300:	6820      	ldr	r0, [r4, #0]
 800b302:	b938      	cbnz	r0, 800b314 <__pow5mult+0x9c>
 800b304:	4622      	mov	r2, r4
 800b306:	4621      	mov	r1, r4
 800b308:	4630      	mov	r0, r6
 800b30a:	f7ff ff0b 	bl	800b124 <__multiply>
 800b30e:	6020      	str	r0, [r4, #0]
 800b310:	f8c0 9000 	str.w	r9, [r0]
 800b314:	4604      	mov	r4, r0
 800b316:	e7e4      	b.n	800b2e2 <__pow5mult+0x6a>
 800b318:	4638      	mov	r0, r7
 800b31a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b31e:	bf00      	nop
 800b320:	0800cb60 	.word	0x0800cb60
 800b324:	0800c8ae 	.word	0x0800c8ae
 800b328:	0800ca10 	.word	0x0800ca10

0800b32c <__lshift>:
 800b32c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b330:	460c      	mov	r4, r1
 800b332:	6849      	ldr	r1, [r1, #4]
 800b334:	6923      	ldr	r3, [r4, #16]
 800b336:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800b33a:	68a3      	ldr	r3, [r4, #8]
 800b33c:	4607      	mov	r7, r0
 800b33e:	4691      	mov	r9, r2
 800b340:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800b344:	f108 0601 	add.w	r6, r8, #1
 800b348:	42b3      	cmp	r3, r6
 800b34a:	db0b      	blt.n	800b364 <__lshift+0x38>
 800b34c:	4638      	mov	r0, r7
 800b34e:	f7ff fd91 	bl	800ae74 <_Balloc>
 800b352:	4605      	mov	r5, r0
 800b354:	b948      	cbnz	r0, 800b36a <__lshift+0x3e>
 800b356:	4602      	mov	r2, r0
 800b358:	4b2a      	ldr	r3, [pc, #168]	; (800b404 <__lshift+0xd8>)
 800b35a:	482b      	ldr	r0, [pc, #172]	; (800b408 <__lshift+0xdc>)
 800b35c:	f240 11d9 	movw	r1, #473	; 0x1d9
 800b360:	f000 ff46 	bl	800c1f0 <__assert_func>
 800b364:	3101      	adds	r1, #1
 800b366:	005b      	lsls	r3, r3, #1
 800b368:	e7ee      	b.n	800b348 <__lshift+0x1c>
 800b36a:	2300      	movs	r3, #0
 800b36c:	f100 0114 	add.w	r1, r0, #20
 800b370:	f100 0210 	add.w	r2, r0, #16
 800b374:	4618      	mov	r0, r3
 800b376:	4553      	cmp	r3, sl
 800b378:	db37      	blt.n	800b3ea <__lshift+0xbe>
 800b37a:	6920      	ldr	r0, [r4, #16]
 800b37c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800b380:	f104 0314 	add.w	r3, r4, #20
 800b384:	f019 091f 	ands.w	r9, r9, #31
 800b388:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800b38c:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800b390:	d02f      	beq.n	800b3f2 <__lshift+0xc6>
 800b392:	f1c9 0e20 	rsb	lr, r9, #32
 800b396:	468a      	mov	sl, r1
 800b398:	f04f 0c00 	mov.w	ip, #0
 800b39c:	681a      	ldr	r2, [r3, #0]
 800b39e:	fa02 f209 	lsl.w	r2, r2, r9
 800b3a2:	ea42 020c 	orr.w	r2, r2, ip
 800b3a6:	f84a 2b04 	str.w	r2, [sl], #4
 800b3aa:	f853 2b04 	ldr.w	r2, [r3], #4
 800b3ae:	4298      	cmp	r0, r3
 800b3b0:	fa22 fc0e 	lsr.w	ip, r2, lr
 800b3b4:	d8f2      	bhi.n	800b39c <__lshift+0x70>
 800b3b6:	1b03      	subs	r3, r0, r4
 800b3b8:	3b15      	subs	r3, #21
 800b3ba:	f023 0303 	bic.w	r3, r3, #3
 800b3be:	3304      	adds	r3, #4
 800b3c0:	f104 0215 	add.w	r2, r4, #21
 800b3c4:	4290      	cmp	r0, r2
 800b3c6:	bf38      	it	cc
 800b3c8:	2304      	movcc	r3, #4
 800b3ca:	f841 c003 	str.w	ip, [r1, r3]
 800b3ce:	f1bc 0f00 	cmp.w	ip, #0
 800b3d2:	d001      	beq.n	800b3d8 <__lshift+0xac>
 800b3d4:	f108 0602 	add.w	r6, r8, #2
 800b3d8:	3e01      	subs	r6, #1
 800b3da:	4638      	mov	r0, r7
 800b3dc:	612e      	str	r6, [r5, #16]
 800b3de:	4621      	mov	r1, r4
 800b3e0:	f7ff fd88 	bl	800aef4 <_Bfree>
 800b3e4:	4628      	mov	r0, r5
 800b3e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b3ea:	f842 0f04 	str.w	r0, [r2, #4]!
 800b3ee:	3301      	adds	r3, #1
 800b3f0:	e7c1      	b.n	800b376 <__lshift+0x4a>
 800b3f2:	3904      	subs	r1, #4
 800b3f4:	f853 2b04 	ldr.w	r2, [r3], #4
 800b3f8:	f841 2f04 	str.w	r2, [r1, #4]!
 800b3fc:	4298      	cmp	r0, r3
 800b3fe:	d8f9      	bhi.n	800b3f4 <__lshift+0xc8>
 800b400:	e7ea      	b.n	800b3d8 <__lshift+0xac>
 800b402:	bf00      	nop
 800b404:	0800c920 	.word	0x0800c920
 800b408:	0800ca10 	.word	0x0800ca10

0800b40c <__mcmp>:
 800b40c:	b530      	push	{r4, r5, lr}
 800b40e:	6902      	ldr	r2, [r0, #16]
 800b410:	690c      	ldr	r4, [r1, #16]
 800b412:	1b12      	subs	r2, r2, r4
 800b414:	d10e      	bne.n	800b434 <__mcmp+0x28>
 800b416:	f100 0314 	add.w	r3, r0, #20
 800b41a:	3114      	adds	r1, #20
 800b41c:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800b420:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800b424:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800b428:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800b42c:	42a5      	cmp	r5, r4
 800b42e:	d003      	beq.n	800b438 <__mcmp+0x2c>
 800b430:	d305      	bcc.n	800b43e <__mcmp+0x32>
 800b432:	2201      	movs	r2, #1
 800b434:	4610      	mov	r0, r2
 800b436:	bd30      	pop	{r4, r5, pc}
 800b438:	4283      	cmp	r3, r0
 800b43a:	d3f3      	bcc.n	800b424 <__mcmp+0x18>
 800b43c:	e7fa      	b.n	800b434 <__mcmp+0x28>
 800b43e:	f04f 32ff 	mov.w	r2, #4294967295
 800b442:	e7f7      	b.n	800b434 <__mcmp+0x28>

0800b444 <__mdiff>:
 800b444:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b448:	460c      	mov	r4, r1
 800b44a:	4606      	mov	r6, r0
 800b44c:	4611      	mov	r1, r2
 800b44e:	4620      	mov	r0, r4
 800b450:	4690      	mov	r8, r2
 800b452:	f7ff ffdb 	bl	800b40c <__mcmp>
 800b456:	1e05      	subs	r5, r0, #0
 800b458:	d110      	bne.n	800b47c <__mdiff+0x38>
 800b45a:	4629      	mov	r1, r5
 800b45c:	4630      	mov	r0, r6
 800b45e:	f7ff fd09 	bl	800ae74 <_Balloc>
 800b462:	b930      	cbnz	r0, 800b472 <__mdiff+0x2e>
 800b464:	4b3a      	ldr	r3, [pc, #232]	; (800b550 <__mdiff+0x10c>)
 800b466:	4602      	mov	r2, r0
 800b468:	f240 2132 	movw	r1, #562	; 0x232
 800b46c:	4839      	ldr	r0, [pc, #228]	; (800b554 <__mdiff+0x110>)
 800b46e:	f000 febf 	bl	800c1f0 <__assert_func>
 800b472:	2301      	movs	r3, #1
 800b474:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800b478:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b47c:	bfa4      	itt	ge
 800b47e:	4643      	movge	r3, r8
 800b480:	46a0      	movge	r8, r4
 800b482:	4630      	mov	r0, r6
 800b484:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800b488:	bfa6      	itte	ge
 800b48a:	461c      	movge	r4, r3
 800b48c:	2500      	movge	r5, #0
 800b48e:	2501      	movlt	r5, #1
 800b490:	f7ff fcf0 	bl	800ae74 <_Balloc>
 800b494:	b920      	cbnz	r0, 800b4a0 <__mdiff+0x5c>
 800b496:	4b2e      	ldr	r3, [pc, #184]	; (800b550 <__mdiff+0x10c>)
 800b498:	4602      	mov	r2, r0
 800b49a:	f44f 7110 	mov.w	r1, #576	; 0x240
 800b49e:	e7e5      	b.n	800b46c <__mdiff+0x28>
 800b4a0:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800b4a4:	6926      	ldr	r6, [r4, #16]
 800b4a6:	60c5      	str	r5, [r0, #12]
 800b4a8:	f104 0914 	add.w	r9, r4, #20
 800b4ac:	f108 0514 	add.w	r5, r8, #20
 800b4b0:	f100 0e14 	add.w	lr, r0, #20
 800b4b4:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800b4b8:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800b4bc:	f108 0210 	add.w	r2, r8, #16
 800b4c0:	46f2      	mov	sl, lr
 800b4c2:	2100      	movs	r1, #0
 800b4c4:	f859 3b04 	ldr.w	r3, [r9], #4
 800b4c8:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800b4cc:	fa1f f883 	uxth.w	r8, r3
 800b4d0:	fa11 f18b 	uxtah	r1, r1, fp
 800b4d4:	0c1b      	lsrs	r3, r3, #16
 800b4d6:	eba1 0808 	sub.w	r8, r1, r8
 800b4da:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800b4de:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800b4e2:	fa1f f888 	uxth.w	r8, r8
 800b4e6:	1419      	asrs	r1, r3, #16
 800b4e8:	454e      	cmp	r6, r9
 800b4ea:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800b4ee:	f84a 3b04 	str.w	r3, [sl], #4
 800b4f2:	d8e7      	bhi.n	800b4c4 <__mdiff+0x80>
 800b4f4:	1b33      	subs	r3, r6, r4
 800b4f6:	3b15      	subs	r3, #21
 800b4f8:	f023 0303 	bic.w	r3, r3, #3
 800b4fc:	3304      	adds	r3, #4
 800b4fe:	3415      	adds	r4, #21
 800b500:	42a6      	cmp	r6, r4
 800b502:	bf38      	it	cc
 800b504:	2304      	movcc	r3, #4
 800b506:	441d      	add	r5, r3
 800b508:	4473      	add	r3, lr
 800b50a:	469e      	mov	lr, r3
 800b50c:	462e      	mov	r6, r5
 800b50e:	4566      	cmp	r6, ip
 800b510:	d30e      	bcc.n	800b530 <__mdiff+0xec>
 800b512:	f10c 0203 	add.w	r2, ip, #3
 800b516:	1b52      	subs	r2, r2, r5
 800b518:	f022 0203 	bic.w	r2, r2, #3
 800b51c:	3d03      	subs	r5, #3
 800b51e:	45ac      	cmp	ip, r5
 800b520:	bf38      	it	cc
 800b522:	2200      	movcc	r2, #0
 800b524:	441a      	add	r2, r3
 800b526:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800b52a:	b17b      	cbz	r3, 800b54c <__mdiff+0x108>
 800b52c:	6107      	str	r7, [r0, #16]
 800b52e:	e7a3      	b.n	800b478 <__mdiff+0x34>
 800b530:	f856 8b04 	ldr.w	r8, [r6], #4
 800b534:	fa11 f288 	uxtah	r2, r1, r8
 800b538:	1414      	asrs	r4, r2, #16
 800b53a:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800b53e:	b292      	uxth	r2, r2
 800b540:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800b544:	f84e 2b04 	str.w	r2, [lr], #4
 800b548:	1421      	asrs	r1, r4, #16
 800b54a:	e7e0      	b.n	800b50e <__mdiff+0xca>
 800b54c:	3f01      	subs	r7, #1
 800b54e:	e7ea      	b.n	800b526 <__mdiff+0xe2>
 800b550:	0800c920 	.word	0x0800c920
 800b554:	0800ca10 	.word	0x0800ca10

0800b558 <__ulp>:
 800b558:	b082      	sub	sp, #8
 800b55a:	ed8d 0b00 	vstr	d0, [sp]
 800b55e:	9b01      	ldr	r3, [sp, #4]
 800b560:	4912      	ldr	r1, [pc, #72]	; (800b5ac <__ulp+0x54>)
 800b562:	4019      	ands	r1, r3
 800b564:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 800b568:	2900      	cmp	r1, #0
 800b56a:	dd05      	ble.n	800b578 <__ulp+0x20>
 800b56c:	2200      	movs	r2, #0
 800b56e:	460b      	mov	r3, r1
 800b570:	ec43 2b10 	vmov	d0, r2, r3
 800b574:	b002      	add	sp, #8
 800b576:	4770      	bx	lr
 800b578:	4249      	negs	r1, r1
 800b57a:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 800b57e:	ea4f 5021 	mov.w	r0, r1, asr #20
 800b582:	f04f 0200 	mov.w	r2, #0
 800b586:	f04f 0300 	mov.w	r3, #0
 800b58a:	da04      	bge.n	800b596 <__ulp+0x3e>
 800b58c:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 800b590:	fa41 f300 	asr.w	r3, r1, r0
 800b594:	e7ec      	b.n	800b570 <__ulp+0x18>
 800b596:	f1a0 0114 	sub.w	r1, r0, #20
 800b59a:	291e      	cmp	r1, #30
 800b59c:	bfda      	itte	le
 800b59e:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 800b5a2:	fa20 f101 	lsrle.w	r1, r0, r1
 800b5a6:	2101      	movgt	r1, #1
 800b5a8:	460a      	mov	r2, r1
 800b5aa:	e7e1      	b.n	800b570 <__ulp+0x18>
 800b5ac:	7ff00000 	.word	0x7ff00000

0800b5b0 <__b2d>:
 800b5b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b5b2:	6905      	ldr	r5, [r0, #16]
 800b5b4:	f100 0714 	add.w	r7, r0, #20
 800b5b8:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 800b5bc:	1f2e      	subs	r6, r5, #4
 800b5be:	f855 4c04 	ldr.w	r4, [r5, #-4]
 800b5c2:	4620      	mov	r0, r4
 800b5c4:	f7ff fd48 	bl	800b058 <__hi0bits>
 800b5c8:	f1c0 0320 	rsb	r3, r0, #32
 800b5cc:	280a      	cmp	r0, #10
 800b5ce:	f8df c07c 	ldr.w	ip, [pc, #124]	; 800b64c <__b2d+0x9c>
 800b5d2:	600b      	str	r3, [r1, #0]
 800b5d4:	dc14      	bgt.n	800b600 <__b2d+0x50>
 800b5d6:	f1c0 0e0b 	rsb	lr, r0, #11
 800b5da:	fa24 f10e 	lsr.w	r1, r4, lr
 800b5de:	42b7      	cmp	r7, r6
 800b5e0:	ea41 030c 	orr.w	r3, r1, ip
 800b5e4:	bf34      	ite	cc
 800b5e6:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800b5ea:	2100      	movcs	r1, #0
 800b5ec:	3015      	adds	r0, #21
 800b5ee:	fa04 f000 	lsl.w	r0, r4, r0
 800b5f2:	fa21 f10e 	lsr.w	r1, r1, lr
 800b5f6:	ea40 0201 	orr.w	r2, r0, r1
 800b5fa:	ec43 2b10 	vmov	d0, r2, r3
 800b5fe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b600:	42b7      	cmp	r7, r6
 800b602:	bf3a      	itte	cc
 800b604:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800b608:	f1a5 0608 	subcc.w	r6, r5, #8
 800b60c:	2100      	movcs	r1, #0
 800b60e:	380b      	subs	r0, #11
 800b610:	d017      	beq.n	800b642 <__b2d+0x92>
 800b612:	f1c0 0c20 	rsb	ip, r0, #32
 800b616:	fa04 f500 	lsl.w	r5, r4, r0
 800b61a:	42be      	cmp	r6, r7
 800b61c:	fa21 f40c 	lsr.w	r4, r1, ip
 800b620:	ea45 0504 	orr.w	r5, r5, r4
 800b624:	bf8c      	ite	hi
 800b626:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 800b62a:	2400      	movls	r4, #0
 800b62c:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 800b630:	fa01 f000 	lsl.w	r0, r1, r0
 800b634:	fa24 f40c 	lsr.w	r4, r4, ip
 800b638:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800b63c:	ea40 0204 	orr.w	r2, r0, r4
 800b640:	e7db      	b.n	800b5fa <__b2d+0x4a>
 800b642:	ea44 030c 	orr.w	r3, r4, ip
 800b646:	460a      	mov	r2, r1
 800b648:	e7d7      	b.n	800b5fa <__b2d+0x4a>
 800b64a:	bf00      	nop
 800b64c:	3ff00000 	.word	0x3ff00000

0800b650 <__d2b>:
 800b650:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800b654:	4689      	mov	r9, r1
 800b656:	2101      	movs	r1, #1
 800b658:	ec57 6b10 	vmov	r6, r7, d0
 800b65c:	4690      	mov	r8, r2
 800b65e:	f7ff fc09 	bl	800ae74 <_Balloc>
 800b662:	4604      	mov	r4, r0
 800b664:	b930      	cbnz	r0, 800b674 <__d2b+0x24>
 800b666:	4602      	mov	r2, r0
 800b668:	4b25      	ldr	r3, [pc, #148]	; (800b700 <__d2b+0xb0>)
 800b66a:	4826      	ldr	r0, [pc, #152]	; (800b704 <__d2b+0xb4>)
 800b66c:	f240 310a 	movw	r1, #778	; 0x30a
 800b670:	f000 fdbe 	bl	800c1f0 <__assert_func>
 800b674:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800b678:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800b67c:	bb35      	cbnz	r5, 800b6cc <__d2b+0x7c>
 800b67e:	2e00      	cmp	r6, #0
 800b680:	9301      	str	r3, [sp, #4]
 800b682:	d028      	beq.n	800b6d6 <__d2b+0x86>
 800b684:	4668      	mov	r0, sp
 800b686:	9600      	str	r6, [sp, #0]
 800b688:	f7ff fd06 	bl	800b098 <__lo0bits>
 800b68c:	9900      	ldr	r1, [sp, #0]
 800b68e:	b300      	cbz	r0, 800b6d2 <__d2b+0x82>
 800b690:	9a01      	ldr	r2, [sp, #4]
 800b692:	f1c0 0320 	rsb	r3, r0, #32
 800b696:	fa02 f303 	lsl.w	r3, r2, r3
 800b69a:	430b      	orrs	r3, r1
 800b69c:	40c2      	lsrs	r2, r0
 800b69e:	6163      	str	r3, [r4, #20]
 800b6a0:	9201      	str	r2, [sp, #4]
 800b6a2:	9b01      	ldr	r3, [sp, #4]
 800b6a4:	61a3      	str	r3, [r4, #24]
 800b6a6:	2b00      	cmp	r3, #0
 800b6a8:	bf14      	ite	ne
 800b6aa:	2202      	movne	r2, #2
 800b6ac:	2201      	moveq	r2, #1
 800b6ae:	6122      	str	r2, [r4, #16]
 800b6b0:	b1d5      	cbz	r5, 800b6e8 <__d2b+0x98>
 800b6b2:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800b6b6:	4405      	add	r5, r0
 800b6b8:	f8c9 5000 	str.w	r5, [r9]
 800b6bc:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800b6c0:	f8c8 0000 	str.w	r0, [r8]
 800b6c4:	4620      	mov	r0, r4
 800b6c6:	b003      	add	sp, #12
 800b6c8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b6cc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800b6d0:	e7d5      	b.n	800b67e <__d2b+0x2e>
 800b6d2:	6161      	str	r1, [r4, #20]
 800b6d4:	e7e5      	b.n	800b6a2 <__d2b+0x52>
 800b6d6:	a801      	add	r0, sp, #4
 800b6d8:	f7ff fcde 	bl	800b098 <__lo0bits>
 800b6dc:	9b01      	ldr	r3, [sp, #4]
 800b6de:	6163      	str	r3, [r4, #20]
 800b6e0:	2201      	movs	r2, #1
 800b6e2:	6122      	str	r2, [r4, #16]
 800b6e4:	3020      	adds	r0, #32
 800b6e6:	e7e3      	b.n	800b6b0 <__d2b+0x60>
 800b6e8:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800b6ec:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800b6f0:	f8c9 0000 	str.w	r0, [r9]
 800b6f4:	6918      	ldr	r0, [r3, #16]
 800b6f6:	f7ff fcaf 	bl	800b058 <__hi0bits>
 800b6fa:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800b6fe:	e7df      	b.n	800b6c0 <__d2b+0x70>
 800b700:	0800c920 	.word	0x0800c920
 800b704:	0800ca10 	.word	0x0800ca10

0800b708 <__ratio>:
 800b708:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b70c:	4688      	mov	r8, r1
 800b70e:	4669      	mov	r1, sp
 800b710:	4681      	mov	r9, r0
 800b712:	f7ff ff4d 	bl	800b5b0 <__b2d>
 800b716:	a901      	add	r1, sp, #4
 800b718:	4640      	mov	r0, r8
 800b71a:	ec55 4b10 	vmov	r4, r5, d0
 800b71e:	f7ff ff47 	bl	800b5b0 <__b2d>
 800b722:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800b726:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800b72a:	eba3 0c02 	sub.w	ip, r3, r2
 800b72e:	e9dd 3200 	ldrd	r3, r2, [sp]
 800b732:	1a9b      	subs	r3, r3, r2
 800b734:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800b738:	ec51 0b10 	vmov	r0, r1, d0
 800b73c:	2b00      	cmp	r3, #0
 800b73e:	bfd6      	itet	le
 800b740:	460a      	movle	r2, r1
 800b742:	462a      	movgt	r2, r5
 800b744:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800b748:	468b      	mov	fp, r1
 800b74a:	462f      	mov	r7, r5
 800b74c:	bfd4      	ite	le
 800b74e:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 800b752:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800b756:	4620      	mov	r0, r4
 800b758:	ee10 2a10 	vmov	r2, s0
 800b75c:	465b      	mov	r3, fp
 800b75e:	4639      	mov	r1, r7
 800b760:	f7f5 f87c 	bl	800085c <__aeabi_ddiv>
 800b764:	ec41 0b10 	vmov	d0, r0, r1
 800b768:	b003      	add	sp, #12
 800b76a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800b76e <__copybits>:
 800b76e:	3901      	subs	r1, #1
 800b770:	b570      	push	{r4, r5, r6, lr}
 800b772:	1149      	asrs	r1, r1, #5
 800b774:	6914      	ldr	r4, [r2, #16]
 800b776:	3101      	adds	r1, #1
 800b778:	f102 0314 	add.w	r3, r2, #20
 800b77c:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800b780:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800b784:	1f05      	subs	r5, r0, #4
 800b786:	42a3      	cmp	r3, r4
 800b788:	d30c      	bcc.n	800b7a4 <__copybits+0x36>
 800b78a:	1aa3      	subs	r3, r4, r2
 800b78c:	3b11      	subs	r3, #17
 800b78e:	f023 0303 	bic.w	r3, r3, #3
 800b792:	3211      	adds	r2, #17
 800b794:	42a2      	cmp	r2, r4
 800b796:	bf88      	it	hi
 800b798:	2300      	movhi	r3, #0
 800b79a:	4418      	add	r0, r3
 800b79c:	2300      	movs	r3, #0
 800b79e:	4288      	cmp	r0, r1
 800b7a0:	d305      	bcc.n	800b7ae <__copybits+0x40>
 800b7a2:	bd70      	pop	{r4, r5, r6, pc}
 800b7a4:	f853 6b04 	ldr.w	r6, [r3], #4
 800b7a8:	f845 6f04 	str.w	r6, [r5, #4]!
 800b7ac:	e7eb      	b.n	800b786 <__copybits+0x18>
 800b7ae:	f840 3b04 	str.w	r3, [r0], #4
 800b7b2:	e7f4      	b.n	800b79e <__copybits+0x30>

0800b7b4 <__any_on>:
 800b7b4:	f100 0214 	add.w	r2, r0, #20
 800b7b8:	6900      	ldr	r0, [r0, #16]
 800b7ba:	114b      	asrs	r3, r1, #5
 800b7bc:	4298      	cmp	r0, r3
 800b7be:	b510      	push	{r4, lr}
 800b7c0:	db11      	blt.n	800b7e6 <__any_on+0x32>
 800b7c2:	dd0a      	ble.n	800b7da <__any_on+0x26>
 800b7c4:	f011 011f 	ands.w	r1, r1, #31
 800b7c8:	d007      	beq.n	800b7da <__any_on+0x26>
 800b7ca:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800b7ce:	fa24 f001 	lsr.w	r0, r4, r1
 800b7d2:	fa00 f101 	lsl.w	r1, r0, r1
 800b7d6:	428c      	cmp	r4, r1
 800b7d8:	d10b      	bne.n	800b7f2 <__any_on+0x3e>
 800b7da:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800b7de:	4293      	cmp	r3, r2
 800b7e0:	d803      	bhi.n	800b7ea <__any_on+0x36>
 800b7e2:	2000      	movs	r0, #0
 800b7e4:	bd10      	pop	{r4, pc}
 800b7e6:	4603      	mov	r3, r0
 800b7e8:	e7f7      	b.n	800b7da <__any_on+0x26>
 800b7ea:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800b7ee:	2900      	cmp	r1, #0
 800b7f0:	d0f5      	beq.n	800b7de <__any_on+0x2a>
 800b7f2:	2001      	movs	r0, #1
 800b7f4:	e7f6      	b.n	800b7e4 <__any_on+0x30>

0800b7f6 <_calloc_r>:
 800b7f6:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800b7f8:	fba1 2402 	umull	r2, r4, r1, r2
 800b7fc:	b94c      	cbnz	r4, 800b812 <_calloc_r+0x1c>
 800b7fe:	4611      	mov	r1, r2
 800b800:	9201      	str	r2, [sp, #4]
 800b802:	f000 f87b 	bl	800b8fc <_malloc_r>
 800b806:	9a01      	ldr	r2, [sp, #4]
 800b808:	4605      	mov	r5, r0
 800b80a:	b930      	cbnz	r0, 800b81a <_calloc_r+0x24>
 800b80c:	4628      	mov	r0, r5
 800b80e:	b003      	add	sp, #12
 800b810:	bd30      	pop	{r4, r5, pc}
 800b812:	220c      	movs	r2, #12
 800b814:	6002      	str	r2, [r0, #0]
 800b816:	2500      	movs	r5, #0
 800b818:	e7f8      	b.n	800b80c <_calloc_r+0x16>
 800b81a:	4621      	mov	r1, r4
 800b81c:	f7fc faae 	bl	8007d7c <memset>
 800b820:	e7f4      	b.n	800b80c <_calloc_r+0x16>
	...

0800b824 <_free_r>:
 800b824:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800b826:	2900      	cmp	r1, #0
 800b828:	d044      	beq.n	800b8b4 <_free_r+0x90>
 800b82a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b82e:	9001      	str	r0, [sp, #4]
 800b830:	2b00      	cmp	r3, #0
 800b832:	f1a1 0404 	sub.w	r4, r1, #4
 800b836:	bfb8      	it	lt
 800b838:	18e4      	addlt	r4, r4, r3
 800b83a:	f000 fe6d 	bl	800c518 <__malloc_lock>
 800b83e:	4a1e      	ldr	r2, [pc, #120]	; (800b8b8 <_free_r+0x94>)
 800b840:	9801      	ldr	r0, [sp, #4]
 800b842:	6813      	ldr	r3, [r2, #0]
 800b844:	b933      	cbnz	r3, 800b854 <_free_r+0x30>
 800b846:	6063      	str	r3, [r4, #4]
 800b848:	6014      	str	r4, [r2, #0]
 800b84a:	b003      	add	sp, #12
 800b84c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800b850:	f000 be68 	b.w	800c524 <__malloc_unlock>
 800b854:	42a3      	cmp	r3, r4
 800b856:	d908      	bls.n	800b86a <_free_r+0x46>
 800b858:	6825      	ldr	r5, [r4, #0]
 800b85a:	1961      	adds	r1, r4, r5
 800b85c:	428b      	cmp	r3, r1
 800b85e:	bf01      	itttt	eq
 800b860:	6819      	ldreq	r1, [r3, #0]
 800b862:	685b      	ldreq	r3, [r3, #4]
 800b864:	1949      	addeq	r1, r1, r5
 800b866:	6021      	streq	r1, [r4, #0]
 800b868:	e7ed      	b.n	800b846 <_free_r+0x22>
 800b86a:	461a      	mov	r2, r3
 800b86c:	685b      	ldr	r3, [r3, #4]
 800b86e:	b10b      	cbz	r3, 800b874 <_free_r+0x50>
 800b870:	42a3      	cmp	r3, r4
 800b872:	d9fa      	bls.n	800b86a <_free_r+0x46>
 800b874:	6811      	ldr	r1, [r2, #0]
 800b876:	1855      	adds	r5, r2, r1
 800b878:	42a5      	cmp	r5, r4
 800b87a:	d10b      	bne.n	800b894 <_free_r+0x70>
 800b87c:	6824      	ldr	r4, [r4, #0]
 800b87e:	4421      	add	r1, r4
 800b880:	1854      	adds	r4, r2, r1
 800b882:	42a3      	cmp	r3, r4
 800b884:	6011      	str	r1, [r2, #0]
 800b886:	d1e0      	bne.n	800b84a <_free_r+0x26>
 800b888:	681c      	ldr	r4, [r3, #0]
 800b88a:	685b      	ldr	r3, [r3, #4]
 800b88c:	6053      	str	r3, [r2, #4]
 800b88e:	4421      	add	r1, r4
 800b890:	6011      	str	r1, [r2, #0]
 800b892:	e7da      	b.n	800b84a <_free_r+0x26>
 800b894:	d902      	bls.n	800b89c <_free_r+0x78>
 800b896:	230c      	movs	r3, #12
 800b898:	6003      	str	r3, [r0, #0]
 800b89a:	e7d6      	b.n	800b84a <_free_r+0x26>
 800b89c:	6825      	ldr	r5, [r4, #0]
 800b89e:	1961      	adds	r1, r4, r5
 800b8a0:	428b      	cmp	r3, r1
 800b8a2:	bf04      	itt	eq
 800b8a4:	6819      	ldreq	r1, [r3, #0]
 800b8a6:	685b      	ldreq	r3, [r3, #4]
 800b8a8:	6063      	str	r3, [r4, #4]
 800b8aa:	bf04      	itt	eq
 800b8ac:	1949      	addeq	r1, r1, r5
 800b8ae:	6021      	streq	r1, [r4, #0]
 800b8b0:	6054      	str	r4, [r2, #4]
 800b8b2:	e7ca      	b.n	800b84a <_free_r+0x26>
 800b8b4:	b003      	add	sp, #12
 800b8b6:	bd30      	pop	{r4, r5, pc}
 800b8b8:	20001538 	.word	0x20001538

0800b8bc <sbrk_aligned>:
 800b8bc:	b570      	push	{r4, r5, r6, lr}
 800b8be:	4e0e      	ldr	r6, [pc, #56]	; (800b8f8 <sbrk_aligned+0x3c>)
 800b8c0:	460c      	mov	r4, r1
 800b8c2:	6831      	ldr	r1, [r6, #0]
 800b8c4:	4605      	mov	r5, r0
 800b8c6:	b911      	cbnz	r1, 800b8ce <sbrk_aligned+0x12>
 800b8c8:	f000 fb4a 	bl	800bf60 <_sbrk_r>
 800b8cc:	6030      	str	r0, [r6, #0]
 800b8ce:	4621      	mov	r1, r4
 800b8d0:	4628      	mov	r0, r5
 800b8d2:	f000 fb45 	bl	800bf60 <_sbrk_r>
 800b8d6:	1c43      	adds	r3, r0, #1
 800b8d8:	d00a      	beq.n	800b8f0 <sbrk_aligned+0x34>
 800b8da:	1cc4      	adds	r4, r0, #3
 800b8dc:	f024 0403 	bic.w	r4, r4, #3
 800b8e0:	42a0      	cmp	r0, r4
 800b8e2:	d007      	beq.n	800b8f4 <sbrk_aligned+0x38>
 800b8e4:	1a21      	subs	r1, r4, r0
 800b8e6:	4628      	mov	r0, r5
 800b8e8:	f000 fb3a 	bl	800bf60 <_sbrk_r>
 800b8ec:	3001      	adds	r0, #1
 800b8ee:	d101      	bne.n	800b8f4 <sbrk_aligned+0x38>
 800b8f0:	f04f 34ff 	mov.w	r4, #4294967295
 800b8f4:	4620      	mov	r0, r4
 800b8f6:	bd70      	pop	{r4, r5, r6, pc}
 800b8f8:	2000153c 	.word	0x2000153c

0800b8fc <_malloc_r>:
 800b8fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b900:	1ccd      	adds	r5, r1, #3
 800b902:	f025 0503 	bic.w	r5, r5, #3
 800b906:	3508      	adds	r5, #8
 800b908:	2d0c      	cmp	r5, #12
 800b90a:	bf38      	it	cc
 800b90c:	250c      	movcc	r5, #12
 800b90e:	2d00      	cmp	r5, #0
 800b910:	4607      	mov	r7, r0
 800b912:	db01      	blt.n	800b918 <_malloc_r+0x1c>
 800b914:	42a9      	cmp	r1, r5
 800b916:	d905      	bls.n	800b924 <_malloc_r+0x28>
 800b918:	230c      	movs	r3, #12
 800b91a:	603b      	str	r3, [r7, #0]
 800b91c:	2600      	movs	r6, #0
 800b91e:	4630      	mov	r0, r6
 800b920:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b924:	4e2e      	ldr	r6, [pc, #184]	; (800b9e0 <_malloc_r+0xe4>)
 800b926:	f000 fdf7 	bl	800c518 <__malloc_lock>
 800b92a:	6833      	ldr	r3, [r6, #0]
 800b92c:	461c      	mov	r4, r3
 800b92e:	bb34      	cbnz	r4, 800b97e <_malloc_r+0x82>
 800b930:	4629      	mov	r1, r5
 800b932:	4638      	mov	r0, r7
 800b934:	f7ff ffc2 	bl	800b8bc <sbrk_aligned>
 800b938:	1c43      	adds	r3, r0, #1
 800b93a:	4604      	mov	r4, r0
 800b93c:	d14d      	bne.n	800b9da <_malloc_r+0xde>
 800b93e:	6834      	ldr	r4, [r6, #0]
 800b940:	4626      	mov	r6, r4
 800b942:	2e00      	cmp	r6, #0
 800b944:	d140      	bne.n	800b9c8 <_malloc_r+0xcc>
 800b946:	6823      	ldr	r3, [r4, #0]
 800b948:	4631      	mov	r1, r6
 800b94a:	4638      	mov	r0, r7
 800b94c:	eb04 0803 	add.w	r8, r4, r3
 800b950:	f000 fb06 	bl	800bf60 <_sbrk_r>
 800b954:	4580      	cmp	r8, r0
 800b956:	d13a      	bne.n	800b9ce <_malloc_r+0xd2>
 800b958:	6821      	ldr	r1, [r4, #0]
 800b95a:	3503      	adds	r5, #3
 800b95c:	1a6d      	subs	r5, r5, r1
 800b95e:	f025 0503 	bic.w	r5, r5, #3
 800b962:	3508      	adds	r5, #8
 800b964:	2d0c      	cmp	r5, #12
 800b966:	bf38      	it	cc
 800b968:	250c      	movcc	r5, #12
 800b96a:	4629      	mov	r1, r5
 800b96c:	4638      	mov	r0, r7
 800b96e:	f7ff ffa5 	bl	800b8bc <sbrk_aligned>
 800b972:	3001      	adds	r0, #1
 800b974:	d02b      	beq.n	800b9ce <_malloc_r+0xd2>
 800b976:	6823      	ldr	r3, [r4, #0]
 800b978:	442b      	add	r3, r5
 800b97a:	6023      	str	r3, [r4, #0]
 800b97c:	e00e      	b.n	800b99c <_malloc_r+0xa0>
 800b97e:	6822      	ldr	r2, [r4, #0]
 800b980:	1b52      	subs	r2, r2, r5
 800b982:	d41e      	bmi.n	800b9c2 <_malloc_r+0xc6>
 800b984:	2a0b      	cmp	r2, #11
 800b986:	d916      	bls.n	800b9b6 <_malloc_r+0xba>
 800b988:	1961      	adds	r1, r4, r5
 800b98a:	42a3      	cmp	r3, r4
 800b98c:	6025      	str	r5, [r4, #0]
 800b98e:	bf18      	it	ne
 800b990:	6059      	strne	r1, [r3, #4]
 800b992:	6863      	ldr	r3, [r4, #4]
 800b994:	bf08      	it	eq
 800b996:	6031      	streq	r1, [r6, #0]
 800b998:	5162      	str	r2, [r4, r5]
 800b99a:	604b      	str	r3, [r1, #4]
 800b99c:	4638      	mov	r0, r7
 800b99e:	f104 060b 	add.w	r6, r4, #11
 800b9a2:	f000 fdbf 	bl	800c524 <__malloc_unlock>
 800b9a6:	f026 0607 	bic.w	r6, r6, #7
 800b9aa:	1d23      	adds	r3, r4, #4
 800b9ac:	1af2      	subs	r2, r6, r3
 800b9ae:	d0b6      	beq.n	800b91e <_malloc_r+0x22>
 800b9b0:	1b9b      	subs	r3, r3, r6
 800b9b2:	50a3      	str	r3, [r4, r2]
 800b9b4:	e7b3      	b.n	800b91e <_malloc_r+0x22>
 800b9b6:	6862      	ldr	r2, [r4, #4]
 800b9b8:	42a3      	cmp	r3, r4
 800b9ba:	bf0c      	ite	eq
 800b9bc:	6032      	streq	r2, [r6, #0]
 800b9be:	605a      	strne	r2, [r3, #4]
 800b9c0:	e7ec      	b.n	800b99c <_malloc_r+0xa0>
 800b9c2:	4623      	mov	r3, r4
 800b9c4:	6864      	ldr	r4, [r4, #4]
 800b9c6:	e7b2      	b.n	800b92e <_malloc_r+0x32>
 800b9c8:	4634      	mov	r4, r6
 800b9ca:	6876      	ldr	r6, [r6, #4]
 800b9cc:	e7b9      	b.n	800b942 <_malloc_r+0x46>
 800b9ce:	230c      	movs	r3, #12
 800b9d0:	603b      	str	r3, [r7, #0]
 800b9d2:	4638      	mov	r0, r7
 800b9d4:	f000 fda6 	bl	800c524 <__malloc_unlock>
 800b9d8:	e7a1      	b.n	800b91e <_malloc_r+0x22>
 800b9da:	6025      	str	r5, [r4, #0]
 800b9dc:	e7de      	b.n	800b99c <_malloc_r+0xa0>
 800b9de:	bf00      	nop
 800b9e0:	20001538 	.word	0x20001538

0800b9e4 <__ssputs_r>:
 800b9e4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b9e8:	688e      	ldr	r6, [r1, #8]
 800b9ea:	429e      	cmp	r6, r3
 800b9ec:	4682      	mov	sl, r0
 800b9ee:	460c      	mov	r4, r1
 800b9f0:	4690      	mov	r8, r2
 800b9f2:	461f      	mov	r7, r3
 800b9f4:	d838      	bhi.n	800ba68 <__ssputs_r+0x84>
 800b9f6:	898a      	ldrh	r2, [r1, #12]
 800b9f8:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800b9fc:	d032      	beq.n	800ba64 <__ssputs_r+0x80>
 800b9fe:	6825      	ldr	r5, [r4, #0]
 800ba00:	6909      	ldr	r1, [r1, #16]
 800ba02:	eba5 0901 	sub.w	r9, r5, r1
 800ba06:	6965      	ldr	r5, [r4, #20]
 800ba08:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800ba0c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800ba10:	3301      	adds	r3, #1
 800ba12:	444b      	add	r3, r9
 800ba14:	106d      	asrs	r5, r5, #1
 800ba16:	429d      	cmp	r5, r3
 800ba18:	bf38      	it	cc
 800ba1a:	461d      	movcc	r5, r3
 800ba1c:	0553      	lsls	r3, r2, #21
 800ba1e:	d531      	bpl.n	800ba84 <__ssputs_r+0xa0>
 800ba20:	4629      	mov	r1, r5
 800ba22:	f7ff ff6b 	bl	800b8fc <_malloc_r>
 800ba26:	4606      	mov	r6, r0
 800ba28:	b950      	cbnz	r0, 800ba40 <__ssputs_r+0x5c>
 800ba2a:	230c      	movs	r3, #12
 800ba2c:	f8ca 3000 	str.w	r3, [sl]
 800ba30:	89a3      	ldrh	r3, [r4, #12]
 800ba32:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ba36:	81a3      	strh	r3, [r4, #12]
 800ba38:	f04f 30ff 	mov.w	r0, #4294967295
 800ba3c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ba40:	6921      	ldr	r1, [r4, #16]
 800ba42:	464a      	mov	r2, r9
 800ba44:	f7ff fa08 	bl	800ae58 <memcpy>
 800ba48:	89a3      	ldrh	r3, [r4, #12]
 800ba4a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800ba4e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ba52:	81a3      	strh	r3, [r4, #12]
 800ba54:	6126      	str	r6, [r4, #16]
 800ba56:	6165      	str	r5, [r4, #20]
 800ba58:	444e      	add	r6, r9
 800ba5a:	eba5 0509 	sub.w	r5, r5, r9
 800ba5e:	6026      	str	r6, [r4, #0]
 800ba60:	60a5      	str	r5, [r4, #8]
 800ba62:	463e      	mov	r6, r7
 800ba64:	42be      	cmp	r6, r7
 800ba66:	d900      	bls.n	800ba6a <__ssputs_r+0x86>
 800ba68:	463e      	mov	r6, r7
 800ba6a:	6820      	ldr	r0, [r4, #0]
 800ba6c:	4632      	mov	r2, r6
 800ba6e:	4641      	mov	r1, r8
 800ba70:	f000 fd38 	bl	800c4e4 <memmove>
 800ba74:	68a3      	ldr	r3, [r4, #8]
 800ba76:	1b9b      	subs	r3, r3, r6
 800ba78:	60a3      	str	r3, [r4, #8]
 800ba7a:	6823      	ldr	r3, [r4, #0]
 800ba7c:	4433      	add	r3, r6
 800ba7e:	6023      	str	r3, [r4, #0]
 800ba80:	2000      	movs	r0, #0
 800ba82:	e7db      	b.n	800ba3c <__ssputs_r+0x58>
 800ba84:	462a      	mov	r2, r5
 800ba86:	f000 fd53 	bl	800c530 <_realloc_r>
 800ba8a:	4606      	mov	r6, r0
 800ba8c:	2800      	cmp	r0, #0
 800ba8e:	d1e1      	bne.n	800ba54 <__ssputs_r+0x70>
 800ba90:	6921      	ldr	r1, [r4, #16]
 800ba92:	4650      	mov	r0, sl
 800ba94:	f7ff fec6 	bl	800b824 <_free_r>
 800ba98:	e7c7      	b.n	800ba2a <__ssputs_r+0x46>
	...

0800ba9c <_svfiprintf_r>:
 800ba9c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800baa0:	4698      	mov	r8, r3
 800baa2:	898b      	ldrh	r3, [r1, #12]
 800baa4:	061b      	lsls	r3, r3, #24
 800baa6:	b09d      	sub	sp, #116	; 0x74
 800baa8:	4607      	mov	r7, r0
 800baaa:	460d      	mov	r5, r1
 800baac:	4614      	mov	r4, r2
 800baae:	d50e      	bpl.n	800bace <_svfiprintf_r+0x32>
 800bab0:	690b      	ldr	r3, [r1, #16]
 800bab2:	b963      	cbnz	r3, 800bace <_svfiprintf_r+0x32>
 800bab4:	2140      	movs	r1, #64	; 0x40
 800bab6:	f7ff ff21 	bl	800b8fc <_malloc_r>
 800baba:	6028      	str	r0, [r5, #0]
 800babc:	6128      	str	r0, [r5, #16]
 800babe:	b920      	cbnz	r0, 800baca <_svfiprintf_r+0x2e>
 800bac0:	230c      	movs	r3, #12
 800bac2:	603b      	str	r3, [r7, #0]
 800bac4:	f04f 30ff 	mov.w	r0, #4294967295
 800bac8:	e0d1      	b.n	800bc6e <_svfiprintf_r+0x1d2>
 800baca:	2340      	movs	r3, #64	; 0x40
 800bacc:	616b      	str	r3, [r5, #20]
 800bace:	2300      	movs	r3, #0
 800bad0:	9309      	str	r3, [sp, #36]	; 0x24
 800bad2:	2320      	movs	r3, #32
 800bad4:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800bad8:	f8cd 800c 	str.w	r8, [sp, #12]
 800badc:	2330      	movs	r3, #48	; 0x30
 800bade:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800bc88 <_svfiprintf_r+0x1ec>
 800bae2:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800bae6:	f04f 0901 	mov.w	r9, #1
 800baea:	4623      	mov	r3, r4
 800baec:	469a      	mov	sl, r3
 800baee:	f813 2b01 	ldrb.w	r2, [r3], #1
 800baf2:	b10a      	cbz	r2, 800baf8 <_svfiprintf_r+0x5c>
 800baf4:	2a25      	cmp	r2, #37	; 0x25
 800baf6:	d1f9      	bne.n	800baec <_svfiprintf_r+0x50>
 800baf8:	ebba 0b04 	subs.w	fp, sl, r4
 800bafc:	d00b      	beq.n	800bb16 <_svfiprintf_r+0x7a>
 800bafe:	465b      	mov	r3, fp
 800bb00:	4622      	mov	r2, r4
 800bb02:	4629      	mov	r1, r5
 800bb04:	4638      	mov	r0, r7
 800bb06:	f7ff ff6d 	bl	800b9e4 <__ssputs_r>
 800bb0a:	3001      	adds	r0, #1
 800bb0c:	f000 80aa 	beq.w	800bc64 <_svfiprintf_r+0x1c8>
 800bb10:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800bb12:	445a      	add	r2, fp
 800bb14:	9209      	str	r2, [sp, #36]	; 0x24
 800bb16:	f89a 3000 	ldrb.w	r3, [sl]
 800bb1a:	2b00      	cmp	r3, #0
 800bb1c:	f000 80a2 	beq.w	800bc64 <_svfiprintf_r+0x1c8>
 800bb20:	2300      	movs	r3, #0
 800bb22:	f04f 32ff 	mov.w	r2, #4294967295
 800bb26:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800bb2a:	f10a 0a01 	add.w	sl, sl, #1
 800bb2e:	9304      	str	r3, [sp, #16]
 800bb30:	9307      	str	r3, [sp, #28]
 800bb32:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800bb36:	931a      	str	r3, [sp, #104]	; 0x68
 800bb38:	4654      	mov	r4, sl
 800bb3a:	2205      	movs	r2, #5
 800bb3c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bb40:	4851      	ldr	r0, [pc, #324]	; (800bc88 <_svfiprintf_r+0x1ec>)
 800bb42:	f7f4 fb55 	bl	80001f0 <memchr>
 800bb46:	9a04      	ldr	r2, [sp, #16]
 800bb48:	b9d8      	cbnz	r0, 800bb82 <_svfiprintf_r+0xe6>
 800bb4a:	06d0      	lsls	r0, r2, #27
 800bb4c:	bf44      	itt	mi
 800bb4e:	2320      	movmi	r3, #32
 800bb50:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800bb54:	0711      	lsls	r1, r2, #28
 800bb56:	bf44      	itt	mi
 800bb58:	232b      	movmi	r3, #43	; 0x2b
 800bb5a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800bb5e:	f89a 3000 	ldrb.w	r3, [sl]
 800bb62:	2b2a      	cmp	r3, #42	; 0x2a
 800bb64:	d015      	beq.n	800bb92 <_svfiprintf_r+0xf6>
 800bb66:	9a07      	ldr	r2, [sp, #28]
 800bb68:	4654      	mov	r4, sl
 800bb6a:	2000      	movs	r0, #0
 800bb6c:	f04f 0c0a 	mov.w	ip, #10
 800bb70:	4621      	mov	r1, r4
 800bb72:	f811 3b01 	ldrb.w	r3, [r1], #1
 800bb76:	3b30      	subs	r3, #48	; 0x30
 800bb78:	2b09      	cmp	r3, #9
 800bb7a:	d94e      	bls.n	800bc1a <_svfiprintf_r+0x17e>
 800bb7c:	b1b0      	cbz	r0, 800bbac <_svfiprintf_r+0x110>
 800bb7e:	9207      	str	r2, [sp, #28]
 800bb80:	e014      	b.n	800bbac <_svfiprintf_r+0x110>
 800bb82:	eba0 0308 	sub.w	r3, r0, r8
 800bb86:	fa09 f303 	lsl.w	r3, r9, r3
 800bb8a:	4313      	orrs	r3, r2
 800bb8c:	9304      	str	r3, [sp, #16]
 800bb8e:	46a2      	mov	sl, r4
 800bb90:	e7d2      	b.n	800bb38 <_svfiprintf_r+0x9c>
 800bb92:	9b03      	ldr	r3, [sp, #12]
 800bb94:	1d19      	adds	r1, r3, #4
 800bb96:	681b      	ldr	r3, [r3, #0]
 800bb98:	9103      	str	r1, [sp, #12]
 800bb9a:	2b00      	cmp	r3, #0
 800bb9c:	bfbb      	ittet	lt
 800bb9e:	425b      	neglt	r3, r3
 800bba0:	f042 0202 	orrlt.w	r2, r2, #2
 800bba4:	9307      	strge	r3, [sp, #28]
 800bba6:	9307      	strlt	r3, [sp, #28]
 800bba8:	bfb8      	it	lt
 800bbaa:	9204      	strlt	r2, [sp, #16]
 800bbac:	7823      	ldrb	r3, [r4, #0]
 800bbae:	2b2e      	cmp	r3, #46	; 0x2e
 800bbb0:	d10c      	bne.n	800bbcc <_svfiprintf_r+0x130>
 800bbb2:	7863      	ldrb	r3, [r4, #1]
 800bbb4:	2b2a      	cmp	r3, #42	; 0x2a
 800bbb6:	d135      	bne.n	800bc24 <_svfiprintf_r+0x188>
 800bbb8:	9b03      	ldr	r3, [sp, #12]
 800bbba:	1d1a      	adds	r2, r3, #4
 800bbbc:	681b      	ldr	r3, [r3, #0]
 800bbbe:	9203      	str	r2, [sp, #12]
 800bbc0:	2b00      	cmp	r3, #0
 800bbc2:	bfb8      	it	lt
 800bbc4:	f04f 33ff 	movlt.w	r3, #4294967295
 800bbc8:	3402      	adds	r4, #2
 800bbca:	9305      	str	r3, [sp, #20]
 800bbcc:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800bc98 <_svfiprintf_r+0x1fc>
 800bbd0:	7821      	ldrb	r1, [r4, #0]
 800bbd2:	2203      	movs	r2, #3
 800bbd4:	4650      	mov	r0, sl
 800bbd6:	f7f4 fb0b 	bl	80001f0 <memchr>
 800bbda:	b140      	cbz	r0, 800bbee <_svfiprintf_r+0x152>
 800bbdc:	2340      	movs	r3, #64	; 0x40
 800bbde:	eba0 000a 	sub.w	r0, r0, sl
 800bbe2:	fa03 f000 	lsl.w	r0, r3, r0
 800bbe6:	9b04      	ldr	r3, [sp, #16]
 800bbe8:	4303      	orrs	r3, r0
 800bbea:	3401      	adds	r4, #1
 800bbec:	9304      	str	r3, [sp, #16]
 800bbee:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bbf2:	4826      	ldr	r0, [pc, #152]	; (800bc8c <_svfiprintf_r+0x1f0>)
 800bbf4:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800bbf8:	2206      	movs	r2, #6
 800bbfa:	f7f4 faf9 	bl	80001f0 <memchr>
 800bbfe:	2800      	cmp	r0, #0
 800bc00:	d038      	beq.n	800bc74 <_svfiprintf_r+0x1d8>
 800bc02:	4b23      	ldr	r3, [pc, #140]	; (800bc90 <_svfiprintf_r+0x1f4>)
 800bc04:	bb1b      	cbnz	r3, 800bc4e <_svfiprintf_r+0x1b2>
 800bc06:	9b03      	ldr	r3, [sp, #12]
 800bc08:	3307      	adds	r3, #7
 800bc0a:	f023 0307 	bic.w	r3, r3, #7
 800bc0e:	3308      	adds	r3, #8
 800bc10:	9303      	str	r3, [sp, #12]
 800bc12:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bc14:	4433      	add	r3, r6
 800bc16:	9309      	str	r3, [sp, #36]	; 0x24
 800bc18:	e767      	b.n	800baea <_svfiprintf_r+0x4e>
 800bc1a:	fb0c 3202 	mla	r2, ip, r2, r3
 800bc1e:	460c      	mov	r4, r1
 800bc20:	2001      	movs	r0, #1
 800bc22:	e7a5      	b.n	800bb70 <_svfiprintf_r+0xd4>
 800bc24:	2300      	movs	r3, #0
 800bc26:	3401      	adds	r4, #1
 800bc28:	9305      	str	r3, [sp, #20]
 800bc2a:	4619      	mov	r1, r3
 800bc2c:	f04f 0c0a 	mov.w	ip, #10
 800bc30:	4620      	mov	r0, r4
 800bc32:	f810 2b01 	ldrb.w	r2, [r0], #1
 800bc36:	3a30      	subs	r2, #48	; 0x30
 800bc38:	2a09      	cmp	r2, #9
 800bc3a:	d903      	bls.n	800bc44 <_svfiprintf_r+0x1a8>
 800bc3c:	2b00      	cmp	r3, #0
 800bc3e:	d0c5      	beq.n	800bbcc <_svfiprintf_r+0x130>
 800bc40:	9105      	str	r1, [sp, #20]
 800bc42:	e7c3      	b.n	800bbcc <_svfiprintf_r+0x130>
 800bc44:	fb0c 2101 	mla	r1, ip, r1, r2
 800bc48:	4604      	mov	r4, r0
 800bc4a:	2301      	movs	r3, #1
 800bc4c:	e7f0      	b.n	800bc30 <_svfiprintf_r+0x194>
 800bc4e:	ab03      	add	r3, sp, #12
 800bc50:	9300      	str	r3, [sp, #0]
 800bc52:	462a      	mov	r2, r5
 800bc54:	4b0f      	ldr	r3, [pc, #60]	; (800bc94 <_svfiprintf_r+0x1f8>)
 800bc56:	a904      	add	r1, sp, #16
 800bc58:	4638      	mov	r0, r7
 800bc5a:	f7fc f937 	bl	8007ecc <_printf_float>
 800bc5e:	1c42      	adds	r2, r0, #1
 800bc60:	4606      	mov	r6, r0
 800bc62:	d1d6      	bne.n	800bc12 <_svfiprintf_r+0x176>
 800bc64:	89ab      	ldrh	r3, [r5, #12]
 800bc66:	065b      	lsls	r3, r3, #25
 800bc68:	f53f af2c 	bmi.w	800bac4 <_svfiprintf_r+0x28>
 800bc6c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800bc6e:	b01d      	add	sp, #116	; 0x74
 800bc70:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bc74:	ab03      	add	r3, sp, #12
 800bc76:	9300      	str	r3, [sp, #0]
 800bc78:	462a      	mov	r2, r5
 800bc7a:	4b06      	ldr	r3, [pc, #24]	; (800bc94 <_svfiprintf_r+0x1f8>)
 800bc7c:	a904      	add	r1, sp, #16
 800bc7e:	4638      	mov	r0, r7
 800bc80:	f7fc fbc8 	bl	8008414 <_printf_i>
 800bc84:	e7eb      	b.n	800bc5e <_svfiprintf_r+0x1c2>
 800bc86:	bf00      	nop
 800bc88:	0800cb6c 	.word	0x0800cb6c
 800bc8c:	0800cb76 	.word	0x0800cb76
 800bc90:	08007ecd 	.word	0x08007ecd
 800bc94:	0800b9e5 	.word	0x0800b9e5
 800bc98:	0800cb72 	.word	0x0800cb72

0800bc9c <__sfputc_r>:
 800bc9c:	6893      	ldr	r3, [r2, #8]
 800bc9e:	3b01      	subs	r3, #1
 800bca0:	2b00      	cmp	r3, #0
 800bca2:	b410      	push	{r4}
 800bca4:	6093      	str	r3, [r2, #8]
 800bca6:	da08      	bge.n	800bcba <__sfputc_r+0x1e>
 800bca8:	6994      	ldr	r4, [r2, #24]
 800bcaa:	42a3      	cmp	r3, r4
 800bcac:	db01      	blt.n	800bcb2 <__sfputc_r+0x16>
 800bcae:	290a      	cmp	r1, #10
 800bcb0:	d103      	bne.n	800bcba <__sfputc_r+0x1e>
 800bcb2:	f85d 4b04 	ldr.w	r4, [sp], #4
 800bcb6:	f000 b9bb 	b.w	800c030 <__swbuf_r>
 800bcba:	6813      	ldr	r3, [r2, #0]
 800bcbc:	1c58      	adds	r0, r3, #1
 800bcbe:	6010      	str	r0, [r2, #0]
 800bcc0:	7019      	strb	r1, [r3, #0]
 800bcc2:	4608      	mov	r0, r1
 800bcc4:	f85d 4b04 	ldr.w	r4, [sp], #4
 800bcc8:	4770      	bx	lr

0800bcca <__sfputs_r>:
 800bcca:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bccc:	4606      	mov	r6, r0
 800bcce:	460f      	mov	r7, r1
 800bcd0:	4614      	mov	r4, r2
 800bcd2:	18d5      	adds	r5, r2, r3
 800bcd4:	42ac      	cmp	r4, r5
 800bcd6:	d101      	bne.n	800bcdc <__sfputs_r+0x12>
 800bcd8:	2000      	movs	r0, #0
 800bcda:	e007      	b.n	800bcec <__sfputs_r+0x22>
 800bcdc:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bce0:	463a      	mov	r2, r7
 800bce2:	4630      	mov	r0, r6
 800bce4:	f7ff ffda 	bl	800bc9c <__sfputc_r>
 800bce8:	1c43      	adds	r3, r0, #1
 800bcea:	d1f3      	bne.n	800bcd4 <__sfputs_r+0xa>
 800bcec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800bcf0 <_vfiprintf_r>:
 800bcf0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bcf4:	460d      	mov	r5, r1
 800bcf6:	b09d      	sub	sp, #116	; 0x74
 800bcf8:	4614      	mov	r4, r2
 800bcfa:	4698      	mov	r8, r3
 800bcfc:	4606      	mov	r6, r0
 800bcfe:	b118      	cbz	r0, 800bd08 <_vfiprintf_r+0x18>
 800bd00:	6983      	ldr	r3, [r0, #24]
 800bd02:	b90b      	cbnz	r3, 800bd08 <_vfiprintf_r+0x18>
 800bd04:	f7fe fc7a 	bl	800a5fc <__sinit>
 800bd08:	4b89      	ldr	r3, [pc, #548]	; (800bf30 <_vfiprintf_r+0x240>)
 800bd0a:	429d      	cmp	r5, r3
 800bd0c:	d11b      	bne.n	800bd46 <_vfiprintf_r+0x56>
 800bd0e:	6875      	ldr	r5, [r6, #4]
 800bd10:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800bd12:	07d9      	lsls	r1, r3, #31
 800bd14:	d405      	bmi.n	800bd22 <_vfiprintf_r+0x32>
 800bd16:	89ab      	ldrh	r3, [r5, #12]
 800bd18:	059a      	lsls	r2, r3, #22
 800bd1a:	d402      	bmi.n	800bd22 <_vfiprintf_r+0x32>
 800bd1c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800bd1e:	f7ff f87e 	bl	800ae1e <__retarget_lock_acquire_recursive>
 800bd22:	89ab      	ldrh	r3, [r5, #12]
 800bd24:	071b      	lsls	r3, r3, #28
 800bd26:	d501      	bpl.n	800bd2c <_vfiprintf_r+0x3c>
 800bd28:	692b      	ldr	r3, [r5, #16]
 800bd2a:	b9eb      	cbnz	r3, 800bd68 <_vfiprintf_r+0x78>
 800bd2c:	4629      	mov	r1, r5
 800bd2e:	4630      	mov	r0, r6
 800bd30:	f000 f9f0 	bl	800c114 <__swsetup_r>
 800bd34:	b1c0      	cbz	r0, 800bd68 <_vfiprintf_r+0x78>
 800bd36:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800bd38:	07dc      	lsls	r4, r3, #31
 800bd3a:	d50e      	bpl.n	800bd5a <_vfiprintf_r+0x6a>
 800bd3c:	f04f 30ff 	mov.w	r0, #4294967295
 800bd40:	b01d      	add	sp, #116	; 0x74
 800bd42:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bd46:	4b7b      	ldr	r3, [pc, #492]	; (800bf34 <_vfiprintf_r+0x244>)
 800bd48:	429d      	cmp	r5, r3
 800bd4a:	d101      	bne.n	800bd50 <_vfiprintf_r+0x60>
 800bd4c:	68b5      	ldr	r5, [r6, #8]
 800bd4e:	e7df      	b.n	800bd10 <_vfiprintf_r+0x20>
 800bd50:	4b79      	ldr	r3, [pc, #484]	; (800bf38 <_vfiprintf_r+0x248>)
 800bd52:	429d      	cmp	r5, r3
 800bd54:	bf08      	it	eq
 800bd56:	68f5      	ldreq	r5, [r6, #12]
 800bd58:	e7da      	b.n	800bd10 <_vfiprintf_r+0x20>
 800bd5a:	89ab      	ldrh	r3, [r5, #12]
 800bd5c:	0598      	lsls	r0, r3, #22
 800bd5e:	d4ed      	bmi.n	800bd3c <_vfiprintf_r+0x4c>
 800bd60:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800bd62:	f7ff f85d 	bl	800ae20 <__retarget_lock_release_recursive>
 800bd66:	e7e9      	b.n	800bd3c <_vfiprintf_r+0x4c>
 800bd68:	2300      	movs	r3, #0
 800bd6a:	9309      	str	r3, [sp, #36]	; 0x24
 800bd6c:	2320      	movs	r3, #32
 800bd6e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800bd72:	f8cd 800c 	str.w	r8, [sp, #12]
 800bd76:	2330      	movs	r3, #48	; 0x30
 800bd78:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800bf3c <_vfiprintf_r+0x24c>
 800bd7c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800bd80:	f04f 0901 	mov.w	r9, #1
 800bd84:	4623      	mov	r3, r4
 800bd86:	469a      	mov	sl, r3
 800bd88:	f813 2b01 	ldrb.w	r2, [r3], #1
 800bd8c:	b10a      	cbz	r2, 800bd92 <_vfiprintf_r+0xa2>
 800bd8e:	2a25      	cmp	r2, #37	; 0x25
 800bd90:	d1f9      	bne.n	800bd86 <_vfiprintf_r+0x96>
 800bd92:	ebba 0b04 	subs.w	fp, sl, r4
 800bd96:	d00b      	beq.n	800bdb0 <_vfiprintf_r+0xc0>
 800bd98:	465b      	mov	r3, fp
 800bd9a:	4622      	mov	r2, r4
 800bd9c:	4629      	mov	r1, r5
 800bd9e:	4630      	mov	r0, r6
 800bda0:	f7ff ff93 	bl	800bcca <__sfputs_r>
 800bda4:	3001      	adds	r0, #1
 800bda6:	f000 80aa 	beq.w	800befe <_vfiprintf_r+0x20e>
 800bdaa:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800bdac:	445a      	add	r2, fp
 800bdae:	9209      	str	r2, [sp, #36]	; 0x24
 800bdb0:	f89a 3000 	ldrb.w	r3, [sl]
 800bdb4:	2b00      	cmp	r3, #0
 800bdb6:	f000 80a2 	beq.w	800befe <_vfiprintf_r+0x20e>
 800bdba:	2300      	movs	r3, #0
 800bdbc:	f04f 32ff 	mov.w	r2, #4294967295
 800bdc0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800bdc4:	f10a 0a01 	add.w	sl, sl, #1
 800bdc8:	9304      	str	r3, [sp, #16]
 800bdca:	9307      	str	r3, [sp, #28]
 800bdcc:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800bdd0:	931a      	str	r3, [sp, #104]	; 0x68
 800bdd2:	4654      	mov	r4, sl
 800bdd4:	2205      	movs	r2, #5
 800bdd6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bdda:	4858      	ldr	r0, [pc, #352]	; (800bf3c <_vfiprintf_r+0x24c>)
 800bddc:	f7f4 fa08 	bl	80001f0 <memchr>
 800bde0:	9a04      	ldr	r2, [sp, #16]
 800bde2:	b9d8      	cbnz	r0, 800be1c <_vfiprintf_r+0x12c>
 800bde4:	06d1      	lsls	r1, r2, #27
 800bde6:	bf44      	itt	mi
 800bde8:	2320      	movmi	r3, #32
 800bdea:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800bdee:	0713      	lsls	r3, r2, #28
 800bdf0:	bf44      	itt	mi
 800bdf2:	232b      	movmi	r3, #43	; 0x2b
 800bdf4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800bdf8:	f89a 3000 	ldrb.w	r3, [sl]
 800bdfc:	2b2a      	cmp	r3, #42	; 0x2a
 800bdfe:	d015      	beq.n	800be2c <_vfiprintf_r+0x13c>
 800be00:	9a07      	ldr	r2, [sp, #28]
 800be02:	4654      	mov	r4, sl
 800be04:	2000      	movs	r0, #0
 800be06:	f04f 0c0a 	mov.w	ip, #10
 800be0a:	4621      	mov	r1, r4
 800be0c:	f811 3b01 	ldrb.w	r3, [r1], #1
 800be10:	3b30      	subs	r3, #48	; 0x30
 800be12:	2b09      	cmp	r3, #9
 800be14:	d94e      	bls.n	800beb4 <_vfiprintf_r+0x1c4>
 800be16:	b1b0      	cbz	r0, 800be46 <_vfiprintf_r+0x156>
 800be18:	9207      	str	r2, [sp, #28]
 800be1a:	e014      	b.n	800be46 <_vfiprintf_r+0x156>
 800be1c:	eba0 0308 	sub.w	r3, r0, r8
 800be20:	fa09 f303 	lsl.w	r3, r9, r3
 800be24:	4313      	orrs	r3, r2
 800be26:	9304      	str	r3, [sp, #16]
 800be28:	46a2      	mov	sl, r4
 800be2a:	e7d2      	b.n	800bdd2 <_vfiprintf_r+0xe2>
 800be2c:	9b03      	ldr	r3, [sp, #12]
 800be2e:	1d19      	adds	r1, r3, #4
 800be30:	681b      	ldr	r3, [r3, #0]
 800be32:	9103      	str	r1, [sp, #12]
 800be34:	2b00      	cmp	r3, #0
 800be36:	bfbb      	ittet	lt
 800be38:	425b      	neglt	r3, r3
 800be3a:	f042 0202 	orrlt.w	r2, r2, #2
 800be3e:	9307      	strge	r3, [sp, #28]
 800be40:	9307      	strlt	r3, [sp, #28]
 800be42:	bfb8      	it	lt
 800be44:	9204      	strlt	r2, [sp, #16]
 800be46:	7823      	ldrb	r3, [r4, #0]
 800be48:	2b2e      	cmp	r3, #46	; 0x2e
 800be4a:	d10c      	bne.n	800be66 <_vfiprintf_r+0x176>
 800be4c:	7863      	ldrb	r3, [r4, #1]
 800be4e:	2b2a      	cmp	r3, #42	; 0x2a
 800be50:	d135      	bne.n	800bebe <_vfiprintf_r+0x1ce>
 800be52:	9b03      	ldr	r3, [sp, #12]
 800be54:	1d1a      	adds	r2, r3, #4
 800be56:	681b      	ldr	r3, [r3, #0]
 800be58:	9203      	str	r2, [sp, #12]
 800be5a:	2b00      	cmp	r3, #0
 800be5c:	bfb8      	it	lt
 800be5e:	f04f 33ff 	movlt.w	r3, #4294967295
 800be62:	3402      	adds	r4, #2
 800be64:	9305      	str	r3, [sp, #20]
 800be66:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800bf4c <_vfiprintf_r+0x25c>
 800be6a:	7821      	ldrb	r1, [r4, #0]
 800be6c:	2203      	movs	r2, #3
 800be6e:	4650      	mov	r0, sl
 800be70:	f7f4 f9be 	bl	80001f0 <memchr>
 800be74:	b140      	cbz	r0, 800be88 <_vfiprintf_r+0x198>
 800be76:	2340      	movs	r3, #64	; 0x40
 800be78:	eba0 000a 	sub.w	r0, r0, sl
 800be7c:	fa03 f000 	lsl.w	r0, r3, r0
 800be80:	9b04      	ldr	r3, [sp, #16]
 800be82:	4303      	orrs	r3, r0
 800be84:	3401      	adds	r4, #1
 800be86:	9304      	str	r3, [sp, #16]
 800be88:	f814 1b01 	ldrb.w	r1, [r4], #1
 800be8c:	482c      	ldr	r0, [pc, #176]	; (800bf40 <_vfiprintf_r+0x250>)
 800be8e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800be92:	2206      	movs	r2, #6
 800be94:	f7f4 f9ac 	bl	80001f0 <memchr>
 800be98:	2800      	cmp	r0, #0
 800be9a:	d03f      	beq.n	800bf1c <_vfiprintf_r+0x22c>
 800be9c:	4b29      	ldr	r3, [pc, #164]	; (800bf44 <_vfiprintf_r+0x254>)
 800be9e:	bb1b      	cbnz	r3, 800bee8 <_vfiprintf_r+0x1f8>
 800bea0:	9b03      	ldr	r3, [sp, #12]
 800bea2:	3307      	adds	r3, #7
 800bea4:	f023 0307 	bic.w	r3, r3, #7
 800bea8:	3308      	adds	r3, #8
 800beaa:	9303      	str	r3, [sp, #12]
 800beac:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800beae:	443b      	add	r3, r7
 800beb0:	9309      	str	r3, [sp, #36]	; 0x24
 800beb2:	e767      	b.n	800bd84 <_vfiprintf_r+0x94>
 800beb4:	fb0c 3202 	mla	r2, ip, r2, r3
 800beb8:	460c      	mov	r4, r1
 800beba:	2001      	movs	r0, #1
 800bebc:	e7a5      	b.n	800be0a <_vfiprintf_r+0x11a>
 800bebe:	2300      	movs	r3, #0
 800bec0:	3401      	adds	r4, #1
 800bec2:	9305      	str	r3, [sp, #20]
 800bec4:	4619      	mov	r1, r3
 800bec6:	f04f 0c0a 	mov.w	ip, #10
 800beca:	4620      	mov	r0, r4
 800becc:	f810 2b01 	ldrb.w	r2, [r0], #1
 800bed0:	3a30      	subs	r2, #48	; 0x30
 800bed2:	2a09      	cmp	r2, #9
 800bed4:	d903      	bls.n	800bede <_vfiprintf_r+0x1ee>
 800bed6:	2b00      	cmp	r3, #0
 800bed8:	d0c5      	beq.n	800be66 <_vfiprintf_r+0x176>
 800beda:	9105      	str	r1, [sp, #20]
 800bedc:	e7c3      	b.n	800be66 <_vfiprintf_r+0x176>
 800bede:	fb0c 2101 	mla	r1, ip, r1, r2
 800bee2:	4604      	mov	r4, r0
 800bee4:	2301      	movs	r3, #1
 800bee6:	e7f0      	b.n	800beca <_vfiprintf_r+0x1da>
 800bee8:	ab03      	add	r3, sp, #12
 800beea:	9300      	str	r3, [sp, #0]
 800beec:	462a      	mov	r2, r5
 800beee:	4b16      	ldr	r3, [pc, #88]	; (800bf48 <_vfiprintf_r+0x258>)
 800bef0:	a904      	add	r1, sp, #16
 800bef2:	4630      	mov	r0, r6
 800bef4:	f7fb ffea 	bl	8007ecc <_printf_float>
 800bef8:	4607      	mov	r7, r0
 800befa:	1c78      	adds	r0, r7, #1
 800befc:	d1d6      	bne.n	800beac <_vfiprintf_r+0x1bc>
 800befe:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800bf00:	07d9      	lsls	r1, r3, #31
 800bf02:	d405      	bmi.n	800bf10 <_vfiprintf_r+0x220>
 800bf04:	89ab      	ldrh	r3, [r5, #12]
 800bf06:	059a      	lsls	r2, r3, #22
 800bf08:	d402      	bmi.n	800bf10 <_vfiprintf_r+0x220>
 800bf0a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800bf0c:	f7fe ff88 	bl	800ae20 <__retarget_lock_release_recursive>
 800bf10:	89ab      	ldrh	r3, [r5, #12]
 800bf12:	065b      	lsls	r3, r3, #25
 800bf14:	f53f af12 	bmi.w	800bd3c <_vfiprintf_r+0x4c>
 800bf18:	9809      	ldr	r0, [sp, #36]	; 0x24
 800bf1a:	e711      	b.n	800bd40 <_vfiprintf_r+0x50>
 800bf1c:	ab03      	add	r3, sp, #12
 800bf1e:	9300      	str	r3, [sp, #0]
 800bf20:	462a      	mov	r2, r5
 800bf22:	4b09      	ldr	r3, [pc, #36]	; (800bf48 <_vfiprintf_r+0x258>)
 800bf24:	a904      	add	r1, sp, #16
 800bf26:	4630      	mov	r0, r6
 800bf28:	f7fc fa74 	bl	8008414 <_printf_i>
 800bf2c:	e7e4      	b.n	800bef8 <_vfiprintf_r+0x208>
 800bf2e:	bf00      	nop
 800bf30:	0800c954 	.word	0x0800c954
 800bf34:	0800c974 	.word	0x0800c974
 800bf38:	0800c934 	.word	0x0800c934
 800bf3c:	0800cb6c 	.word	0x0800cb6c
 800bf40:	0800cb76 	.word	0x0800cb76
 800bf44:	08007ecd 	.word	0x08007ecd
 800bf48:	0800bccb 	.word	0x0800bccb
 800bf4c:	0800cb72 	.word	0x0800cb72

0800bf50 <nan>:
 800bf50:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800bf58 <nan+0x8>
 800bf54:	4770      	bx	lr
 800bf56:	bf00      	nop
 800bf58:	00000000 	.word	0x00000000
 800bf5c:	7ff80000 	.word	0x7ff80000

0800bf60 <_sbrk_r>:
 800bf60:	b538      	push	{r3, r4, r5, lr}
 800bf62:	4d06      	ldr	r5, [pc, #24]	; (800bf7c <_sbrk_r+0x1c>)
 800bf64:	2300      	movs	r3, #0
 800bf66:	4604      	mov	r4, r0
 800bf68:	4608      	mov	r0, r1
 800bf6a:	602b      	str	r3, [r5, #0]
 800bf6c:	f7f6 f9e8 	bl	8002340 <_sbrk>
 800bf70:	1c43      	adds	r3, r0, #1
 800bf72:	d102      	bne.n	800bf7a <_sbrk_r+0x1a>
 800bf74:	682b      	ldr	r3, [r5, #0]
 800bf76:	b103      	cbz	r3, 800bf7a <_sbrk_r+0x1a>
 800bf78:	6023      	str	r3, [r4, #0]
 800bf7a:	bd38      	pop	{r3, r4, r5, pc}
 800bf7c:	20001540 	.word	0x20001540

0800bf80 <__sread>:
 800bf80:	b510      	push	{r4, lr}
 800bf82:	460c      	mov	r4, r1
 800bf84:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bf88:	f000 fb02 	bl	800c590 <_read_r>
 800bf8c:	2800      	cmp	r0, #0
 800bf8e:	bfab      	itete	ge
 800bf90:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800bf92:	89a3      	ldrhlt	r3, [r4, #12]
 800bf94:	181b      	addge	r3, r3, r0
 800bf96:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800bf9a:	bfac      	ite	ge
 800bf9c:	6563      	strge	r3, [r4, #84]	; 0x54
 800bf9e:	81a3      	strhlt	r3, [r4, #12]
 800bfa0:	bd10      	pop	{r4, pc}

0800bfa2 <__swrite>:
 800bfa2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bfa6:	461f      	mov	r7, r3
 800bfa8:	898b      	ldrh	r3, [r1, #12]
 800bfaa:	05db      	lsls	r3, r3, #23
 800bfac:	4605      	mov	r5, r0
 800bfae:	460c      	mov	r4, r1
 800bfb0:	4616      	mov	r6, r2
 800bfb2:	d505      	bpl.n	800bfc0 <__swrite+0x1e>
 800bfb4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bfb8:	2302      	movs	r3, #2
 800bfba:	2200      	movs	r2, #0
 800bfbc:	f000 fa1a 	bl	800c3f4 <_lseek_r>
 800bfc0:	89a3      	ldrh	r3, [r4, #12]
 800bfc2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800bfc6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800bfca:	81a3      	strh	r3, [r4, #12]
 800bfcc:	4632      	mov	r2, r6
 800bfce:	463b      	mov	r3, r7
 800bfd0:	4628      	mov	r0, r5
 800bfd2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800bfd6:	f000 b88b 	b.w	800c0f0 <_write_r>

0800bfda <__sseek>:
 800bfda:	b510      	push	{r4, lr}
 800bfdc:	460c      	mov	r4, r1
 800bfde:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bfe2:	f000 fa07 	bl	800c3f4 <_lseek_r>
 800bfe6:	1c43      	adds	r3, r0, #1
 800bfe8:	89a3      	ldrh	r3, [r4, #12]
 800bfea:	bf15      	itete	ne
 800bfec:	6560      	strne	r0, [r4, #84]	; 0x54
 800bfee:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800bff2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800bff6:	81a3      	strheq	r3, [r4, #12]
 800bff8:	bf18      	it	ne
 800bffa:	81a3      	strhne	r3, [r4, #12]
 800bffc:	bd10      	pop	{r4, pc}

0800bffe <__sclose>:
 800bffe:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c002:	f000 b913 	b.w	800c22c <_close_r>

0800c006 <strncmp>:
 800c006:	b510      	push	{r4, lr}
 800c008:	b17a      	cbz	r2, 800c02a <strncmp+0x24>
 800c00a:	4603      	mov	r3, r0
 800c00c:	3901      	subs	r1, #1
 800c00e:	1884      	adds	r4, r0, r2
 800c010:	f813 0b01 	ldrb.w	r0, [r3], #1
 800c014:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800c018:	4290      	cmp	r0, r2
 800c01a:	d101      	bne.n	800c020 <strncmp+0x1a>
 800c01c:	42a3      	cmp	r3, r4
 800c01e:	d101      	bne.n	800c024 <strncmp+0x1e>
 800c020:	1a80      	subs	r0, r0, r2
 800c022:	bd10      	pop	{r4, pc}
 800c024:	2800      	cmp	r0, #0
 800c026:	d1f3      	bne.n	800c010 <strncmp+0xa>
 800c028:	e7fa      	b.n	800c020 <strncmp+0x1a>
 800c02a:	4610      	mov	r0, r2
 800c02c:	e7f9      	b.n	800c022 <strncmp+0x1c>
	...

0800c030 <__swbuf_r>:
 800c030:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c032:	460e      	mov	r6, r1
 800c034:	4614      	mov	r4, r2
 800c036:	4605      	mov	r5, r0
 800c038:	b118      	cbz	r0, 800c042 <__swbuf_r+0x12>
 800c03a:	6983      	ldr	r3, [r0, #24]
 800c03c:	b90b      	cbnz	r3, 800c042 <__swbuf_r+0x12>
 800c03e:	f7fe fadd 	bl	800a5fc <__sinit>
 800c042:	4b21      	ldr	r3, [pc, #132]	; (800c0c8 <__swbuf_r+0x98>)
 800c044:	429c      	cmp	r4, r3
 800c046:	d12b      	bne.n	800c0a0 <__swbuf_r+0x70>
 800c048:	686c      	ldr	r4, [r5, #4]
 800c04a:	69a3      	ldr	r3, [r4, #24]
 800c04c:	60a3      	str	r3, [r4, #8]
 800c04e:	89a3      	ldrh	r3, [r4, #12]
 800c050:	071a      	lsls	r2, r3, #28
 800c052:	d52f      	bpl.n	800c0b4 <__swbuf_r+0x84>
 800c054:	6923      	ldr	r3, [r4, #16]
 800c056:	b36b      	cbz	r3, 800c0b4 <__swbuf_r+0x84>
 800c058:	6923      	ldr	r3, [r4, #16]
 800c05a:	6820      	ldr	r0, [r4, #0]
 800c05c:	1ac0      	subs	r0, r0, r3
 800c05e:	6963      	ldr	r3, [r4, #20]
 800c060:	b2f6      	uxtb	r6, r6
 800c062:	4283      	cmp	r3, r0
 800c064:	4637      	mov	r7, r6
 800c066:	dc04      	bgt.n	800c072 <__swbuf_r+0x42>
 800c068:	4621      	mov	r1, r4
 800c06a:	4628      	mov	r0, r5
 800c06c:	f000 f974 	bl	800c358 <_fflush_r>
 800c070:	bb30      	cbnz	r0, 800c0c0 <__swbuf_r+0x90>
 800c072:	68a3      	ldr	r3, [r4, #8]
 800c074:	3b01      	subs	r3, #1
 800c076:	60a3      	str	r3, [r4, #8]
 800c078:	6823      	ldr	r3, [r4, #0]
 800c07a:	1c5a      	adds	r2, r3, #1
 800c07c:	6022      	str	r2, [r4, #0]
 800c07e:	701e      	strb	r6, [r3, #0]
 800c080:	6963      	ldr	r3, [r4, #20]
 800c082:	3001      	adds	r0, #1
 800c084:	4283      	cmp	r3, r0
 800c086:	d004      	beq.n	800c092 <__swbuf_r+0x62>
 800c088:	89a3      	ldrh	r3, [r4, #12]
 800c08a:	07db      	lsls	r3, r3, #31
 800c08c:	d506      	bpl.n	800c09c <__swbuf_r+0x6c>
 800c08e:	2e0a      	cmp	r6, #10
 800c090:	d104      	bne.n	800c09c <__swbuf_r+0x6c>
 800c092:	4621      	mov	r1, r4
 800c094:	4628      	mov	r0, r5
 800c096:	f000 f95f 	bl	800c358 <_fflush_r>
 800c09a:	b988      	cbnz	r0, 800c0c0 <__swbuf_r+0x90>
 800c09c:	4638      	mov	r0, r7
 800c09e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c0a0:	4b0a      	ldr	r3, [pc, #40]	; (800c0cc <__swbuf_r+0x9c>)
 800c0a2:	429c      	cmp	r4, r3
 800c0a4:	d101      	bne.n	800c0aa <__swbuf_r+0x7a>
 800c0a6:	68ac      	ldr	r4, [r5, #8]
 800c0a8:	e7cf      	b.n	800c04a <__swbuf_r+0x1a>
 800c0aa:	4b09      	ldr	r3, [pc, #36]	; (800c0d0 <__swbuf_r+0xa0>)
 800c0ac:	429c      	cmp	r4, r3
 800c0ae:	bf08      	it	eq
 800c0b0:	68ec      	ldreq	r4, [r5, #12]
 800c0b2:	e7ca      	b.n	800c04a <__swbuf_r+0x1a>
 800c0b4:	4621      	mov	r1, r4
 800c0b6:	4628      	mov	r0, r5
 800c0b8:	f000 f82c 	bl	800c114 <__swsetup_r>
 800c0bc:	2800      	cmp	r0, #0
 800c0be:	d0cb      	beq.n	800c058 <__swbuf_r+0x28>
 800c0c0:	f04f 37ff 	mov.w	r7, #4294967295
 800c0c4:	e7ea      	b.n	800c09c <__swbuf_r+0x6c>
 800c0c6:	bf00      	nop
 800c0c8:	0800c954 	.word	0x0800c954
 800c0cc:	0800c974 	.word	0x0800c974
 800c0d0:	0800c934 	.word	0x0800c934

0800c0d4 <__ascii_wctomb>:
 800c0d4:	b149      	cbz	r1, 800c0ea <__ascii_wctomb+0x16>
 800c0d6:	2aff      	cmp	r2, #255	; 0xff
 800c0d8:	bf85      	ittet	hi
 800c0da:	238a      	movhi	r3, #138	; 0x8a
 800c0dc:	6003      	strhi	r3, [r0, #0]
 800c0de:	700a      	strbls	r2, [r1, #0]
 800c0e0:	f04f 30ff 	movhi.w	r0, #4294967295
 800c0e4:	bf98      	it	ls
 800c0e6:	2001      	movls	r0, #1
 800c0e8:	4770      	bx	lr
 800c0ea:	4608      	mov	r0, r1
 800c0ec:	4770      	bx	lr
	...

0800c0f0 <_write_r>:
 800c0f0:	b538      	push	{r3, r4, r5, lr}
 800c0f2:	4d07      	ldr	r5, [pc, #28]	; (800c110 <_write_r+0x20>)
 800c0f4:	4604      	mov	r4, r0
 800c0f6:	4608      	mov	r0, r1
 800c0f8:	4611      	mov	r1, r2
 800c0fa:	2200      	movs	r2, #0
 800c0fc:	602a      	str	r2, [r5, #0]
 800c0fe:	461a      	mov	r2, r3
 800c100:	f7f6 f8cd 	bl	800229e <_write>
 800c104:	1c43      	adds	r3, r0, #1
 800c106:	d102      	bne.n	800c10e <_write_r+0x1e>
 800c108:	682b      	ldr	r3, [r5, #0]
 800c10a:	b103      	cbz	r3, 800c10e <_write_r+0x1e>
 800c10c:	6023      	str	r3, [r4, #0]
 800c10e:	bd38      	pop	{r3, r4, r5, pc}
 800c110:	20001540 	.word	0x20001540

0800c114 <__swsetup_r>:
 800c114:	4b32      	ldr	r3, [pc, #200]	; (800c1e0 <__swsetup_r+0xcc>)
 800c116:	b570      	push	{r4, r5, r6, lr}
 800c118:	681d      	ldr	r5, [r3, #0]
 800c11a:	4606      	mov	r6, r0
 800c11c:	460c      	mov	r4, r1
 800c11e:	b125      	cbz	r5, 800c12a <__swsetup_r+0x16>
 800c120:	69ab      	ldr	r3, [r5, #24]
 800c122:	b913      	cbnz	r3, 800c12a <__swsetup_r+0x16>
 800c124:	4628      	mov	r0, r5
 800c126:	f7fe fa69 	bl	800a5fc <__sinit>
 800c12a:	4b2e      	ldr	r3, [pc, #184]	; (800c1e4 <__swsetup_r+0xd0>)
 800c12c:	429c      	cmp	r4, r3
 800c12e:	d10f      	bne.n	800c150 <__swsetup_r+0x3c>
 800c130:	686c      	ldr	r4, [r5, #4]
 800c132:	89a3      	ldrh	r3, [r4, #12]
 800c134:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800c138:	0719      	lsls	r1, r3, #28
 800c13a:	d42c      	bmi.n	800c196 <__swsetup_r+0x82>
 800c13c:	06dd      	lsls	r5, r3, #27
 800c13e:	d411      	bmi.n	800c164 <__swsetup_r+0x50>
 800c140:	2309      	movs	r3, #9
 800c142:	6033      	str	r3, [r6, #0]
 800c144:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800c148:	81a3      	strh	r3, [r4, #12]
 800c14a:	f04f 30ff 	mov.w	r0, #4294967295
 800c14e:	e03e      	b.n	800c1ce <__swsetup_r+0xba>
 800c150:	4b25      	ldr	r3, [pc, #148]	; (800c1e8 <__swsetup_r+0xd4>)
 800c152:	429c      	cmp	r4, r3
 800c154:	d101      	bne.n	800c15a <__swsetup_r+0x46>
 800c156:	68ac      	ldr	r4, [r5, #8]
 800c158:	e7eb      	b.n	800c132 <__swsetup_r+0x1e>
 800c15a:	4b24      	ldr	r3, [pc, #144]	; (800c1ec <__swsetup_r+0xd8>)
 800c15c:	429c      	cmp	r4, r3
 800c15e:	bf08      	it	eq
 800c160:	68ec      	ldreq	r4, [r5, #12]
 800c162:	e7e6      	b.n	800c132 <__swsetup_r+0x1e>
 800c164:	0758      	lsls	r0, r3, #29
 800c166:	d512      	bpl.n	800c18e <__swsetup_r+0x7a>
 800c168:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800c16a:	b141      	cbz	r1, 800c17e <__swsetup_r+0x6a>
 800c16c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800c170:	4299      	cmp	r1, r3
 800c172:	d002      	beq.n	800c17a <__swsetup_r+0x66>
 800c174:	4630      	mov	r0, r6
 800c176:	f7ff fb55 	bl	800b824 <_free_r>
 800c17a:	2300      	movs	r3, #0
 800c17c:	6363      	str	r3, [r4, #52]	; 0x34
 800c17e:	89a3      	ldrh	r3, [r4, #12]
 800c180:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800c184:	81a3      	strh	r3, [r4, #12]
 800c186:	2300      	movs	r3, #0
 800c188:	6063      	str	r3, [r4, #4]
 800c18a:	6923      	ldr	r3, [r4, #16]
 800c18c:	6023      	str	r3, [r4, #0]
 800c18e:	89a3      	ldrh	r3, [r4, #12]
 800c190:	f043 0308 	orr.w	r3, r3, #8
 800c194:	81a3      	strh	r3, [r4, #12]
 800c196:	6923      	ldr	r3, [r4, #16]
 800c198:	b94b      	cbnz	r3, 800c1ae <__swsetup_r+0x9a>
 800c19a:	89a3      	ldrh	r3, [r4, #12]
 800c19c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800c1a0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800c1a4:	d003      	beq.n	800c1ae <__swsetup_r+0x9a>
 800c1a6:	4621      	mov	r1, r4
 800c1a8:	4630      	mov	r0, r6
 800c1aa:	f000 f95b 	bl	800c464 <__smakebuf_r>
 800c1ae:	89a0      	ldrh	r0, [r4, #12]
 800c1b0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800c1b4:	f010 0301 	ands.w	r3, r0, #1
 800c1b8:	d00a      	beq.n	800c1d0 <__swsetup_r+0xbc>
 800c1ba:	2300      	movs	r3, #0
 800c1bc:	60a3      	str	r3, [r4, #8]
 800c1be:	6963      	ldr	r3, [r4, #20]
 800c1c0:	425b      	negs	r3, r3
 800c1c2:	61a3      	str	r3, [r4, #24]
 800c1c4:	6923      	ldr	r3, [r4, #16]
 800c1c6:	b943      	cbnz	r3, 800c1da <__swsetup_r+0xc6>
 800c1c8:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800c1cc:	d1ba      	bne.n	800c144 <__swsetup_r+0x30>
 800c1ce:	bd70      	pop	{r4, r5, r6, pc}
 800c1d0:	0781      	lsls	r1, r0, #30
 800c1d2:	bf58      	it	pl
 800c1d4:	6963      	ldrpl	r3, [r4, #20]
 800c1d6:	60a3      	str	r3, [r4, #8]
 800c1d8:	e7f4      	b.n	800c1c4 <__swsetup_r+0xb0>
 800c1da:	2000      	movs	r0, #0
 800c1dc:	e7f7      	b.n	800c1ce <__swsetup_r+0xba>
 800c1de:	bf00      	nop
 800c1e0:	20000014 	.word	0x20000014
 800c1e4:	0800c954 	.word	0x0800c954
 800c1e8:	0800c974 	.word	0x0800c974
 800c1ec:	0800c934 	.word	0x0800c934

0800c1f0 <__assert_func>:
 800c1f0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800c1f2:	4614      	mov	r4, r2
 800c1f4:	461a      	mov	r2, r3
 800c1f6:	4b09      	ldr	r3, [pc, #36]	; (800c21c <__assert_func+0x2c>)
 800c1f8:	681b      	ldr	r3, [r3, #0]
 800c1fa:	4605      	mov	r5, r0
 800c1fc:	68d8      	ldr	r0, [r3, #12]
 800c1fe:	b14c      	cbz	r4, 800c214 <__assert_func+0x24>
 800c200:	4b07      	ldr	r3, [pc, #28]	; (800c220 <__assert_func+0x30>)
 800c202:	9100      	str	r1, [sp, #0]
 800c204:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800c208:	4906      	ldr	r1, [pc, #24]	; (800c224 <__assert_func+0x34>)
 800c20a:	462b      	mov	r3, r5
 800c20c:	f000 f8e0 	bl	800c3d0 <fiprintf>
 800c210:	f000 f9d0 	bl	800c5b4 <abort>
 800c214:	4b04      	ldr	r3, [pc, #16]	; (800c228 <__assert_func+0x38>)
 800c216:	461c      	mov	r4, r3
 800c218:	e7f3      	b.n	800c202 <__assert_func+0x12>
 800c21a:	bf00      	nop
 800c21c:	20000014 	.word	0x20000014
 800c220:	0800cb7d 	.word	0x0800cb7d
 800c224:	0800cb8a 	.word	0x0800cb8a
 800c228:	0800cbb8 	.word	0x0800cbb8

0800c22c <_close_r>:
 800c22c:	b538      	push	{r3, r4, r5, lr}
 800c22e:	4d06      	ldr	r5, [pc, #24]	; (800c248 <_close_r+0x1c>)
 800c230:	2300      	movs	r3, #0
 800c232:	4604      	mov	r4, r0
 800c234:	4608      	mov	r0, r1
 800c236:	602b      	str	r3, [r5, #0]
 800c238:	f7f6 f84d 	bl	80022d6 <_close>
 800c23c:	1c43      	adds	r3, r0, #1
 800c23e:	d102      	bne.n	800c246 <_close_r+0x1a>
 800c240:	682b      	ldr	r3, [r5, #0]
 800c242:	b103      	cbz	r3, 800c246 <_close_r+0x1a>
 800c244:	6023      	str	r3, [r4, #0]
 800c246:	bd38      	pop	{r3, r4, r5, pc}
 800c248:	20001540 	.word	0x20001540

0800c24c <__sflush_r>:
 800c24c:	898a      	ldrh	r2, [r1, #12]
 800c24e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c252:	4605      	mov	r5, r0
 800c254:	0710      	lsls	r0, r2, #28
 800c256:	460c      	mov	r4, r1
 800c258:	d458      	bmi.n	800c30c <__sflush_r+0xc0>
 800c25a:	684b      	ldr	r3, [r1, #4]
 800c25c:	2b00      	cmp	r3, #0
 800c25e:	dc05      	bgt.n	800c26c <__sflush_r+0x20>
 800c260:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800c262:	2b00      	cmp	r3, #0
 800c264:	dc02      	bgt.n	800c26c <__sflush_r+0x20>
 800c266:	2000      	movs	r0, #0
 800c268:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c26c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800c26e:	2e00      	cmp	r6, #0
 800c270:	d0f9      	beq.n	800c266 <__sflush_r+0x1a>
 800c272:	2300      	movs	r3, #0
 800c274:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800c278:	682f      	ldr	r7, [r5, #0]
 800c27a:	602b      	str	r3, [r5, #0]
 800c27c:	d032      	beq.n	800c2e4 <__sflush_r+0x98>
 800c27e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800c280:	89a3      	ldrh	r3, [r4, #12]
 800c282:	075a      	lsls	r2, r3, #29
 800c284:	d505      	bpl.n	800c292 <__sflush_r+0x46>
 800c286:	6863      	ldr	r3, [r4, #4]
 800c288:	1ac0      	subs	r0, r0, r3
 800c28a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800c28c:	b10b      	cbz	r3, 800c292 <__sflush_r+0x46>
 800c28e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800c290:	1ac0      	subs	r0, r0, r3
 800c292:	2300      	movs	r3, #0
 800c294:	4602      	mov	r2, r0
 800c296:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800c298:	6a21      	ldr	r1, [r4, #32]
 800c29a:	4628      	mov	r0, r5
 800c29c:	47b0      	blx	r6
 800c29e:	1c43      	adds	r3, r0, #1
 800c2a0:	89a3      	ldrh	r3, [r4, #12]
 800c2a2:	d106      	bne.n	800c2b2 <__sflush_r+0x66>
 800c2a4:	6829      	ldr	r1, [r5, #0]
 800c2a6:	291d      	cmp	r1, #29
 800c2a8:	d82c      	bhi.n	800c304 <__sflush_r+0xb8>
 800c2aa:	4a2a      	ldr	r2, [pc, #168]	; (800c354 <__sflush_r+0x108>)
 800c2ac:	40ca      	lsrs	r2, r1
 800c2ae:	07d6      	lsls	r6, r2, #31
 800c2b0:	d528      	bpl.n	800c304 <__sflush_r+0xb8>
 800c2b2:	2200      	movs	r2, #0
 800c2b4:	6062      	str	r2, [r4, #4]
 800c2b6:	04d9      	lsls	r1, r3, #19
 800c2b8:	6922      	ldr	r2, [r4, #16]
 800c2ba:	6022      	str	r2, [r4, #0]
 800c2bc:	d504      	bpl.n	800c2c8 <__sflush_r+0x7c>
 800c2be:	1c42      	adds	r2, r0, #1
 800c2c0:	d101      	bne.n	800c2c6 <__sflush_r+0x7a>
 800c2c2:	682b      	ldr	r3, [r5, #0]
 800c2c4:	b903      	cbnz	r3, 800c2c8 <__sflush_r+0x7c>
 800c2c6:	6560      	str	r0, [r4, #84]	; 0x54
 800c2c8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800c2ca:	602f      	str	r7, [r5, #0]
 800c2cc:	2900      	cmp	r1, #0
 800c2ce:	d0ca      	beq.n	800c266 <__sflush_r+0x1a>
 800c2d0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800c2d4:	4299      	cmp	r1, r3
 800c2d6:	d002      	beq.n	800c2de <__sflush_r+0x92>
 800c2d8:	4628      	mov	r0, r5
 800c2da:	f7ff faa3 	bl	800b824 <_free_r>
 800c2de:	2000      	movs	r0, #0
 800c2e0:	6360      	str	r0, [r4, #52]	; 0x34
 800c2e2:	e7c1      	b.n	800c268 <__sflush_r+0x1c>
 800c2e4:	6a21      	ldr	r1, [r4, #32]
 800c2e6:	2301      	movs	r3, #1
 800c2e8:	4628      	mov	r0, r5
 800c2ea:	47b0      	blx	r6
 800c2ec:	1c41      	adds	r1, r0, #1
 800c2ee:	d1c7      	bne.n	800c280 <__sflush_r+0x34>
 800c2f0:	682b      	ldr	r3, [r5, #0]
 800c2f2:	2b00      	cmp	r3, #0
 800c2f4:	d0c4      	beq.n	800c280 <__sflush_r+0x34>
 800c2f6:	2b1d      	cmp	r3, #29
 800c2f8:	d001      	beq.n	800c2fe <__sflush_r+0xb2>
 800c2fa:	2b16      	cmp	r3, #22
 800c2fc:	d101      	bne.n	800c302 <__sflush_r+0xb6>
 800c2fe:	602f      	str	r7, [r5, #0]
 800c300:	e7b1      	b.n	800c266 <__sflush_r+0x1a>
 800c302:	89a3      	ldrh	r3, [r4, #12]
 800c304:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c308:	81a3      	strh	r3, [r4, #12]
 800c30a:	e7ad      	b.n	800c268 <__sflush_r+0x1c>
 800c30c:	690f      	ldr	r7, [r1, #16]
 800c30e:	2f00      	cmp	r7, #0
 800c310:	d0a9      	beq.n	800c266 <__sflush_r+0x1a>
 800c312:	0793      	lsls	r3, r2, #30
 800c314:	680e      	ldr	r6, [r1, #0]
 800c316:	bf08      	it	eq
 800c318:	694b      	ldreq	r3, [r1, #20]
 800c31a:	600f      	str	r7, [r1, #0]
 800c31c:	bf18      	it	ne
 800c31e:	2300      	movne	r3, #0
 800c320:	eba6 0807 	sub.w	r8, r6, r7
 800c324:	608b      	str	r3, [r1, #8]
 800c326:	f1b8 0f00 	cmp.w	r8, #0
 800c32a:	dd9c      	ble.n	800c266 <__sflush_r+0x1a>
 800c32c:	6a21      	ldr	r1, [r4, #32]
 800c32e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800c330:	4643      	mov	r3, r8
 800c332:	463a      	mov	r2, r7
 800c334:	4628      	mov	r0, r5
 800c336:	47b0      	blx	r6
 800c338:	2800      	cmp	r0, #0
 800c33a:	dc06      	bgt.n	800c34a <__sflush_r+0xfe>
 800c33c:	89a3      	ldrh	r3, [r4, #12]
 800c33e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c342:	81a3      	strh	r3, [r4, #12]
 800c344:	f04f 30ff 	mov.w	r0, #4294967295
 800c348:	e78e      	b.n	800c268 <__sflush_r+0x1c>
 800c34a:	4407      	add	r7, r0
 800c34c:	eba8 0800 	sub.w	r8, r8, r0
 800c350:	e7e9      	b.n	800c326 <__sflush_r+0xda>
 800c352:	bf00      	nop
 800c354:	20400001 	.word	0x20400001

0800c358 <_fflush_r>:
 800c358:	b538      	push	{r3, r4, r5, lr}
 800c35a:	690b      	ldr	r3, [r1, #16]
 800c35c:	4605      	mov	r5, r0
 800c35e:	460c      	mov	r4, r1
 800c360:	b913      	cbnz	r3, 800c368 <_fflush_r+0x10>
 800c362:	2500      	movs	r5, #0
 800c364:	4628      	mov	r0, r5
 800c366:	bd38      	pop	{r3, r4, r5, pc}
 800c368:	b118      	cbz	r0, 800c372 <_fflush_r+0x1a>
 800c36a:	6983      	ldr	r3, [r0, #24]
 800c36c:	b90b      	cbnz	r3, 800c372 <_fflush_r+0x1a>
 800c36e:	f7fe f945 	bl	800a5fc <__sinit>
 800c372:	4b14      	ldr	r3, [pc, #80]	; (800c3c4 <_fflush_r+0x6c>)
 800c374:	429c      	cmp	r4, r3
 800c376:	d11b      	bne.n	800c3b0 <_fflush_r+0x58>
 800c378:	686c      	ldr	r4, [r5, #4]
 800c37a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c37e:	2b00      	cmp	r3, #0
 800c380:	d0ef      	beq.n	800c362 <_fflush_r+0xa>
 800c382:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800c384:	07d0      	lsls	r0, r2, #31
 800c386:	d404      	bmi.n	800c392 <_fflush_r+0x3a>
 800c388:	0599      	lsls	r1, r3, #22
 800c38a:	d402      	bmi.n	800c392 <_fflush_r+0x3a>
 800c38c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c38e:	f7fe fd46 	bl	800ae1e <__retarget_lock_acquire_recursive>
 800c392:	4628      	mov	r0, r5
 800c394:	4621      	mov	r1, r4
 800c396:	f7ff ff59 	bl	800c24c <__sflush_r>
 800c39a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800c39c:	07da      	lsls	r2, r3, #31
 800c39e:	4605      	mov	r5, r0
 800c3a0:	d4e0      	bmi.n	800c364 <_fflush_r+0xc>
 800c3a2:	89a3      	ldrh	r3, [r4, #12]
 800c3a4:	059b      	lsls	r3, r3, #22
 800c3a6:	d4dd      	bmi.n	800c364 <_fflush_r+0xc>
 800c3a8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c3aa:	f7fe fd39 	bl	800ae20 <__retarget_lock_release_recursive>
 800c3ae:	e7d9      	b.n	800c364 <_fflush_r+0xc>
 800c3b0:	4b05      	ldr	r3, [pc, #20]	; (800c3c8 <_fflush_r+0x70>)
 800c3b2:	429c      	cmp	r4, r3
 800c3b4:	d101      	bne.n	800c3ba <_fflush_r+0x62>
 800c3b6:	68ac      	ldr	r4, [r5, #8]
 800c3b8:	e7df      	b.n	800c37a <_fflush_r+0x22>
 800c3ba:	4b04      	ldr	r3, [pc, #16]	; (800c3cc <_fflush_r+0x74>)
 800c3bc:	429c      	cmp	r4, r3
 800c3be:	bf08      	it	eq
 800c3c0:	68ec      	ldreq	r4, [r5, #12]
 800c3c2:	e7da      	b.n	800c37a <_fflush_r+0x22>
 800c3c4:	0800c954 	.word	0x0800c954
 800c3c8:	0800c974 	.word	0x0800c974
 800c3cc:	0800c934 	.word	0x0800c934

0800c3d0 <fiprintf>:
 800c3d0:	b40e      	push	{r1, r2, r3}
 800c3d2:	b503      	push	{r0, r1, lr}
 800c3d4:	4601      	mov	r1, r0
 800c3d6:	ab03      	add	r3, sp, #12
 800c3d8:	4805      	ldr	r0, [pc, #20]	; (800c3f0 <fiprintf+0x20>)
 800c3da:	f853 2b04 	ldr.w	r2, [r3], #4
 800c3de:	6800      	ldr	r0, [r0, #0]
 800c3e0:	9301      	str	r3, [sp, #4]
 800c3e2:	f7ff fc85 	bl	800bcf0 <_vfiprintf_r>
 800c3e6:	b002      	add	sp, #8
 800c3e8:	f85d eb04 	ldr.w	lr, [sp], #4
 800c3ec:	b003      	add	sp, #12
 800c3ee:	4770      	bx	lr
 800c3f0:	20000014 	.word	0x20000014

0800c3f4 <_lseek_r>:
 800c3f4:	b538      	push	{r3, r4, r5, lr}
 800c3f6:	4d07      	ldr	r5, [pc, #28]	; (800c414 <_lseek_r+0x20>)
 800c3f8:	4604      	mov	r4, r0
 800c3fa:	4608      	mov	r0, r1
 800c3fc:	4611      	mov	r1, r2
 800c3fe:	2200      	movs	r2, #0
 800c400:	602a      	str	r2, [r5, #0]
 800c402:	461a      	mov	r2, r3
 800c404:	f7f5 ff8e 	bl	8002324 <_lseek>
 800c408:	1c43      	adds	r3, r0, #1
 800c40a:	d102      	bne.n	800c412 <_lseek_r+0x1e>
 800c40c:	682b      	ldr	r3, [r5, #0]
 800c40e:	b103      	cbz	r3, 800c412 <_lseek_r+0x1e>
 800c410:	6023      	str	r3, [r4, #0]
 800c412:	bd38      	pop	{r3, r4, r5, pc}
 800c414:	20001540 	.word	0x20001540

0800c418 <__swhatbuf_r>:
 800c418:	b570      	push	{r4, r5, r6, lr}
 800c41a:	460e      	mov	r6, r1
 800c41c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c420:	2900      	cmp	r1, #0
 800c422:	b096      	sub	sp, #88	; 0x58
 800c424:	4614      	mov	r4, r2
 800c426:	461d      	mov	r5, r3
 800c428:	da08      	bge.n	800c43c <__swhatbuf_r+0x24>
 800c42a:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800c42e:	2200      	movs	r2, #0
 800c430:	602a      	str	r2, [r5, #0]
 800c432:	061a      	lsls	r2, r3, #24
 800c434:	d410      	bmi.n	800c458 <__swhatbuf_r+0x40>
 800c436:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c43a:	e00e      	b.n	800c45a <__swhatbuf_r+0x42>
 800c43c:	466a      	mov	r2, sp
 800c43e:	f000 f8c1 	bl	800c5c4 <_fstat_r>
 800c442:	2800      	cmp	r0, #0
 800c444:	dbf1      	blt.n	800c42a <__swhatbuf_r+0x12>
 800c446:	9a01      	ldr	r2, [sp, #4]
 800c448:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800c44c:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800c450:	425a      	negs	r2, r3
 800c452:	415a      	adcs	r2, r3
 800c454:	602a      	str	r2, [r5, #0]
 800c456:	e7ee      	b.n	800c436 <__swhatbuf_r+0x1e>
 800c458:	2340      	movs	r3, #64	; 0x40
 800c45a:	2000      	movs	r0, #0
 800c45c:	6023      	str	r3, [r4, #0]
 800c45e:	b016      	add	sp, #88	; 0x58
 800c460:	bd70      	pop	{r4, r5, r6, pc}
	...

0800c464 <__smakebuf_r>:
 800c464:	898b      	ldrh	r3, [r1, #12]
 800c466:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800c468:	079d      	lsls	r5, r3, #30
 800c46a:	4606      	mov	r6, r0
 800c46c:	460c      	mov	r4, r1
 800c46e:	d507      	bpl.n	800c480 <__smakebuf_r+0x1c>
 800c470:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800c474:	6023      	str	r3, [r4, #0]
 800c476:	6123      	str	r3, [r4, #16]
 800c478:	2301      	movs	r3, #1
 800c47a:	6163      	str	r3, [r4, #20]
 800c47c:	b002      	add	sp, #8
 800c47e:	bd70      	pop	{r4, r5, r6, pc}
 800c480:	ab01      	add	r3, sp, #4
 800c482:	466a      	mov	r2, sp
 800c484:	f7ff ffc8 	bl	800c418 <__swhatbuf_r>
 800c488:	9900      	ldr	r1, [sp, #0]
 800c48a:	4605      	mov	r5, r0
 800c48c:	4630      	mov	r0, r6
 800c48e:	f7ff fa35 	bl	800b8fc <_malloc_r>
 800c492:	b948      	cbnz	r0, 800c4a8 <__smakebuf_r+0x44>
 800c494:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c498:	059a      	lsls	r2, r3, #22
 800c49a:	d4ef      	bmi.n	800c47c <__smakebuf_r+0x18>
 800c49c:	f023 0303 	bic.w	r3, r3, #3
 800c4a0:	f043 0302 	orr.w	r3, r3, #2
 800c4a4:	81a3      	strh	r3, [r4, #12]
 800c4a6:	e7e3      	b.n	800c470 <__smakebuf_r+0xc>
 800c4a8:	4b0d      	ldr	r3, [pc, #52]	; (800c4e0 <__smakebuf_r+0x7c>)
 800c4aa:	62b3      	str	r3, [r6, #40]	; 0x28
 800c4ac:	89a3      	ldrh	r3, [r4, #12]
 800c4ae:	6020      	str	r0, [r4, #0]
 800c4b0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c4b4:	81a3      	strh	r3, [r4, #12]
 800c4b6:	9b00      	ldr	r3, [sp, #0]
 800c4b8:	6163      	str	r3, [r4, #20]
 800c4ba:	9b01      	ldr	r3, [sp, #4]
 800c4bc:	6120      	str	r0, [r4, #16]
 800c4be:	b15b      	cbz	r3, 800c4d8 <__smakebuf_r+0x74>
 800c4c0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c4c4:	4630      	mov	r0, r6
 800c4c6:	f000 f88f 	bl	800c5e8 <_isatty_r>
 800c4ca:	b128      	cbz	r0, 800c4d8 <__smakebuf_r+0x74>
 800c4cc:	89a3      	ldrh	r3, [r4, #12]
 800c4ce:	f023 0303 	bic.w	r3, r3, #3
 800c4d2:	f043 0301 	orr.w	r3, r3, #1
 800c4d6:	81a3      	strh	r3, [r4, #12]
 800c4d8:	89a0      	ldrh	r0, [r4, #12]
 800c4da:	4305      	orrs	r5, r0
 800c4dc:	81a5      	strh	r5, [r4, #12]
 800c4de:	e7cd      	b.n	800c47c <__smakebuf_r+0x18>
 800c4e0:	0800a595 	.word	0x0800a595

0800c4e4 <memmove>:
 800c4e4:	4288      	cmp	r0, r1
 800c4e6:	b510      	push	{r4, lr}
 800c4e8:	eb01 0402 	add.w	r4, r1, r2
 800c4ec:	d902      	bls.n	800c4f4 <memmove+0x10>
 800c4ee:	4284      	cmp	r4, r0
 800c4f0:	4623      	mov	r3, r4
 800c4f2:	d807      	bhi.n	800c504 <memmove+0x20>
 800c4f4:	1e43      	subs	r3, r0, #1
 800c4f6:	42a1      	cmp	r1, r4
 800c4f8:	d008      	beq.n	800c50c <memmove+0x28>
 800c4fa:	f811 2b01 	ldrb.w	r2, [r1], #1
 800c4fe:	f803 2f01 	strb.w	r2, [r3, #1]!
 800c502:	e7f8      	b.n	800c4f6 <memmove+0x12>
 800c504:	4402      	add	r2, r0
 800c506:	4601      	mov	r1, r0
 800c508:	428a      	cmp	r2, r1
 800c50a:	d100      	bne.n	800c50e <memmove+0x2a>
 800c50c:	bd10      	pop	{r4, pc}
 800c50e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800c512:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800c516:	e7f7      	b.n	800c508 <memmove+0x24>

0800c518 <__malloc_lock>:
 800c518:	4801      	ldr	r0, [pc, #4]	; (800c520 <__malloc_lock+0x8>)
 800c51a:	f7fe bc80 	b.w	800ae1e <__retarget_lock_acquire_recursive>
 800c51e:	bf00      	nop
 800c520:	20001534 	.word	0x20001534

0800c524 <__malloc_unlock>:
 800c524:	4801      	ldr	r0, [pc, #4]	; (800c52c <__malloc_unlock+0x8>)
 800c526:	f7fe bc7b 	b.w	800ae20 <__retarget_lock_release_recursive>
 800c52a:	bf00      	nop
 800c52c:	20001534 	.word	0x20001534

0800c530 <_realloc_r>:
 800c530:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c534:	4680      	mov	r8, r0
 800c536:	4614      	mov	r4, r2
 800c538:	460e      	mov	r6, r1
 800c53a:	b921      	cbnz	r1, 800c546 <_realloc_r+0x16>
 800c53c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c540:	4611      	mov	r1, r2
 800c542:	f7ff b9db 	b.w	800b8fc <_malloc_r>
 800c546:	b92a      	cbnz	r2, 800c554 <_realloc_r+0x24>
 800c548:	f7ff f96c 	bl	800b824 <_free_r>
 800c54c:	4625      	mov	r5, r4
 800c54e:	4628      	mov	r0, r5
 800c550:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c554:	f000 f858 	bl	800c608 <_malloc_usable_size_r>
 800c558:	4284      	cmp	r4, r0
 800c55a:	4607      	mov	r7, r0
 800c55c:	d802      	bhi.n	800c564 <_realloc_r+0x34>
 800c55e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800c562:	d812      	bhi.n	800c58a <_realloc_r+0x5a>
 800c564:	4621      	mov	r1, r4
 800c566:	4640      	mov	r0, r8
 800c568:	f7ff f9c8 	bl	800b8fc <_malloc_r>
 800c56c:	4605      	mov	r5, r0
 800c56e:	2800      	cmp	r0, #0
 800c570:	d0ed      	beq.n	800c54e <_realloc_r+0x1e>
 800c572:	42bc      	cmp	r4, r7
 800c574:	4622      	mov	r2, r4
 800c576:	4631      	mov	r1, r6
 800c578:	bf28      	it	cs
 800c57a:	463a      	movcs	r2, r7
 800c57c:	f7fe fc6c 	bl	800ae58 <memcpy>
 800c580:	4631      	mov	r1, r6
 800c582:	4640      	mov	r0, r8
 800c584:	f7ff f94e 	bl	800b824 <_free_r>
 800c588:	e7e1      	b.n	800c54e <_realloc_r+0x1e>
 800c58a:	4635      	mov	r5, r6
 800c58c:	e7df      	b.n	800c54e <_realloc_r+0x1e>
	...

0800c590 <_read_r>:
 800c590:	b538      	push	{r3, r4, r5, lr}
 800c592:	4d07      	ldr	r5, [pc, #28]	; (800c5b0 <_read_r+0x20>)
 800c594:	4604      	mov	r4, r0
 800c596:	4608      	mov	r0, r1
 800c598:	4611      	mov	r1, r2
 800c59a:	2200      	movs	r2, #0
 800c59c:	602a      	str	r2, [r5, #0]
 800c59e:	461a      	mov	r2, r3
 800c5a0:	f7f5 fe60 	bl	8002264 <_read>
 800c5a4:	1c43      	adds	r3, r0, #1
 800c5a6:	d102      	bne.n	800c5ae <_read_r+0x1e>
 800c5a8:	682b      	ldr	r3, [r5, #0]
 800c5aa:	b103      	cbz	r3, 800c5ae <_read_r+0x1e>
 800c5ac:	6023      	str	r3, [r4, #0]
 800c5ae:	bd38      	pop	{r3, r4, r5, pc}
 800c5b0:	20001540 	.word	0x20001540

0800c5b4 <abort>:
 800c5b4:	b508      	push	{r3, lr}
 800c5b6:	2006      	movs	r0, #6
 800c5b8:	f000 f856 	bl	800c668 <raise>
 800c5bc:	2001      	movs	r0, #1
 800c5be:	f7f5 fe47 	bl	8002250 <_exit>
	...

0800c5c4 <_fstat_r>:
 800c5c4:	b538      	push	{r3, r4, r5, lr}
 800c5c6:	4d07      	ldr	r5, [pc, #28]	; (800c5e4 <_fstat_r+0x20>)
 800c5c8:	2300      	movs	r3, #0
 800c5ca:	4604      	mov	r4, r0
 800c5cc:	4608      	mov	r0, r1
 800c5ce:	4611      	mov	r1, r2
 800c5d0:	602b      	str	r3, [r5, #0]
 800c5d2:	f7f5 fe8c 	bl	80022ee <_fstat>
 800c5d6:	1c43      	adds	r3, r0, #1
 800c5d8:	d102      	bne.n	800c5e0 <_fstat_r+0x1c>
 800c5da:	682b      	ldr	r3, [r5, #0]
 800c5dc:	b103      	cbz	r3, 800c5e0 <_fstat_r+0x1c>
 800c5de:	6023      	str	r3, [r4, #0]
 800c5e0:	bd38      	pop	{r3, r4, r5, pc}
 800c5e2:	bf00      	nop
 800c5e4:	20001540 	.word	0x20001540

0800c5e8 <_isatty_r>:
 800c5e8:	b538      	push	{r3, r4, r5, lr}
 800c5ea:	4d06      	ldr	r5, [pc, #24]	; (800c604 <_isatty_r+0x1c>)
 800c5ec:	2300      	movs	r3, #0
 800c5ee:	4604      	mov	r4, r0
 800c5f0:	4608      	mov	r0, r1
 800c5f2:	602b      	str	r3, [r5, #0]
 800c5f4:	f7f5 fe8b 	bl	800230e <_isatty>
 800c5f8:	1c43      	adds	r3, r0, #1
 800c5fa:	d102      	bne.n	800c602 <_isatty_r+0x1a>
 800c5fc:	682b      	ldr	r3, [r5, #0]
 800c5fe:	b103      	cbz	r3, 800c602 <_isatty_r+0x1a>
 800c600:	6023      	str	r3, [r4, #0]
 800c602:	bd38      	pop	{r3, r4, r5, pc}
 800c604:	20001540 	.word	0x20001540

0800c608 <_malloc_usable_size_r>:
 800c608:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c60c:	1f18      	subs	r0, r3, #4
 800c60e:	2b00      	cmp	r3, #0
 800c610:	bfbc      	itt	lt
 800c612:	580b      	ldrlt	r3, [r1, r0]
 800c614:	18c0      	addlt	r0, r0, r3
 800c616:	4770      	bx	lr

0800c618 <_raise_r>:
 800c618:	291f      	cmp	r1, #31
 800c61a:	b538      	push	{r3, r4, r5, lr}
 800c61c:	4604      	mov	r4, r0
 800c61e:	460d      	mov	r5, r1
 800c620:	d904      	bls.n	800c62c <_raise_r+0x14>
 800c622:	2316      	movs	r3, #22
 800c624:	6003      	str	r3, [r0, #0]
 800c626:	f04f 30ff 	mov.w	r0, #4294967295
 800c62a:	bd38      	pop	{r3, r4, r5, pc}
 800c62c:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800c62e:	b112      	cbz	r2, 800c636 <_raise_r+0x1e>
 800c630:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800c634:	b94b      	cbnz	r3, 800c64a <_raise_r+0x32>
 800c636:	4620      	mov	r0, r4
 800c638:	f000 f830 	bl	800c69c <_getpid_r>
 800c63c:	462a      	mov	r2, r5
 800c63e:	4601      	mov	r1, r0
 800c640:	4620      	mov	r0, r4
 800c642:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c646:	f000 b817 	b.w	800c678 <_kill_r>
 800c64a:	2b01      	cmp	r3, #1
 800c64c:	d00a      	beq.n	800c664 <_raise_r+0x4c>
 800c64e:	1c59      	adds	r1, r3, #1
 800c650:	d103      	bne.n	800c65a <_raise_r+0x42>
 800c652:	2316      	movs	r3, #22
 800c654:	6003      	str	r3, [r0, #0]
 800c656:	2001      	movs	r0, #1
 800c658:	e7e7      	b.n	800c62a <_raise_r+0x12>
 800c65a:	2400      	movs	r4, #0
 800c65c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800c660:	4628      	mov	r0, r5
 800c662:	4798      	blx	r3
 800c664:	2000      	movs	r0, #0
 800c666:	e7e0      	b.n	800c62a <_raise_r+0x12>

0800c668 <raise>:
 800c668:	4b02      	ldr	r3, [pc, #8]	; (800c674 <raise+0xc>)
 800c66a:	4601      	mov	r1, r0
 800c66c:	6818      	ldr	r0, [r3, #0]
 800c66e:	f7ff bfd3 	b.w	800c618 <_raise_r>
 800c672:	bf00      	nop
 800c674:	20000014 	.word	0x20000014

0800c678 <_kill_r>:
 800c678:	b538      	push	{r3, r4, r5, lr}
 800c67a:	4d07      	ldr	r5, [pc, #28]	; (800c698 <_kill_r+0x20>)
 800c67c:	2300      	movs	r3, #0
 800c67e:	4604      	mov	r4, r0
 800c680:	4608      	mov	r0, r1
 800c682:	4611      	mov	r1, r2
 800c684:	602b      	str	r3, [r5, #0]
 800c686:	f7f5 fdd3 	bl	8002230 <_kill>
 800c68a:	1c43      	adds	r3, r0, #1
 800c68c:	d102      	bne.n	800c694 <_kill_r+0x1c>
 800c68e:	682b      	ldr	r3, [r5, #0]
 800c690:	b103      	cbz	r3, 800c694 <_kill_r+0x1c>
 800c692:	6023      	str	r3, [r4, #0]
 800c694:	bd38      	pop	{r3, r4, r5, pc}
 800c696:	bf00      	nop
 800c698:	20001540 	.word	0x20001540

0800c69c <_getpid_r>:
 800c69c:	f7f5 bdc0 	b.w	8002220 <_getpid>

0800c6a0 <_init>:
 800c6a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c6a2:	bf00      	nop
 800c6a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c6a6:	bc08      	pop	{r3}
 800c6a8:	469e      	mov	lr, r3
 800c6aa:	4770      	bx	lr

0800c6ac <_fini>:
 800c6ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c6ae:	bf00      	nop
 800c6b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c6b2:	bc08      	pop	{r3}
 800c6b4:	469e      	mov	lr, r3
 800c6b6:	4770      	bx	lr
